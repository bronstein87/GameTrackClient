// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.internal.proto

#ifndef PROTOBUF_msg_2einternal_2eproto__INCLUDED
#define PROTOBUF_msg_2einternal_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace gt {
namespace internal {
namespace msg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_msg_2einternal_2eproto();
void protobuf_AssignDesc_msg_2einternal_2eproto();
void protobuf_ShutdownFile_msg_2einternal_2eproto();

class Point2;
class Point3;
class Rect;
class RecROIs;
class RecognizeParameters;
class HardwareCameraParameters;
class PictureCameraParameters;
class AutoExposureParameters;
class StreamCameraParameters;
class StreamCameraCommand;
class CalibrationParameters;
class BallMeasure;
class BatMeasure;
class OutOfFrameInfo;
class RecognizeData;
class PedestrianMeasure;
class CameraOptions;
class ServerOptions;
class FrameTime;
class DebugInfo;

enum CameraPosition {
  Undefined = 0,
  Left = 1,
  Right = 2
};
bool CameraPosition_IsValid(int value);
const CameraPosition CameraPosition_MIN = Undefined;
const CameraPosition CameraPosition_MAX = Right;
const int CameraPosition_ARRAYSIZE = CameraPosition_MAX + 1;

const ::google::protobuf::EnumDescriptor* CameraPosition_descriptor();
inline const ::std::string& CameraPosition_Name(CameraPosition value) {
  return ::google::protobuf::internal::NameOfEnum(
    CameraPosition_descriptor(), value);
}
inline bool CameraPosition_Parse(
    const ::std::string& name, CameraPosition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CameraPosition>(
    CameraPosition_descriptor(), name, value);
}
enum OutOfFrame {
  LeftOut = 0,
  RightOut = 1,
  UpOut = 2,
  DownOut = 3,
  InFrame = 4
};
bool OutOfFrame_IsValid(int value);
const OutOfFrame OutOfFrame_MIN = LeftOut;
const OutOfFrame OutOfFrame_MAX = InFrame;
const int OutOfFrame_ARRAYSIZE = OutOfFrame_MAX + 1;

const ::google::protobuf::EnumDescriptor* OutOfFrame_descriptor();
inline const ::std::string& OutOfFrame_Name(OutOfFrame value) {
  return ::google::protobuf::internal::NameOfEnum(
    OutOfFrame_descriptor(), value);
}
inline bool OutOfFrame_Parse(
    const ::std::string& name, OutOfFrame* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OutOfFrame>(
    OutOfFrame_descriptor(), name, value);
}
enum StreamType {
  Main = 1,
  Additional = 2
};
bool StreamType_IsValid(int value);
const StreamType StreamType_MIN = Main;
const StreamType StreamType_MAX = Additional;
const int StreamType_ARRAYSIZE = StreamType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StreamType_descriptor();
inline const ::std::string& StreamType_Name(StreamType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StreamType_descriptor(), value);
}
inline bool StreamType_Parse(
    const ::std::string& name, StreamType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StreamType>(
    StreamType_descriptor(), name, value);
}
enum BallEvent {
  ThrowDetected = 0,
  HitDetected = 1,
  MoveDetected = 2,
  CatchThrowDetected = 3
};
bool BallEvent_IsValid(int value);
const BallEvent BallEvent_MIN = ThrowDetected;
const BallEvent BallEvent_MAX = CatchThrowDetected;
const int BallEvent_ARRAYSIZE = BallEvent_MAX + 1;

const ::google::protobuf::EnumDescriptor* BallEvent_descriptor();
inline const ::std::string& BallEvent_Name(BallEvent value) {
  return ::google::protobuf::internal::NameOfEnum(
    BallEvent_descriptor(), value);
}
inline bool BallEvent_Parse(
    const ::std::string& name, BallEvent* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BallEvent>(
    BallEvent_descriptor(), name, value);
}
enum PlayerPosition {
  Invalid = 1,
  Home = 2,
  FirstBase = 3,
  SecondBase = 4,
  ThirdBase = 5,
  ShortStop = 6,
  LeftField = 7,
  CenterField = 8,
  RightField = 9
};
bool PlayerPosition_IsValid(int value);
const PlayerPosition PlayerPosition_MIN = Invalid;
const PlayerPosition PlayerPosition_MAX = RightField;
const int PlayerPosition_ARRAYSIZE = PlayerPosition_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerPosition_descriptor();
inline const ::std::string& PlayerPosition_Name(PlayerPosition value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerPosition_descriptor(), value);
}
inline bool PlayerPosition_Parse(
    const ::std::string& name, PlayerPosition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerPosition>(
    PlayerPosition_descriptor(), name, value);
}
enum CameraType {
  BaseLeftMain = 1,
  BaseRightMain = 2,
  BaseLeftAdd = 3,
  BaseRightAdd = 4,
  Pitch = 5,
  BatLeft = 6,
  BatRight = 7,
  FishEye = 8
};
bool CameraType_IsValid(int value);
const CameraType CameraType_MIN = BaseLeftMain;
const CameraType CameraType_MAX = FishEye;
const int CameraType_ARRAYSIZE = CameraType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CameraType_descriptor();
inline const ::std::string& CameraType_Name(CameraType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CameraType_descriptor(), value);
}
inline bool CameraType_Parse(
    const ::std::string& name, CameraType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CameraType>(
    CameraType_descriptor(), name, value);
}
enum GameTrackProtocol {
  SendCameraParameters = 1,
  RequestStream = 2,
  NotifyOutOfFrame = 3,
  NotifyPedestrianPosition = 4,
  NotifyBallMeasure = 5,
  RequestCameraFrame = 6,
  GetBallCoordinates = 7,
  GetBatCoordinates = 8,
  GetTestData = 9,
  RestartCamera = 10,
  SendCurrentTime = 11,
  SetDebugMode = 12,
  RequestNextFrameDebugMode = 13,
  NotifyMomentStartDetected = 14,
  RequestPreviousFrameDebugMode = 15,
  RestartSoftware = 16
};
bool GameTrackProtocol_IsValid(int value);
const GameTrackProtocol GameTrackProtocol_MIN = SendCameraParameters;
const GameTrackProtocol GameTrackProtocol_MAX = RestartSoftware;
const int GameTrackProtocol_ARRAYSIZE = GameTrackProtocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameTrackProtocol_descriptor();
inline const ::std::string& GameTrackProtocol_Name(GameTrackProtocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameTrackProtocol_descriptor(), value);
}
inline bool GameTrackProtocol_Parse(
    const ::std::string& name, GameTrackProtocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameTrackProtocol>(
    GameTrackProtocol_descriptor(), name, value);
}
// ===================================================================

class Point2 : public ::google::protobuf::Message {
 public:
  Point2();
  virtual ~Point2();

  Point2(const Point2& from);

  inline Point2& operator=(const Point2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point2& default_instance();

  void Swap(Point2* other);

  // implements Message ----------------------------------------------

  Point2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point2& from);
  void MergeFrom(const Point2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);

  // required double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);

  // @@protoc_insertion_point(class_scope:gt.internal.msg.Point2)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double x_;
  double y_;
  friend void  protobuf_AddDesc_msg_2einternal_2eproto();
  friend void protobuf_AssignDesc_msg_2einternal_2eproto();
  friend void protobuf_ShutdownFile_msg_2einternal_2eproto();

  void InitAsDefaultInstance();
  static Point2* default_instance_;
};
// -------------------------------------------------------------------

class Point3 : public ::google::protobuf::Message {
 public:
  Point3();
  virtual ~Point3();

  Point3(const Point3& from);

  inline Point3& operator=(const Point3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point3& default_instance();

  void Swap(Point3* other);

  // implements Message ----------------------------------------------

  Point3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point3& from);
  void MergeFrom(const Point3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);

  // required double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);

  // required double z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline double z() const;
  inline void set_z(double value);

  // @@protoc_insertion_point(class_scope:gt.internal.msg.Point3)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  friend void  protobuf_AddDesc_msg_2einternal_2eproto();
  friend void protobuf_AssignDesc_msg_2einternal_2eproto();
  friend void protobuf_ShutdownFile_msg_2einternal_2eproto();

  void InitAsDefaultInstance();
  static Point3* default_instance_;
};
// -------------------------------------------------------------------

class Rect : public ::google::protobuf::Message {
 public:
  Rect();
  virtual ~Rect();

  Rect(const Rect& from);

  inline Rect& operator=(const Rect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rect& default_instance();

  void Swap(Rect* other);

  // implements Message ----------------------------------------------

  Rect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Rect& from);
  void MergeFrom(const Rect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gt.internal.msg.Point2 xy = 1;
  inline bool has_xy() const;
  inline void clear_xy();
  static const int kXyFieldNumber = 1;
  inline const ::gt::internal::msg::Point2& xy() const;
  inline ::gt::internal::msg::Point2* mutable_xy();
  inline ::gt::internal::msg::Point2* release_xy();
  inline void set_allocated_xy(::gt::internal::msg::Point2* xy);

  // required .gt.internal.msg.Point2 wh = 2;
  inline bool has_wh() const;
  inline void clear_wh();
  static const int kWhFieldNumber = 2;
  inline const ::gt::internal::msg::Point2& wh() const;
  inline ::gt::internal::msg::Point2* mutable_wh();
  inline ::gt::internal::msg::Point2* release_wh();
  inline void set_allocated_wh(::gt::internal::msg::Point2* wh);

  // @@protoc_insertion_point(class_scope:gt.internal.msg.Rect)
 private:
  inline void set_has_xy();
  inline void clear_has_xy();
  inline void set_has_wh();
  inline void clear_has_wh();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gt::internal::msg::Point2* xy_;
  ::gt::internal::msg::Point2* wh_;
  friend void  protobuf_AddDesc_msg_2einternal_2eproto();
  friend void protobuf_AssignDesc_msg_2einternal_2eproto();
  friend void protobuf_ShutdownFile_msg_2einternal_2eproto();

  void InitAsDefaultInstance();
  static Rect* default_instance_;
};
// -------------------------------------------------------------------

class RecROIs : public ::google::protobuf::Message {
 public:
  RecROIs();
  virtual ~RecROIs();

  RecROIs(const RecROIs& from);

  inline RecROIs& operator=(const RecROIs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecROIs& default_instance();

  void Swap(RecROIs* other);

  // implements Message ----------------------------------------------

  RecROIs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecROIs& from);
  void MergeFrom(const RecROIs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gt.internal.msg.Rect throw_search_rect = 1;
  inline bool has_throw_search_rect() const;
  inline void clear_throw_search_rect();
  static const int kThrowSearchRectFieldNumber = 1;
  inline const ::gt::internal::msg::Rect& throw_search_rect() const;
  inline ::gt::internal::msg::Rect* mutable_throw_search_rect();
  inline ::gt::internal::msg::Rect* release_throw_search_rect();
  inline void set_allocated_throw_search_rect(::gt::internal::msg::Rect* throw_search_rect);

  // optional .gt.internal.msg.Rect throw_track_rect = 2;
  inline bool has_throw_track_rect() const;
  inline void clear_throw_track_rect();
  static const int kThrowTrackRectFieldNumber = 2;
  inline const ::gt::internal::msg::Rect& throw_track_rect() const;
  inline ::gt::internal::msg::Rect* mutable_throw_track_rect();
  inline ::gt::internal::msg::Rect* release_throw_track_rect();
  inline void set_allocated_throw_track_rect(::gt::internal::msg::Rect* throw_track_rect);

  // optional .gt.internal.msg.Rect hit_search_rect = 3;
  inline bool has_hit_search_rect() const;
  inline void clear_hit_search_rect();
  static const int kHitSearchRectFieldNumber = 3;
  inline const ::gt::internal::msg::Rect& hit_search_rect() const;
  inline ::gt::internal::msg::Rect* mutable_hit_search_rect();
  inline ::gt::internal::msg::Rect* release_hit_search_rect();
  inline void set_allocated_hit_search_rect(::gt::internal::msg::Rect* hit_search_rect);

  // optional .gt.internal.msg.Rect hit_track_rect = 4;
  inline bool has_hit_track_rect() const;
  inline void clear_hit_track_rect();
  static const int kHitTrackRectFieldNumber = 4;
  inline const ::gt::internal::msg::Rect& hit_track_rect() const;
  inline ::gt::internal::msg::Rect* mutable_hit_track_rect();
  inline ::gt::internal::msg::Rect* release_hit_track_rect();
  inline void set_allocated_hit_track_rect(::gt::internal::msg::Rect* hit_track_rect);

  // optional .gt.internal.msg.Rect pick_off_search_rect = 5;
  inline bool has_pick_off_search_rect() const;
  inline void clear_pick_off_search_rect();
  static const int kPickOffSearchRectFieldNumber = 5;
  inline const ::gt::internal::msg::Rect& pick_off_search_rect() const;
  inline ::gt::internal::msg::Rect* mutable_pick_off_search_rect();
  inline ::gt::internal::msg::Rect* release_pick_off_search_rect();
  inline void set_allocated_pick_off_search_rect(::gt::internal::msg::Rect* pick_off_search_rect);

  // optional .gt.internal.msg.Rect bat_detect_rect = 6;
  inline bool has_bat_detect_rect() const;
  inline void clear_bat_detect_rect();
  static const int kBatDetectRectFieldNumber = 6;
  inline const ::gt::internal::msg::Rect& bat_detect_rect() const;
  inline ::gt::internal::msg::Rect* mutable_bat_detect_rect();
  inline ::gt::internal::msg::Rect* release_bat_detect_rect();
  inline void set_allocated_bat_detect_rect(::gt::internal::msg::Rect* bat_detect_rect);

  // @@protoc_insertion_point(class_scope:gt.internal.msg.RecROIs)
 private:
  inline void set_has_throw_search_rect();
  inline void clear_has_throw_search_rect();
  inline void set_has_throw_track_rect();
  inline void clear_has_throw_track_rect();
  inline void set_has_hit_search_rect();
  inline void clear_has_hit_search_rect();
  inline void set_has_hit_track_rect();
  inline void clear_has_hit_track_rect();
  inline void set_has_pick_off_search_rect();
  inline void clear_has_pick_off_search_rect();
  inline void set_has_bat_detect_rect();
  inline void clear_has_bat_detect_rect();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gt::internal::msg::Rect* throw_search_rect_;
  ::gt::internal::msg::Rect* throw_track_rect_;
  ::gt::internal::msg::Rect* hit_search_rect_;
  ::gt::internal::msg::Rect* hit_track_rect_;
  ::gt::internal::msg::Rect* pick_off_search_rect_;
  ::gt::internal::msg::Rect* bat_detect_rect_;
  friend void  protobuf_AddDesc_msg_2einternal_2eproto();
  friend void protobuf_AssignDesc_msg_2einternal_2eproto();
  friend void protobuf_ShutdownFile_msg_2einternal_2eproto();

  void InitAsDefaultInstance();
  static RecROIs* default_instance_;
};
// -------------------------------------------------------------------

class RecognizeParameters : public ::google::protobuf::Message {
 public:
  RecognizeParameters();
  virtual ~RecognizeParameters();

  RecognizeParameters(const RecognizeParameters& from);

  inline RecognizeParameters& operator=(const RecognizeParameters& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecognizeParameters& default_instance();

  void Swap(RecognizeParameters* other);

  // implements Message ----------------------------------------------

  RecognizeParameters* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecognizeParameters& from);
  void MergeFrom(const RecognizeParameters& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double corr_coef = 1;
  inline bool has_corr_coef() const;
  inline void clear_corr_coef();
  static const int kCorrCoefFieldNumber = 1;
  inline double corr_coef() const;
  inline void set_corr_coef(double value);

  // optional double sko_coef = 2;
  inline bool has_sko_coef() const;
  inline void clear_sko_coef();
  static const int kSkoCoefFieldNumber = 2;
  inline double sko_coef() const;
  inline void set_sko_coef(double value);

  // optional int32 search_area_size = 3;
  inline bool has_search_area_size() const;
  inline void clear_search_area_size();
  static const int kSearchAreaSizeFieldNumber = 3;
  inline ::google::protobuf::int32 search_area_size() const;
  inline void set_search_area_size(::google::protobuf::int32 value);

  // optional double min_sko_template = 4;
  inline bool has_min_sko_template() const;
  inline void clear_min_sko_template();
  static const int kMinSkoTemplateFieldNumber = 4;
  inline double min_sko_template() const;
  inline void set_min_sko_template(double value);

  // optional double max_angle_directions = 5;
  inline bool has_max_angle_directions() const;
  inline void clear_max_angle_directions();
  static const int kMaxAngleDirectionsFieldNumber = 5;
  inline double max_angle_directions() const;
  inline void set_max_angle_directions(double value);

  // optional double min_speed = 6;
  inline bool has_min_speed() const;
  inline void clear_min_speed();
  static const int kMinSpeedFieldNumber = 6;
  inline double min_speed() const;
  inline void set_min_speed(double value);

  // optional int32 canny_thres_min = 7;
  inline bool has_canny_thres_min() const;
  inline void clear_canny_thres_min();
  static const int kCannyThresMinFieldNumber = 7;
  inline ::google::protobuf::int32 canny_thres_min() const;
  inline void set_canny_thres_min(::google::protobuf::int32 value);

  // optional int32 canny_thres_max = 8;
  inline bool has_canny_thres_max() const;
  inline void clear_canny_thres_max();
  static const int kCannyThresMaxFieldNumber = 8;
  inline ::google::protobuf::int32 canny_thres_max() const;
  inline void set_canny_thres_max(::google::protobuf::int32 value);

  // optional int32 max_area = 9;
  inline bool has_max_area() const;
  inline void clear_max_area();
  static const int kMaxAreaFieldNumber = 9;
  inline ::google::protobuf::int32 max_area() const;
  inline void set_max_area(::google::protobuf::int32 value);

  // optional int32 min_area = 10;
  inline bool has_min_area() const;
  inline void clear_min_area();
  static const int kMinAreaFieldNumber = 10;
  inline ::google::protobuf::int32 min_area() const;
  inline void set_min_area(::google::protobuf::int32 value);

  // optional double circularity_coeff = 11;
  inline bool has_circularity_coeff() const;
  inline void clear_circularity_coeff();
  static const int kCircularityCoeffFieldNumber = 11;
  inline double circularity_coeff() const;
  inline void set_circularity_coeff(double value);

  // @@protoc_insertion_point(class_scope:gt.internal.msg.RecognizeParameters)
 private:
  inline void set_has_corr_coef();
  inline void clear_has_corr_coef();
  inline void set_has_sko_coef();
  inline void clear_has_sko_coef();
  inline void set_has_search_area_size();
  inline void clear_has_search_area_size();
  inline void set_has_min_sko_template();
  inline void clear_has_min_sko_template();
  inline void set_has_max_angle_directions();
  inline void clear_has_max_angle_directions();
  inline void set_has_min_speed();
  inline void clear_has_min_speed();
  inline void set_has_canny_thres_min();
  inline void clear_has_canny_thres_min();
  inline void set_has_canny_thres_max();
  inline void clear_has_canny_thres_max();
  inline void set_has_max_area();
  inline void clear_has_max_area();
  inline void set_has_min_area();
  inline void clear_has_min_area();
  inline void set_has_circularity_coeff();
  inline void clear_has_circularity_coeff();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double corr_coef_;
  double sko_coef_;
  double min_sko_template_;
  double max_angle_directions_;
  ::google::protobuf::int32 search_area_size_;
  ::google::protobuf::int32 canny_thres_min_;
  double min_speed_;
  ::google::protobuf::int32 canny_thres_max_;
  ::google::protobuf::int32 max_area_;
  double circularity_coeff_;
  ::google::protobuf::int32 min_area_;
  friend void  protobuf_AddDesc_msg_2einternal_2eproto();
  friend void protobuf_AssignDesc_msg_2einternal_2eproto();
  friend void protobuf_ShutdownFile_msg_2einternal_2eproto();

  void InitAsDefaultInstance();
  static RecognizeParameters* default_instance_;
};
// -------------------------------------------------------------------

class HardwareCameraParameters : public ::google::protobuf::Message {
 public:
  HardwareCameraParameters();
  virtual ~HardwareCameraParameters();

  HardwareCameraParameters(const HardwareCameraParameters& from);

  inline HardwareCameraParameters& operator=(const HardwareCameraParameters& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HardwareCameraParameters& default_instance();

  void Swap(HardwareCameraParameters* other);

  // implements Message ----------------------------------------------

  HardwareCameraParameters* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HardwareCameraParameters& from);
  void MergeFrom(const HardwareCameraParameters& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double exposure = 1;
  inline bool has_exposure() const;
  inline void clear_exposure();
  static const int kExposureFieldNumber = 1;
  inline double exposure() const;
  inline void set_exposure(double value);

  // optional double min_exposure = 2;
  inline bool has_min_exposure() const;
  inline void clear_min_exposure();
  static const int kMinExposureFieldNumber = 2;
  inline double min_exposure() const;
  inline void set_min_exposure(double value);

  // optional double max_exposure = 3;
  inline bool has_max_exposure() const;
  inline void clear_max_exposure();
  static const int kMaxExposureFieldNumber = 3;
  inline double max_exposure() const;
  inline void set_max_exposure(double value);

  // optional int32 pixel_clock = 4;
  inline bool has_pixel_clock() const;
  inline void clear_pixel_clock();
  static const int kPixelClockFieldNumber = 4;
  inline ::google::protobuf::int32 pixel_clock() const;
  inline void set_pixel_clock(::google::protobuf::int32 value);

  // optional int32 min_pixel_clock = 5;
  inline bool has_min_pixel_clock() const;
  inline void clear_min_pixel_clock();
  static const int kMinPixelClockFieldNumber = 5;
  inline ::google::protobuf::int32 min_pixel_clock() const;
  inline void set_min_pixel_clock(::google::protobuf::int32 value);

  // optional int32 max_pixel_clock = 6;
  inline bool has_max_pixel_clock() const;
  inline void clear_max_pixel_clock();
  static const int kMaxPixelClockFieldNumber = 6;
  inline ::google::protobuf::int32 max_pixel_clock() const;
  inline void set_max_pixel_clock(::google::protobuf::int32 value);

  // optional double frame_rate = 7;
  inline bool has_frame_rate() const;
  inline void clear_frame_rate();
  static const int kFrameRateFieldNumber = 7;
  inline double frame_rate() const;
  inline void set_frame_rate(double value);

  // optional double min_frame_rate = 8;
  inline bool has_min_frame_rate() const;
  inline void clear_min_frame_rate();
  static const int kMinFrameRateFieldNumber = 8;
  inline double min_frame_rate() const;
  inline void set_min_frame_rate(double value);

  // optional double max_frame_rate = 9;
  inline bool has_max_frame_rate() const;
  inline void clear_max_frame_rate();
  static const int kMaxFrameRateFieldNumber = 9;
  inline double max_frame_rate() const;
  inline void set_max_frame_rate(double value);

  // optional int32 width = 10;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 10;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional int32 height = 11;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 11;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // optional int32 gain = 12;
  inline bool has_gain() const;
  inline void clear_gain();
  static const int kGainFieldNumber = 12;
  inline ::google::protobuf::int32 gain() const;
  inline void set_gain(::google::protobuf::int32 value);

  // optional bool debounce_enable = 13;
  inline bool has_debounce_enable() const;
  inline void clear_debounce_enable();
  static const int kDebounceEnableFieldNumber = 13;
  inline bool debounce_enable() const;
  inline void set_debounce_enable(bool value);

  // optional int32 debounce_value = 14;
  inline bool has_debounce_value() const;
  inline void clear_debounce_value();
  static const int kDebounceValueFieldNumber = 14;
  inline ::google::protobuf::int32 debounce_value() const;
  inline void set_debounce_value(::google::protobuf::int32 value);

  // optional int32 trigger_mode = 15;
  inline bool has_trigger_mode() const;
  inline void clear_trigger_mode();
  static const int kTriggerModeFieldNumber = 15;
  inline ::google::protobuf::int32 trigger_mode() const;
  inline void set_trigger_mode(::google::protobuf::int32 value);

  // optional int32 focusing = 16;
  inline bool has_focusing() const;
  inline void clear_focusing();
  static const int kFocusingFieldNumber = 16;
  inline ::google::protobuf::int32 focusing() const;
  inline void set_focusing(::google::protobuf::int32 value);

  // optional bool trigger_mode_enable = 17;
  inline bool has_trigger_mode_enable() const;
  inline void clear_trigger_mode_enable();
  static const int kTriggerModeEnableFieldNumber = 17;
  inline bool trigger_mode_enable() const;
  inline void set_trigger_mode_enable(bool value);

  // @@protoc_insertion_point(class_scope:gt.internal.msg.HardwareCameraParameters)
 private:
  inline void set_has_exposure();
  inline void clear_has_exposure();
  inline void set_has_min_exposure();
  inline void clear_has_min_exposure();
  inline void set_has_max_exposure();
  inline void clear_has_max_exposure();
  inline void set_has_pixel_clock();
  inline void clear_has_pixel_clock();
  inline void set_has_min_pixel_clock();
  inline void clear_has_min_pixel_clock();
  inline void set_has_max_pixel_clock();
  inline void clear_has_max_pixel_clock();
  inline void set_has_frame_rate();
  inline void clear_has_frame_rate();
  inline void set_has_min_frame_rate();
  inline void clear_has_min_frame_rate();
  inline void set_has_max_frame_rate();
  inline void clear_has_max_frame_rate();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_gain();
  inline void clear_has_gain();
  inline void set_has_debounce_enable();
  inline void clear_has_debounce_enable();
  inline void set_has_debounce_value();
  inline void clear_has_debounce_value();
  inline void set_has_trigger_mode();
  inline void clear_has_trigger_mode();
  inline void set_has_focusing();
  inline void clear_has_focusing();
  inline void set_has_trigger_mode_enable();
  inline void clear_has_trigger_mode_enable();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double exposure_;
  double min_exposure_;
  double max_exposure_;
  ::google::protobuf::int32 pixel_clock_;
  ::google::protobuf::int32 min_pixel_clock_;
  double frame_rate_;
  double min_frame_rate_;
  ::google::protobuf::int32 max_pixel_clock_;
  ::google::protobuf::int32 width_;
  double max_frame_rate_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 gain_;
  ::google::protobuf::int32 debounce_value_;
  ::google::protobuf::int32 trigger_mode_;
  bool debounce_enable_;
  bool trigger_mode_enable_;
  ::google::protobuf::int32 focusing_;
  friend void  protobuf_AddDesc_msg_2einternal_2eproto();
  friend void protobuf_AssignDesc_msg_2einternal_2eproto();
  friend void protobuf_ShutdownFile_msg_2einternal_2eproto();

  void InitAsDefaultInstance();
  static HardwareCameraParameters* default_instance_;
};
// -------------------------------------------------------------------

class PictureCameraParameters : public ::google::protobuf::Message {
 public:
  PictureCameraParameters();
  virtual ~PictureCameraParameters();

  PictureCameraParameters(const PictureCameraParameters& from);

  inline PictureCameraParameters& operator=(const PictureCameraParameters& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PictureCameraParameters& default_instance();

  void Swap(PictureCameraParameters* other);

  // implements Message ----------------------------------------------

  PictureCameraParameters* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PictureCameraParameters& from);
  void MergeFrom(const PictureCameraParameters& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 picture_param_flag = 1;
  inline bool has_picture_param_flag() const;
  inline void clear_picture_param_flag();
  static const int kPictureParamFlagFieldNumber = 1;
  inline ::google::protobuf::int32 picture_param_flag() const;
  inline void set_picture_param_flag(::google::protobuf::int32 value);

  // optional int32 white_balance = 2;
  inline bool has_white_balance() const;
  inline void clear_white_balance();
  static const int kWhiteBalanceFieldNumber = 2;
  inline ::google::protobuf::int32 white_balance() const;
  inline void set_white_balance(::google::protobuf::int32 value);

  // optional .gt.internal.msg.Rect wb_rect = 3;
  inline bool has_wb_rect() const;
  inline void clear_wb_rect();
  static const int kWbRectFieldNumber = 3;
  inline const ::gt::internal::msg::Rect& wb_rect() const;
  inline ::gt::internal::msg::Rect* mutable_wb_rect();
  inline ::gt::internal::msg::Rect* release_wb_rect();
  inline void set_allocated_wb_rect(::gt::internal::msg::Rect* wb_rect);

  // optional double gamma = 4;
  inline bool has_gamma() const;
  inline void clear_gamma();
  static const int kGammaFieldNumber = 4;
  inline double gamma() const;
  inline void set_gamma(double value);

  // optional double sharp = 5;
  inline bool has_sharp() const;
  inline void clear_sharp();
  static const int kSharpFieldNumber = 5;
  inline double sharp() const;
  inline void set_sharp(double value);

  // optional int32 saturation = 6;
  inline bool has_saturation() const;
  inline void clear_saturation();
  static const int kSaturationFieldNumber = 6;
  inline ::google::protobuf::int32 saturation() const;
  inline void set_saturation(::google::protobuf::int32 value);

  // optional int32 r_saturation = 7;
  inline bool has_r_saturation() const;
  inline void clear_r_saturation();
  static const int kRSaturationFieldNumber = 7;
  inline ::google::protobuf::int32 r_saturation() const;
  inline void set_r_saturation(::google::protobuf::int32 value);

  // optional int32 g_saturation = 8;
  inline bool has_g_saturation() const;
  inline void clear_g_saturation();
  static const int kGSaturationFieldNumber = 8;
  inline ::google::protobuf::int32 g_saturation() const;
  inline void set_g_saturation(::google::protobuf::int32 value);

  // optional int32 b_saturation = 9;
  inline bool has_b_saturation() const;
  inline void clear_b_saturation();
  static const int kBSaturationFieldNumber = 9;
  inline ::google::protobuf::int32 b_saturation() const;
  inline void set_b_saturation(::google::protobuf::int32 value);

  // optional int32 hue = 10;
  inline bool has_hue() const;
  inline void clear_hue();
  static const int kHueFieldNumber = 10;
  inline ::google::protobuf::int32 hue() const;
  inline void set_hue(::google::protobuf::int32 value);

  // optional double shadow_coef = 11;
  inline bool has_shadow_coef() const;
  inline void clear_shadow_coef();
  static const int kShadowCoefFieldNumber = 11;
  inline double shadow_coef() const;
  inline void set_shadow_coef(double value);

  // optional double shadow_threshold = 12;
  inline bool has_shadow_threshold() const;
  inline void clear_shadow_threshold();
  static const int kShadowThresholdFieldNumber = 12;
  inline double shadow_threshold() const;
  inline void set_shadow_threshold(double value);

  // optional int32 shadow_gauss_window_size = 13;
  inline bool has_shadow_gauss_window_size() const;
  inline void clear_shadow_gauss_window_size();
  static const int kShadowGaussWindowSizeFieldNumber = 13;
  inline ::google::protobuf::int32 shadow_gauss_window_size() const;
  inline void set_shadow_gauss_window_size(::google::protobuf::int32 value);

  // optional int32 rotate = 14;
  inline bool has_rotate() const;
  inline void clear_rotate();
  static const int kRotateFieldNumber = 14;
  inline ::google::protobuf::int32 rotate() const;
  inline void set_rotate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gt.internal.msg.PictureCameraParameters)
 private:
  inline void set_has_picture_param_flag();
  inline void clear_has_picture_param_flag();
  inline void set_has_white_balance();
  inline void clear_has_white_balance();
  inline void set_has_wb_rect();
  inline void clear_has_wb_rect();
  inline void set_has_gamma();
  inline void clear_has_gamma();
  inline void set_has_sharp();
  inline void clear_has_sharp();
  inline void set_has_saturation();
  inline void clear_has_saturation();
  inline void set_has_r_saturation();
  inline void clear_has_r_saturation();
  inline void set_has_g_saturation();
  inline void clear_has_g_saturation();
  inline void set_has_b_saturation();
  inline void clear_has_b_saturation();
  inline void set_has_hue();
  inline void clear_has_hue();
  inline void set_has_shadow_coef();
  inline void clear_has_shadow_coef();
  inline void set_has_shadow_threshold();
  inline void clear_has_shadow_threshold();
  inline void set_has_shadow_gauss_window_size();
  inline void clear_has_shadow_gauss_window_size();
  inline void set_has_rotate();
  inline void clear_has_rotate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 picture_param_flag_;
  ::google::protobuf::int32 white_balance_;
  ::gt::internal::msg::Rect* wb_rect_;
  double gamma_;
  double sharp_;
  ::google::protobuf::int32 saturation_;
  ::google::protobuf::int32 r_saturation_;
  ::google::protobuf::int32 g_saturation_;
  ::google::protobuf::int32 b_saturation_;
  double shadow_coef_;
  ::google::protobuf::int32 hue_;
  ::google::protobuf::int32 shadow_gauss_window_size_;
  double shadow_threshold_;
  ::google::protobuf::int32 rotate_;
  friend void  protobuf_AddDesc_msg_2einternal_2eproto();
  friend void protobuf_AssignDesc_msg_2einternal_2eproto();
  friend void protobuf_ShutdownFile_msg_2einternal_2eproto();

  void InitAsDefaultInstance();
  static PictureCameraParameters* default_instance_;
};
// -------------------------------------------------------------------

class AutoExposureParameters : public ::google::protobuf::Message {
 public:
  AutoExposureParameters();
  virtual ~AutoExposureParameters();

  AutoExposureParameters(const AutoExposureParameters& from);

  inline AutoExposureParameters& operator=(const AutoExposureParameters& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AutoExposureParameters& default_instance();

  void Swap(AutoExposureParameters* other);

  // implements Message ----------------------------------------------

  AutoExposureParameters* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AutoExposureParameters& from);
  void MergeFrom(const AutoExposureParameters& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double gain = 1;
  inline bool has_gain() const;
  inline void clear_gain();
  static const int kGainFieldNumber = 1;
  inline double gain() const;
  inline void set_gain(double value);

  // optional double exposure = 2;
  inline bool has_exposure() const;
  inline void clear_exposure();
  static const int kExposureFieldNumber = 2;
  inline double exposure() const;
  inline void set_exposure(double value);

  // optional double min_gain_coeff = 3;
  inline bool has_min_gain_coeff() const;
  inline void clear_min_gain_coeff();
  static const int kMinGainCoeffFieldNumber = 3;
  inline double min_gain_coeff() const;
  inline void set_min_gain_coeff(double value);

  // optional double max_gain_coeff = 4;
  inline bool has_max_gain_coeff() const;
  inline void clear_max_gain_coeff();
  static const int kMaxGainCoeffFieldNumber = 4;
  inline double max_gain_coeff() const;
  inline void set_max_gain_coeff(double value);

  // optional double max_percent = 5;
  inline bool has_max_percent() const;
  inline void clear_max_percent();
  static const int kMaxPercentFieldNumber = 5;
  inline double max_percent() const;
  inline void set_max_percent(double value);

  // optional double min_rel_coef = 6;
  inline bool has_min_rel_coef() const;
  inline void clear_min_rel_coef();
  static const int kMinRelCoefFieldNumber = 6;
  inline double min_rel_coef() const;
  inline void set_min_rel_coef(double value);

  // optional double max_rel_coef = 7;
  inline bool has_max_rel_coef() const;
  inline void clear_max_rel_coef();
  static const int kMaxRelCoefFieldNumber = 7;
  inline double max_rel_coef() const;
  inline void set_max_rel_coef(double value);

  // optional double mean = 8;
  inline bool has_mean() const;
  inline void clear_mean();
  static const int kMeanFieldNumber = 8;
  inline double mean() const;
  inline void set_mean(double value);

  // @@protoc_insertion_point(class_scope:gt.internal.msg.AutoExposureParameters)
 private:
  inline void set_has_gain();
  inline void clear_has_gain();
  inline void set_has_exposure();
  inline void clear_has_exposure();
  inline void set_has_min_gain_coeff();
  inline void clear_has_min_gain_coeff();
  inline void set_has_max_gain_coeff();
  inline void clear_has_max_gain_coeff();
  inline void set_has_max_percent();
  inline void clear_has_max_percent();
  inline void set_has_min_rel_coef();
  inline void clear_has_min_rel_coef();
  inline void set_has_max_rel_coef();
  inline void clear_has_max_rel_coef();
  inline void set_has_mean();
  inline void clear_has_mean();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double gain_;
  double exposure_;
  double min_gain_coeff_;
  double max_gain_coeff_;
  double max_percent_;
  double min_rel_coef_;
  double max_rel_coef_;
  double mean_;
  friend void  protobuf_AddDesc_msg_2einternal_2eproto();
  friend void protobuf_AssignDesc_msg_2einternal_2eproto();
  friend void protobuf_ShutdownFile_msg_2einternal_2eproto();

  void InitAsDefaultInstance();
  static AutoExposureParameters* default_instance_;
};
// -------------------------------------------------------------------

class StreamCameraParameters : public ::google::protobuf::Message {
 public:
  StreamCameraParameters();
  virtual ~StreamCameraParameters();

  StreamCameraParameters(const StreamCameraParameters& from);

  inline StreamCameraParameters& operator=(const StreamCameraParameters& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamCameraParameters& default_instance();

  void Swap(StreamCameraParameters* other);

  // implements Message ----------------------------------------------

  StreamCameraParameters* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamCameraParameters& from);
  void MergeFrom(const StreamCameraParameters& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 raw_frame = 1;
  inline bool has_raw_frame() const;
  inline void clear_raw_frame();
  static const int kRawFrameFieldNumber = 1;
  inline ::google::protobuf::int32 raw_frame() const;
  inline void set_raw_frame(::google::protobuf::int32 value);

  // optional int32 send_frame_rate_main = 4;
  inline bool has_send_frame_rate_main() const;
  inline void clear_send_frame_rate_main();
  static const int kSendFrameRateMainFieldNumber = 4;
  inline ::google::protobuf::int32 send_frame_rate_main() const;
  inline void set_send_frame_rate_main(::google::protobuf::int32 value);

  // optional int32 send_frame_rate_add = 6;
  inline bool has_send_frame_rate_add() const;
  inline void clear_send_frame_rate_add();
  static const int kSendFrameRateAddFieldNumber = 6;
  inline ::google::protobuf::int32 send_frame_rate_add() const;
  inline void set_send_frame_rate_add(::google::protobuf::int32 value);

  // optional int32 port_send_stream_main = 8;
  inline bool has_port_send_stream_main() const;
  inline void clear_port_send_stream_main();
  static const int kPortSendStreamMainFieldNumber = 8;
  inline ::google::protobuf::int32 port_send_stream_main() const;
  inline void set_port_send_stream_main(::google::protobuf::int32 value);

  // optional int32 port_send_stream_add = 9;
  inline bool has_port_send_stream_add() const;
  inline void clear_port_send_stream_add();
  static const int kPortSendStreamAddFieldNumber = 9;
  inline ::google::protobuf::int32 port_send_stream_add() const;
  inline void set_port_send_stream_add(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gt.internal.msg.StreamCameraParameters)
 private:
  inline void set_has_raw_frame();
  inline void clear_has_raw_frame();
  inline void set_has_send_frame_rate_main();
  inline void clear_has_send_frame_rate_main();
  inline void set_has_send_frame_rate_add();
  inline void clear_has_send_frame_rate_add();
  inline void set_has_port_send_stream_main();
  inline void clear_has_port_send_stream_main();
  inline void set_has_port_send_stream_add();
  inline void clear_has_port_send_stream_add();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 raw_frame_;
  ::google::protobuf::int32 send_frame_rate_main_;
  ::google::protobuf::int32 send_frame_rate_add_;
  ::google::protobuf::int32 port_send_stream_main_;
  ::google::protobuf::int32 port_send_stream_add_;
  friend void  protobuf_AddDesc_msg_2einternal_2eproto();
  friend void protobuf_AssignDesc_msg_2einternal_2eproto();
  friend void protobuf_ShutdownFile_msg_2einternal_2eproto();

  void InitAsDefaultInstance();
  static StreamCameraParameters* default_instance_;
};
// -------------------------------------------------------------------

class StreamCameraCommand : public ::google::protobuf::Message {
 public:
  StreamCameraCommand();
  virtual ~StreamCameraCommand();

  StreamCameraCommand(const StreamCameraCommand& from);

  inline StreamCameraCommand& operator=(const StreamCameraCommand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamCameraCommand& default_instance();

  void Swap(StreamCameraCommand* other);

  // implements Message ----------------------------------------------

  StreamCameraCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamCameraCommand& from);
  void MergeFrom(const StreamCameraCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gt.internal.msg.StreamType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::gt::internal::msg::StreamType type() const;
  inline void set_type(::gt::internal::msg::StreamType value);

  // optional int32 video_duration = 2;
  inline bool has_video_duration() const;
  inline void clear_video_duration();
  static const int kVideoDurationFieldNumber = 2;
  inline ::google::protobuf::int32 video_duration() const;
  inline void set_video_duration(::google::protobuf::int32 value);

  // optional string desc = 3;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 3;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // optional bool stop = 4;
  inline bool has_stop() const;
  inline void clear_stop();
  static const int kStopFieldNumber = 4;
  inline bool stop() const;
  inline void set_stop(bool value);

  // @@protoc_insertion_point(class_scope:gt.internal.msg.StreamCameraCommand)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_video_duration();
  inline void clear_has_video_duration();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_stop();
  inline void clear_has_stop();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::int32 video_duration_;
  ::std::string* desc_;
  bool stop_;
  friend void  protobuf_AddDesc_msg_2einternal_2eproto();
  friend void protobuf_AssignDesc_msg_2einternal_2eproto();
  friend void protobuf_ShutdownFile_msg_2einternal_2eproto();

  void InitAsDefaultInstance();
  static StreamCameraCommand* default_instance_;
};
// -------------------------------------------------------------------

class CalibrationParameters : public ::google::protobuf::Message {
 public:
  CalibrationParameters();
  virtual ~CalibrationParameters();

  CalibrationParameters(const CalibrationParameters& from);

  inline CalibrationParameters& operator=(const CalibrationParameters& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CalibrationParameters& default_instance();

  void Swap(CalibrationParameters* other);

  // implements Message ----------------------------------------------

  CalibrationParameters* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CalibrationParameters& from);
  void MergeFrom(const CalibrationParameters& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gt.internal.msg.Point3 xyz = 1;
  inline bool has_xyz() const;
  inline void clear_xyz();
  static const int kXyzFieldNumber = 1;
  inline const ::gt::internal::msg::Point3& xyz() const;
  inline ::gt::internal::msg::Point3* mutable_xyz();
  inline ::gt::internal::msg::Point3* release_xyz();
  inline void set_allocated_xyz(::gt::internal::msg::Point3* xyz);

  // required .gt.internal.msg.Point3 angles = 2;
  inline bool has_angles() const;
  inline void clear_angles();
  static const int kAnglesFieldNumber = 2;
  inline const ::gt::internal::msg::Point3& angles() const;
  inline ::gt::internal::msg::Point3* mutable_angles();
  inline ::gt::internal::msg::Point3* release_angles();
  inline void set_allocated_angles(::gt::internal::msg::Point3* angles);

  // required double focus = 3;
  inline bool has_focus() const;
  inline void clear_focus();
  static const int kFocusFieldNumber = 3;
  inline double focus() const;
  inline void set_focus(double value);

  // required double samples = 4;
  inline bool has_samples() const;
  inline void clear_samples();
  static const int kSamplesFieldNumber = 4;
  inline double samples() const;
  inline void set_samples(double value);

  // required double lines = 5;
  inline bool has_lines() const;
  inline void clear_lines();
  static const int kLinesFieldNumber = 5;
  inline double lines() const;
  inline void set_lines(double value);

  // required double sample = 6;
  inline bool has_sample() const;
  inline void clear_sample();
  static const int kSampleFieldNumber = 6;
  inline double sample() const;
  inline void set_sample(double value);

  // required double line = 7;
  inline bool has_line() const;
  inline void clear_line();
  static const int kLineFieldNumber = 7;
  inline double line() const;
  inline void set_line(double value);

  // required double pixel_size = 8;
  inline bool has_pixel_size() const;
  inline void clear_pixel_size();
  static const int kPixelSizeFieldNumber = 8;
  inline double pixel_size() const;
  inline void set_pixel_size(double value);

  // required double k1 = 9;
  inline bool has_k1() const;
  inline void clear_k1();
  static const int kK1FieldNumber = 9;
  inline double k1() const;
  inline void set_k1(double value);

  // required double k2 = 10;
  inline bool has_k2() const;
  inline void clear_k2();
  static const int kK2FieldNumber = 10;
  inline double k2() const;
  inline void set_k2(double value);

  // required double k3 = 11;
  inline bool has_k3() const;
  inline void clear_k3();
  static const int kK3FieldNumber = 11;
  inline double k3() const;
  inline void set_k3(double value);

  // required double p1 = 12;
  inline bool has_p1() const;
  inline void clear_p1();
  static const int kP1FieldNumber = 12;
  inline double p1() const;
  inline void set_p1(double value);

  // required double p2 = 13;
  inline bool has_p2() const;
  inline void clear_p2();
  static const int kP2FieldNumber = 13;
  inline double p2() const;
  inline void set_p2(double value);

  // required double b1 = 14;
  inline bool has_b1() const;
  inline void clear_b1();
  static const int kB1FieldNumber = 14;
  inline double b1() const;
  inline void set_b1(double value);

  // required double b2 = 15;
  inline bool has_b2() const;
  inline void clear_b2();
  static const int kB2FieldNumber = 15;
  inline double b2() const;
  inline void set_b2(double value);

  // @@protoc_insertion_point(class_scope:gt.internal.msg.CalibrationParameters)
 private:
  inline void set_has_xyz();
  inline void clear_has_xyz();
  inline void set_has_angles();
  inline void clear_has_angles();
  inline void set_has_focus();
  inline void clear_has_focus();
  inline void set_has_samples();
  inline void clear_has_samples();
  inline void set_has_lines();
  inline void clear_has_lines();
  inline void set_has_sample();
  inline void clear_has_sample();
  inline void set_has_line();
  inline void clear_has_line();
  inline void set_has_pixel_size();
  inline void clear_has_pixel_size();
  inline void set_has_k1();
  inline void clear_has_k1();
  inline void set_has_k2();
  inline void clear_has_k2();
  inline void set_has_k3();
  inline void clear_has_k3();
  inline void set_has_p1();
  inline void clear_has_p1();
  inline void set_has_p2();
  inline void clear_has_p2();
  inline void set_has_b1();
  inline void clear_has_b1();
  inline void set_has_b2();
  inline void clear_has_b2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gt::internal::msg::Point3* xyz_;
  ::gt::internal::msg::Point3* angles_;
  double focus_;
  double samples_;
  double lines_;
  double sample_;
  double line_;
  double pixel_size_;
  double k1_;
  double k2_;
  double k3_;
  double p1_;
  double p2_;
  double b1_;
  double b2_;
  friend void  protobuf_AddDesc_msg_2einternal_2eproto();
  friend void protobuf_AssignDesc_msg_2einternal_2eproto();
  friend void protobuf_ShutdownFile_msg_2einternal_2eproto();

  void InitAsDefaultInstance();
  static CalibrationParameters* default_instance_;
};
// -------------------------------------------------------------------

class BallMeasure : public ::google::protobuf::Message {
 public:
  BallMeasure();
  virtual ~BallMeasure();

  BallMeasure(const BallMeasure& from);

  inline BallMeasure& operator=(const BallMeasure& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BallMeasure& default_instance();

  void Swap(BallMeasure* other);

  // implements Message ----------------------------------------------

  BallMeasure* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BallMeasure& from);
  void MergeFrom(const BallMeasure& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gt.internal.msg.Point2 xy = 1;
  inline bool has_xy() const;
  inline void clear_xy();
  static const int kXyFieldNumber = 1;
  inline const ::gt::internal::msg::Point2& xy() const;
  inline ::gt::internal::msg::Point2* mutable_xy();
  inline ::gt::internal::msg::Point2* release_xy();
  inline void set_allocated_xy(::gt::internal::msg::Point2* xy);

  // required bool valid = 2;
  inline bool has_valid() const;
  inline void clear_valid();
  static const int kValidFieldNumber = 2;
  inline bool valid() const;
  inline void set_valid(bool value);

  // required int64 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // required .gt.internal.msg.BallEvent event = 4;
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 4;
  inline ::gt::internal::msg::BallEvent event() const;
  inline void set_event(::gt::internal::msg::BallEvent value);

  // required bool is_rebound = 5;
  inline bool has_is_rebound() const;
  inline void clear_is_rebound();
  static const int kIsReboundFieldNumber = 5;
  inline bool is_rebound() const;
  inline void set_is_rebound(bool value);

  // required bool is_from_out_of_frame = 6;
  inline bool has_is_from_out_of_frame() const;
  inline void clear_is_from_out_of_frame();
  static const int kIsFromOutOfFrameFieldNumber = 6;
  inline bool is_from_out_of_frame() const;
  inline void set_is_from_out_of_frame(bool value);

  // required bool is_lost_out_of_frame = 7;
  inline bool has_is_lost_out_of_frame() const;
  inline void clear_is_lost_out_of_frame();
  static const int kIsLostOutOfFrameFieldNumber = 7;
  inline bool is_lost_out_of_frame() const;
  inline void set_is_lost_out_of_frame(bool value);

  // required bool is_high_ball = 8;
  inline bool has_is_high_ball() const;
  inline void clear_is_high_ball();
  static const int kIsHighBallFieldNumber = 8;
  inline bool is_high_ball() const;
  inline void set_is_high_ball(bool value);

  // required bool is_ped_intersect = 9;
  inline bool has_is_ped_intersect() const;
  inline void clear_is_ped_intersect();
  static const int kIsPedIntersectFieldNumber = 9;
  inline bool is_ped_intersect() const;
  inline void set_is_ped_intersect(bool value);

  // @@protoc_insertion_point(class_scope:gt.internal.msg.BallMeasure)
 private:
  inline void set_has_xy();
  inline void clear_has_xy();
  inline void set_has_valid();
  inline void clear_has_valid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_event();
  inline void clear_has_event();
  inline void set_has_is_rebound();
  inline void clear_has_is_rebound();
  inline void set_has_is_from_out_of_frame();
  inline void clear_has_is_from_out_of_frame();
  inline void set_has_is_lost_out_of_frame();
  inline void clear_has_is_lost_out_of_frame();
  inline void set_has_is_high_ball();
  inline void clear_has_is_high_ball();
  inline void set_has_is_ped_intersect();
  inline void clear_has_is_ped_intersect();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gt::internal::msg::Point2* xy_;
  ::google::protobuf::int64 time_;
  int event_;
  bool valid_;
  bool is_rebound_;
  bool is_from_out_of_frame_;
  bool is_lost_out_of_frame_;
  bool is_high_ball_;
  bool is_ped_intersect_;
  friend void  protobuf_AddDesc_msg_2einternal_2eproto();
  friend void protobuf_AssignDesc_msg_2einternal_2eproto();
  friend void protobuf_ShutdownFile_msg_2einternal_2eproto();

  void InitAsDefaultInstance();
  static BallMeasure* default_instance_;
};
// -------------------------------------------------------------------

class BatMeasure : public ::google::protobuf::Message {
 public:
  BatMeasure();
  virtual ~BatMeasure();

  BatMeasure(const BatMeasure& from);

  inline BatMeasure& operator=(const BatMeasure& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatMeasure& default_instance();

  void Swap(BatMeasure* other);

  // implements Message ----------------------------------------------

  BatMeasure* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BatMeasure& from);
  void MergeFrom(const BatMeasure& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool was_swing = 1;
  inline bool has_was_swing() const;
  inline void clear_was_swing();
  static const int kWasSwingFieldNumber = 1;
  inline bool was_swing() const;
  inline void set_was_swing(bool value);

  // repeated .gt.internal.msg.Point2 measures = 2;
  inline int measures_size() const;
  inline void clear_measures();
  static const int kMeasuresFieldNumber = 2;
  inline const ::gt::internal::msg::Point2& measures(int index) const;
  inline ::gt::internal::msg::Point2* mutable_measures(int index);
  inline ::gt::internal::msg::Point2* add_measures();
  inline const ::google::protobuf::RepeatedPtrField< ::gt::internal::msg::Point2 >&
      measures() const;
  inline ::google::protobuf::RepeatedPtrField< ::gt::internal::msg::Point2 >*
      mutable_measures();

  // repeated .gt.internal.msg.Rect bboxes = 3;
  inline int bboxes_size() const;
  inline void clear_bboxes();
  static const int kBboxesFieldNumber = 3;
  inline const ::gt::internal::msg::Rect& bboxes(int index) const;
  inline ::gt::internal::msg::Rect* mutable_bboxes(int index);
  inline ::gt::internal::msg::Rect* add_bboxes();
  inline const ::google::protobuf::RepeatedPtrField< ::gt::internal::msg::Rect >&
      bboxes() const;
  inline ::google::protobuf::RepeatedPtrField< ::gt::internal::msg::Rect >*
      mutable_bboxes();

  // @@protoc_insertion_point(class_scope:gt.internal.msg.BatMeasure)
 private:
  inline void set_has_was_swing();
  inline void clear_has_was_swing();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::gt::internal::msg::Point2 > measures_;
  ::google::protobuf::RepeatedPtrField< ::gt::internal::msg::Rect > bboxes_;
  bool was_swing_;
  friend void  protobuf_AddDesc_msg_2einternal_2eproto();
  friend void protobuf_AssignDesc_msg_2einternal_2eproto();
  friend void protobuf_ShutdownFile_msg_2einternal_2eproto();

  void InitAsDefaultInstance();
  static BatMeasure* default_instance_;
};
// -------------------------------------------------------------------

class OutOfFrameInfo : public ::google::protobuf::Message {
 public:
  OutOfFrameInfo();
  virtual ~OutOfFrameInfo();

  OutOfFrameInfo(const OutOfFrameInfo& from);

  inline OutOfFrameInfo& operator=(const OutOfFrameInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OutOfFrameInfo& default_instance();

  void Swap(OutOfFrameInfo* other);

  // implements Message ----------------------------------------------

  OutOfFrameInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OutOfFrameInfo& from);
  void MergeFrom(const OutOfFrameInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gt.internal.msg.OutOfFrame dir = 1;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 1;
  inline ::gt::internal::msg::OutOfFrame dir() const;
  inline void set_dir(::gt::internal::msg::OutOfFrame value);

  // optional .gt.internal.msg.BallMeasure ball_measure = 2;
  inline bool has_ball_measure() const;
  inline void clear_ball_measure();
  static const int kBallMeasureFieldNumber = 2;
  inline const ::gt::internal::msg::BallMeasure& ball_measure() const;
  inline ::gt::internal::msg::BallMeasure* mutable_ball_measure();
  inline ::gt::internal::msg::BallMeasure* release_ball_measure();
  inline void set_allocated_ball_measure(::gt::internal::msg::BallMeasure* ball_measure);

  // optional .gt.internal.msg.PedestrianMeasure ped_measure = 3;
  inline bool has_ped_measure() const;
  inline void clear_ped_measure();
  static const int kPedMeasureFieldNumber = 3;
  inline const ::gt::internal::msg::PedestrianMeasure& ped_measure() const;
  inline ::gt::internal::msg::PedestrianMeasure* mutable_ped_measure();
  inline ::gt::internal::msg::PedestrianMeasure* release_ped_measure();
  inline void set_allocated_ped_measure(::gt::internal::msg::PedestrianMeasure* ped_measure);

  // @@protoc_insertion_point(class_scope:gt.internal.msg.OutOfFrameInfo)
 private:
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_ball_measure();
  inline void clear_has_ball_measure();
  inline void set_has_ped_measure();
  inline void clear_has_ped_measure();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gt::internal::msg::BallMeasure* ball_measure_;
  ::gt::internal::msg::PedestrianMeasure* ped_measure_;
  int dir_;
  friend void  protobuf_AddDesc_msg_2einternal_2eproto();
  friend void protobuf_AssignDesc_msg_2einternal_2eproto();
  friend void protobuf_ShutdownFile_msg_2einternal_2eproto();

  void InitAsDefaultInstance();
  static OutOfFrameInfo* default_instance_;
};
// -------------------------------------------------------------------

class RecognizeData : public ::google::protobuf::Message {
 public:
  RecognizeData();
  virtual ~RecognizeData();

  RecognizeData(const RecognizeData& from);

  inline RecognizeData& operator=(const RecognizeData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecognizeData& default_instance();

  void Swap(RecognizeData* other);

  // implements Message ----------------------------------------------

  RecognizeData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecognizeData& from);
  void MergeFrom(const RecognizeData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gt.internal.msg.BallMeasure data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::gt::internal::msg::BallMeasure& data(int index) const;
  inline ::gt::internal::msg::BallMeasure* mutable_data(int index);
  inline ::gt::internal::msg::BallMeasure* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::gt::internal::msg::BallMeasure >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::gt::internal::msg::BallMeasure >*
      mutable_data();

  // optional int64 start_time = 2;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 2;
  inline ::google::protobuf::int64 start_time() const;
  inline void set_start_time(::google::protobuf::int64 value);

  // optional bool restored_out_of_frame = 3;
  inline bool has_restored_out_of_frame() const;
  inline void clear_restored_out_of_frame();
  static const int kRestoredOutOfFrameFieldNumber = 3;
  inline bool restored_out_of_frame() const;
  inline void set_restored_out_of_frame(bool value);

  // optional bool restored_straight = 4;
  inline bool has_restored_straight() const;
  inline void clear_restored_straight();
  static const int kRestoredStraightFieldNumber = 4;
  inline bool restored_straight() const;
  inline void set_restored_straight(bool value);

  // @@protoc_insertion_point(class_scope:gt.internal.msg.RecognizeData)
 private:
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_restored_out_of_frame();
  inline void clear_has_restored_out_of_frame();
  inline void set_has_restored_straight();
  inline void clear_has_restored_straight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::gt::internal::msg::BallMeasure > data_;
  ::google::protobuf::int64 start_time_;
  bool restored_out_of_frame_;
  bool restored_straight_;
  friend void  protobuf_AddDesc_msg_2einternal_2eproto();
  friend void protobuf_AssignDesc_msg_2einternal_2eproto();
  friend void protobuf_ShutdownFile_msg_2einternal_2eproto();

  void InitAsDefaultInstance();
  static RecognizeData* default_instance_;
};
// -------------------------------------------------------------------

class PedestrianMeasure : public ::google::protobuf::Message {
 public:
  PedestrianMeasure();
  virtual ~PedestrianMeasure();

  PedestrianMeasure(const PedestrianMeasure& from);

  inline PedestrianMeasure& operator=(const PedestrianMeasure& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PedestrianMeasure& default_instance();

  void Swap(PedestrianMeasure* other);

  // implements Message ----------------------------------------------

  PedestrianMeasure* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PedestrianMeasure& from);
  void MergeFrom(const PedestrianMeasure& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gt.internal.msg.Rect r = 1;
  inline bool has_r() const;
  inline void clear_r();
  static const int kRFieldNumber = 1;
  inline const ::gt::internal::msg::Rect& r() const;
  inline ::gt::internal::msg::Rect* mutable_r();
  inline ::gt::internal::msg::Rect* release_r();
  inline void set_allocated_r(::gt::internal::msg::Rect* r);

  // required .gt.internal.msg.Point3 p = 2;
  inline bool has_p() const;
  inline void clear_p();
  static const int kPFieldNumber = 2;
  inline const ::gt::internal::msg::Point3& p() const;
  inline ::gt::internal::msg::Point3* mutable_p();
  inline ::gt::internal::msg::Point3* release_p();
  inline void set_allocated_p(::gt::internal::msg::Point3* p);

  // required .gt.internal.msg.PlayerPosition pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline ::gt::internal::msg::PlayerPosition pos() const;
  inline void set_pos(::gt::internal::msg::PlayerPosition value);

  // @@protoc_insertion_point(class_scope:gt.internal.msg.PedestrianMeasure)
 private:
  inline void set_has_r();
  inline void clear_has_r();
  inline void set_has_p();
  inline void clear_has_p();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gt::internal::msg::Rect* r_;
  ::gt::internal::msg::Point3* p_;
  int pos_;
  friend void  protobuf_AddDesc_msg_2einternal_2eproto();
  friend void protobuf_AssignDesc_msg_2einternal_2eproto();
  friend void protobuf_ShutdownFile_msg_2einternal_2eproto();

  void InitAsDefaultInstance();
  static PedestrianMeasure* default_instance_;
};
// -------------------------------------------------------------------

class CameraOptions : public ::google::protobuf::Message {
 public:
  CameraOptions();
  virtual ~CameraOptions();

  CameraOptions(const CameraOptions& from);

  inline CameraOptions& operator=(const CameraOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraOptions& default_instance();

  void Swap(CameraOptions* other);

  // implements Message ----------------------------------------------

  CameraOptions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CameraOptions& from);
  void MergeFrom(const CameraOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gt.internal.msg.HardwareCameraParameters hw_params = 1;
  inline bool has_hw_params() const;
  inline void clear_hw_params();
  static const int kHwParamsFieldNumber = 1;
  inline const ::gt::internal::msg::HardwareCameraParameters& hw_params() const;
  inline ::gt::internal::msg::HardwareCameraParameters* mutable_hw_params();
  inline ::gt::internal::msg::HardwareCameraParameters* release_hw_params();
  inline void set_allocated_hw_params(::gt::internal::msg::HardwareCameraParameters* hw_params);

  // optional .gt.internal.msg.PictureCameraParameters p_params = 2;
  inline bool has_p_params() const;
  inline void clear_p_params();
  static const int kPParamsFieldNumber = 2;
  inline const ::gt::internal::msg::PictureCameraParameters& p_params() const;
  inline ::gt::internal::msg::PictureCameraParameters* mutable_p_params();
  inline ::gt::internal::msg::PictureCameraParameters* release_p_params();
  inline void set_allocated_p_params(::gt::internal::msg::PictureCameraParameters* p_params);

  // optional .gt.internal.msg.AutoExposureParameters auto_exp_params = 3;
  inline bool has_auto_exp_params() const;
  inline void clear_auto_exp_params();
  static const int kAutoExpParamsFieldNumber = 3;
  inline const ::gt::internal::msg::AutoExposureParameters& auto_exp_params() const;
  inline ::gt::internal::msg::AutoExposureParameters* mutable_auto_exp_params();
  inline ::gt::internal::msg::AutoExposureParameters* release_auto_exp_params();
  inline void set_allocated_auto_exp_params(::gt::internal::msg::AutoExposureParameters* auto_exp_params);

  // optional .gt.internal.msg.CalibrationParameters calib_params = 4;
  inline bool has_calib_params() const;
  inline void clear_calib_params();
  static const int kCalibParamsFieldNumber = 4;
  inline const ::gt::internal::msg::CalibrationParameters& calib_params() const;
  inline ::gt::internal::msg::CalibrationParameters* mutable_calib_params();
  inline ::gt::internal::msg::CalibrationParameters* release_calib_params();
  inline void set_allocated_calib_params(::gt::internal::msg::CalibrationParameters* calib_params);

  // optional .gt.internal.msg.RecROIs rec_rois = 5;
  inline bool has_rec_rois() const;
  inline void clear_rec_rois();
  static const int kRecRoisFieldNumber = 5;
  inline const ::gt::internal::msg::RecROIs& rec_rois() const;
  inline ::gt::internal::msg::RecROIs* mutable_rec_rois();
  inline ::gt::internal::msg::RecROIs* release_rec_rois();
  inline void set_allocated_rec_rois(::gt::internal::msg::RecROIs* rec_rois);

  // optional bool ball_recognize_enable = 6;
  inline bool has_ball_recognize_enable() const;
  inline void clear_ball_recognize_enable();
  static const int kBallRecognizeEnableFieldNumber = 6;
  inline bool ball_recognize_enable() const;
  inline void set_ball_recognize_enable(bool value);

  // optional bool debug_enable = 7;
  inline bool has_debug_enable() const;
  inline void clear_debug_enable();
  static const int kDebugEnableFieldNumber = 7;
  inline bool debug_enable() const;
  inline void set_debug_enable(bool value);

  // optional .gt.internal.msg.RecognizeParameters rec_params = 8;
  inline bool has_rec_params() const;
  inline void clear_rec_params();
  static const int kRecParamsFieldNumber = 8;
  inline const ::gt::internal::msg::RecognizeParameters& rec_params() const;
  inline ::gt::internal::msg::RecognizeParameters* mutable_rec_params();
  inline ::gt::internal::msg::RecognizeParameters* release_rec_params();
  inline void set_allocated_rec_params(::gt::internal::msg::RecognizeParameters* rec_params);

  // optional string desc = 9;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 9;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // optional .gt.internal.msg.CameraType cam_type = 10;
  inline bool has_cam_type() const;
  inline void clear_cam_type();
  static const int kCamTypeFieldNumber = 10;
  inline ::gt::internal::msg::CameraType cam_type() const;
  inline void set_cam_type(::gt::internal::msg::CameraType value);

  // required string id = 11;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 11;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional bool save_parameters = 12;
  inline bool has_save_parameters() const;
  inline void clear_save_parameters();
  static const int kSaveParametersFieldNumber = 12;
  inline bool save_parameters() const;
  inline void set_save_parameters(bool value);

  // optional .gt.internal.msg.StreamCameraParameters stream_params = 13;
  inline bool has_stream_params() const;
  inline void clear_stream_params();
  static const int kStreamParamsFieldNumber = 13;
  inline const ::gt::internal::msg::StreamCameraParameters& stream_params() const;
  inline ::gt::internal::msg::StreamCameraParameters* mutable_stream_params();
  inline ::gt::internal::msg::StreamCameraParameters* release_stream_params();
  inline void set_allocated_stream_params(::gt::internal::msg::StreamCameraParameters* stream_params);

  // optional bool auto_exposure_enable = 14;
  inline bool has_auto_exposure_enable() const;
  inline void clear_auto_exposure_enable();
  static const int kAutoExposureEnableFieldNumber = 14;
  inline bool auto_exposure_enable() const;
  inline void set_auto_exposure_enable(bool value);

  // required bool main_add_mode = 15;
  inline bool has_main_add_mode() const;
  inline void clear_main_add_mode();
  static const int kMainAddModeFieldNumber = 15;
  inline bool main_add_mode() const;
  inline void set_main_add_mode(bool value);

  // optional int32 main_each = 16;
  inline bool has_main_each() const;
  inline void clear_main_each();
  static const int kMainEachFieldNumber = 16;
  inline ::google::protobuf::int32 main_each() const;
  inline void set_main_each(::google::protobuf::int32 value);

  // optional bool debug_mode = 17;
  inline bool has_debug_mode() const;
  inline void clear_debug_mode();
  static const int kDebugModeFieldNumber = 17;
  inline bool debug_mode() const;
  inline void set_debug_mode(bool value);

  // @@protoc_insertion_point(class_scope:gt.internal.msg.CameraOptions)
 private:
  inline void set_has_hw_params();
  inline void clear_has_hw_params();
  inline void set_has_p_params();
  inline void clear_has_p_params();
  inline void set_has_auto_exp_params();
  inline void clear_has_auto_exp_params();
  inline void set_has_calib_params();
  inline void clear_has_calib_params();
  inline void set_has_rec_rois();
  inline void clear_has_rec_rois();
  inline void set_has_ball_recognize_enable();
  inline void clear_has_ball_recognize_enable();
  inline void set_has_debug_enable();
  inline void clear_has_debug_enable();
  inline void set_has_rec_params();
  inline void clear_has_rec_params();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_cam_type();
  inline void clear_has_cam_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_save_parameters();
  inline void clear_has_save_parameters();
  inline void set_has_stream_params();
  inline void clear_has_stream_params();
  inline void set_has_auto_exposure_enable();
  inline void clear_has_auto_exposure_enable();
  inline void set_has_main_add_mode();
  inline void clear_has_main_add_mode();
  inline void set_has_main_each();
  inline void clear_has_main_each();
  inline void set_has_debug_mode();
  inline void clear_has_debug_mode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gt::internal::msg::HardwareCameraParameters* hw_params_;
  ::gt::internal::msg::PictureCameraParameters* p_params_;
  ::gt::internal::msg::AutoExposureParameters* auto_exp_params_;
  ::gt::internal::msg::CalibrationParameters* calib_params_;
  ::gt::internal::msg::RecROIs* rec_rois_;
  ::gt::internal::msg::RecognizeParameters* rec_params_;
  ::std::string* desc_;
  bool ball_recognize_enable_;
  bool debug_enable_;
  bool save_parameters_;
  bool auto_exposure_enable_;
  int cam_type_;
  ::std::string* id_;
  ::gt::internal::msg::StreamCameraParameters* stream_params_;
  ::google::protobuf::int32 main_each_;
  bool main_add_mode_;
  bool debug_mode_;
  friend void  protobuf_AddDesc_msg_2einternal_2eproto();
  friend void protobuf_AssignDesc_msg_2einternal_2eproto();
  friend void protobuf_ShutdownFile_msg_2einternal_2eproto();

  void InitAsDefaultInstance();
  static CameraOptions* default_instance_;
};
// -------------------------------------------------------------------

class ServerOptions : public ::google::protobuf::Message {
 public:
  ServerOptions();
  virtual ~ServerOptions();

  ServerOptions(const ServerOptions& from);

  inline ServerOptions& operator=(const ServerOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerOptions& default_instance();

  void Swap(ServerOptions* other);

  // implements Message ----------------------------------------------

  ServerOptions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerOptions& from);
  void MergeFrom(const ServerOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool write_to_disk = 1;
  inline bool has_write_to_disk() const;
  inline void clear_write_to_disk();
  static const int kWriteToDiskFieldNumber = 1;
  inline bool write_to_disk() const;
  inline void set_write_to_disk(bool value);

  // optional bool write_uncompressed = 2;
  inline bool has_write_uncompressed() const;
  inline void clear_write_uncompressed();
  static const int kWriteUncompressedFieldNumber = 2;
  inline bool write_uncompressed() const;
  inline void set_write_uncompressed(bool value);

  // @@protoc_insertion_point(class_scope:gt.internal.msg.ServerOptions)
 private:
  inline void set_has_write_to_disk();
  inline void clear_has_write_to_disk();
  inline void set_has_write_uncompressed();
  inline void clear_has_write_uncompressed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool write_to_disk_;
  bool write_uncompressed_;
  friend void  protobuf_AddDesc_msg_2einternal_2eproto();
  friend void protobuf_AssignDesc_msg_2einternal_2eproto();
  friend void protobuf_ShutdownFile_msg_2einternal_2eproto();

  void InitAsDefaultInstance();
  static ServerOptions* default_instance_;
};
// -------------------------------------------------------------------

class FrameTime : public ::google::protobuf::Message {
 public:
  FrameTime();
  virtual ~FrameTime();

  FrameTime(const FrameTime& from);

  inline FrameTime& operator=(const FrameTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameTime& default_instance();

  void Swap(FrameTime* other);

  // implements Message ----------------------------------------------

  FrameTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FrameTime& from);
  void MergeFrom(const FrameTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 computer_time = 1;
  inline bool has_computer_time() const;
  inline void clear_computer_time();
  static const int kComputerTimeFieldNumber = 1;
  inline ::google::protobuf::int64 computer_time() const;
  inline void set_computer_time(::google::protobuf::int64 value);

  // optional int64 camera_time = 2;
  inline bool has_camera_time() const;
  inline void clear_camera_time();
  static const int kCameraTimeFieldNumber = 2;
  inline ::google::protobuf::int64 camera_time() const;
  inline void set_camera_time(::google::protobuf::int64 value);

  // optional bytes frame = 3;
  inline bool has_frame() const;
  inline void clear_frame();
  static const int kFrameFieldNumber = 3;
  inline const ::std::string& frame() const;
  inline void set_frame(const ::std::string& value);
  inline void set_frame(const char* value);
  inline void set_frame(const void* value, size_t size);
  inline ::std::string* mutable_frame();
  inline ::std::string* release_frame();
  inline void set_allocated_frame(::std::string* frame);

  // @@protoc_insertion_point(class_scope:gt.internal.msg.FrameTime)
 private:
  inline void set_has_computer_time();
  inline void clear_has_computer_time();
  inline void set_has_camera_time();
  inline void clear_has_camera_time();
  inline void set_has_frame();
  inline void clear_has_frame();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 computer_time_;
  ::google::protobuf::int64 camera_time_;
  ::std::string* frame_;
  friend void  protobuf_AddDesc_msg_2einternal_2eproto();
  friend void protobuf_AssignDesc_msg_2einternal_2eproto();
  friend void protobuf_ShutdownFile_msg_2einternal_2eproto();

  void InitAsDefaultInstance();
  static FrameTime* default_instance_;
};
// -------------------------------------------------------------------

class DebugInfo : public ::google::protobuf::Message {
 public:
  DebugInfo();
  virtual ~DebugInfo();

  DebugInfo(const DebugInfo& from);

  inline DebugInfo& operator=(const DebugInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugInfo& default_instance();

  void Swap(DebugInfo* other);

  // implements Message ----------------------------------------------

  DebugInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DebugInfo& from);
  void MergeFrom(const DebugInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional int32 skipDebugFrames = 2;
  inline bool has_skipdebugframes() const;
  inline void clear_skipdebugframes();
  static const int kSkipDebugFramesFieldNumber = 2;
  inline ::google::protobuf::int32 skipdebugframes() const;
  inline void set_skipdebugframes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gt.internal.msg.DebugInfo)
 private:
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_skipdebugframes();
  inline void clear_has_skipdebugframes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* message_;
  ::google::protobuf::int32 skipdebugframes_;
  friend void  protobuf_AddDesc_msg_2einternal_2eproto();
  friend void protobuf_AssignDesc_msg_2einternal_2eproto();
  friend void protobuf_ShutdownFile_msg_2einternal_2eproto();

  void InitAsDefaultInstance();
  static DebugInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// Point2

// required double x = 1;
inline bool Point2::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point2::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point2::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point2::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Point2::x() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.Point2.x)
  return x_;
}
inline void Point2::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.Point2.x)
}

// required double y = 2;
inline bool Point2::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point2::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point2::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point2::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Point2::y() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.Point2.y)
  return y_;
}
inline void Point2::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.Point2.y)
}

// -------------------------------------------------------------------

// Point3

// required double x = 1;
inline bool Point3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point3::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Point3::x() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.Point3.x)
  return x_;
}
inline void Point3::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.Point3.x)
}

// required double y = 2;
inline bool Point3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point3::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Point3::y() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.Point3.y)
  return y_;
}
inline void Point3::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.Point3.y)
}

// required double z = 3;
inline bool Point3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Point3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Point3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Point3::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Point3::z() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.Point3.z)
  return z_;
}
inline void Point3::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.Point3.z)
}

// -------------------------------------------------------------------

// Rect

// required .gt.internal.msg.Point2 xy = 1;
inline bool Rect::has_xy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rect::set_has_xy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Rect::clear_has_xy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Rect::clear_xy() {
  if (xy_ != NULL) xy_->::gt::internal::msg::Point2::Clear();
  clear_has_xy();
}
inline const ::gt::internal::msg::Point2& Rect::xy() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.Rect.xy)
  return xy_ != NULL ? *xy_ : *default_instance_->xy_;
}
inline ::gt::internal::msg::Point2* Rect::mutable_xy() {
  set_has_xy();
  if (xy_ == NULL) xy_ = new ::gt::internal::msg::Point2;
  // @@protoc_insertion_point(field_mutable:gt.internal.msg.Rect.xy)
  return xy_;
}
inline ::gt::internal::msg::Point2* Rect::release_xy() {
  clear_has_xy();
  ::gt::internal::msg::Point2* temp = xy_;
  xy_ = NULL;
  return temp;
}
inline void Rect::set_allocated_xy(::gt::internal::msg::Point2* xy) {
  delete xy_;
  xy_ = xy;
  if (xy) {
    set_has_xy();
  } else {
    clear_has_xy();
  }
  // @@protoc_insertion_point(field_set_allocated:gt.internal.msg.Rect.xy)
}

// required .gt.internal.msg.Point2 wh = 2;
inline bool Rect::has_wh() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Rect::set_has_wh() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Rect::clear_has_wh() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Rect::clear_wh() {
  if (wh_ != NULL) wh_->::gt::internal::msg::Point2::Clear();
  clear_has_wh();
}
inline const ::gt::internal::msg::Point2& Rect::wh() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.Rect.wh)
  return wh_ != NULL ? *wh_ : *default_instance_->wh_;
}
inline ::gt::internal::msg::Point2* Rect::mutable_wh() {
  set_has_wh();
  if (wh_ == NULL) wh_ = new ::gt::internal::msg::Point2;
  // @@protoc_insertion_point(field_mutable:gt.internal.msg.Rect.wh)
  return wh_;
}
inline ::gt::internal::msg::Point2* Rect::release_wh() {
  clear_has_wh();
  ::gt::internal::msg::Point2* temp = wh_;
  wh_ = NULL;
  return temp;
}
inline void Rect::set_allocated_wh(::gt::internal::msg::Point2* wh) {
  delete wh_;
  wh_ = wh;
  if (wh) {
    set_has_wh();
  } else {
    clear_has_wh();
  }
  // @@protoc_insertion_point(field_set_allocated:gt.internal.msg.Rect.wh)
}

// -------------------------------------------------------------------

// RecROIs

// optional .gt.internal.msg.Rect throw_search_rect = 1;
inline bool RecROIs::has_throw_search_rect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecROIs::set_has_throw_search_rect() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecROIs::clear_has_throw_search_rect() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecROIs::clear_throw_search_rect() {
  if (throw_search_rect_ != NULL) throw_search_rect_->::gt::internal::msg::Rect::Clear();
  clear_has_throw_search_rect();
}
inline const ::gt::internal::msg::Rect& RecROIs::throw_search_rect() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.RecROIs.throw_search_rect)
  return throw_search_rect_ != NULL ? *throw_search_rect_ : *default_instance_->throw_search_rect_;
}
inline ::gt::internal::msg::Rect* RecROIs::mutable_throw_search_rect() {
  set_has_throw_search_rect();
  if (throw_search_rect_ == NULL) throw_search_rect_ = new ::gt::internal::msg::Rect;
  // @@protoc_insertion_point(field_mutable:gt.internal.msg.RecROIs.throw_search_rect)
  return throw_search_rect_;
}
inline ::gt::internal::msg::Rect* RecROIs::release_throw_search_rect() {
  clear_has_throw_search_rect();
  ::gt::internal::msg::Rect* temp = throw_search_rect_;
  throw_search_rect_ = NULL;
  return temp;
}
inline void RecROIs::set_allocated_throw_search_rect(::gt::internal::msg::Rect* throw_search_rect) {
  delete throw_search_rect_;
  throw_search_rect_ = throw_search_rect;
  if (throw_search_rect) {
    set_has_throw_search_rect();
  } else {
    clear_has_throw_search_rect();
  }
  // @@protoc_insertion_point(field_set_allocated:gt.internal.msg.RecROIs.throw_search_rect)
}

// optional .gt.internal.msg.Rect throw_track_rect = 2;
inline bool RecROIs::has_throw_track_rect() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecROIs::set_has_throw_track_rect() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecROIs::clear_has_throw_track_rect() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecROIs::clear_throw_track_rect() {
  if (throw_track_rect_ != NULL) throw_track_rect_->::gt::internal::msg::Rect::Clear();
  clear_has_throw_track_rect();
}
inline const ::gt::internal::msg::Rect& RecROIs::throw_track_rect() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.RecROIs.throw_track_rect)
  return throw_track_rect_ != NULL ? *throw_track_rect_ : *default_instance_->throw_track_rect_;
}
inline ::gt::internal::msg::Rect* RecROIs::mutable_throw_track_rect() {
  set_has_throw_track_rect();
  if (throw_track_rect_ == NULL) throw_track_rect_ = new ::gt::internal::msg::Rect;
  // @@protoc_insertion_point(field_mutable:gt.internal.msg.RecROIs.throw_track_rect)
  return throw_track_rect_;
}
inline ::gt::internal::msg::Rect* RecROIs::release_throw_track_rect() {
  clear_has_throw_track_rect();
  ::gt::internal::msg::Rect* temp = throw_track_rect_;
  throw_track_rect_ = NULL;
  return temp;
}
inline void RecROIs::set_allocated_throw_track_rect(::gt::internal::msg::Rect* throw_track_rect) {
  delete throw_track_rect_;
  throw_track_rect_ = throw_track_rect;
  if (throw_track_rect) {
    set_has_throw_track_rect();
  } else {
    clear_has_throw_track_rect();
  }
  // @@protoc_insertion_point(field_set_allocated:gt.internal.msg.RecROIs.throw_track_rect)
}

// optional .gt.internal.msg.Rect hit_search_rect = 3;
inline bool RecROIs::has_hit_search_rect() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecROIs::set_has_hit_search_rect() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecROIs::clear_has_hit_search_rect() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecROIs::clear_hit_search_rect() {
  if (hit_search_rect_ != NULL) hit_search_rect_->::gt::internal::msg::Rect::Clear();
  clear_has_hit_search_rect();
}
inline const ::gt::internal::msg::Rect& RecROIs::hit_search_rect() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.RecROIs.hit_search_rect)
  return hit_search_rect_ != NULL ? *hit_search_rect_ : *default_instance_->hit_search_rect_;
}
inline ::gt::internal::msg::Rect* RecROIs::mutable_hit_search_rect() {
  set_has_hit_search_rect();
  if (hit_search_rect_ == NULL) hit_search_rect_ = new ::gt::internal::msg::Rect;
  // @@protoc_insertion_point(field_mutable:gt.internal.msg.RecROIs.hit_search_rect)
  return hit_search_rect_;
}
inline ::gt::internal::msg::Rect* RecROIs::release_hit_search_rect() {
  clear_has_hit_search_rect();
  ::gt::internal::msg::Rect* temp = hit_search_rect_;
  hit_search_rect_ = NULL;
  return temp;
}
inline void RecROIs::set_allocated_hit_search_rect(::gt::internal::msg::Rect* hit_search_rect) {
  delete hit_search_rect_;
  hit_search_rect_ = hit_search_rect;
  if (hit_search_rect) {
    set_has_hit_search_rect();
  } else {
    clear_has_hit_search_rect();
  }
  // @@protoc_insertion_point(field_set_allocated:gt.internal.msg.RecROIs.hit_search_rect)
}

// optional .gt.internal.msg.Rect hit_track_rect = 4;
inline bool RecROIs::has_hit_track_rect() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecROIs::set_has_hit_track_rect() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecROIs::clear_has_hit_track_rect() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecROIs::clear_hit_track_rect() {
  if (hit_track_rect_ != NULL) hit_track_rect_->::gt::internal::msg::Rect::Clear();
  clear_has_hit_track_rect();
}
inline const ::gt::internal::msg::Rect& RecROIs::hit_track_rect() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.RecROIs.hit_track_rect)
  return hit_track_rect_ != NULL ? *hit_track_rect_ : *default_instance_->hit_track_rect_;
}
inline ::gt::internal::msg::Rect* RecROIs::mutable_hit_track_rect() {
  set_has_hit_track_rect();
  if (hit_track_rect_ == NULL) hit_track_rect_ = new ::gt::internal::msg::Rect;
  // @@protoc_insertion_point(field_mutable:gt.internal.msg.RecROIs.hit_track_rect)
  return hit_track_rect_;
}
inline ::gt::internal::msg::Rect* RecROIs::release_hit_track_rect() {
  clear_has_hit_track_rect();
  ::gt::internal::msg::Rect* temp = hit_track_rect_;
  hit_track_rect_ = NULL;
  return temp;
}
inline void RecROIs::set_allocated_hit_track_rect(::gt::internal::msg::Rect* hit_track_rect) {
  delete hit_track_rect_;
  hit_track_rect_ = hit_track_rect;
  if (hit_track_rect) {
    set_has_hit_track_rect();
  } else {
    clear_has_hit_track_rect();
  }
  // @@protoc_insertion_point(field_set_allocated:gt.internal.msg.RecROIs.hit_track_rect)
}

// optional .gt.internal.msg.Rect pick_off_search_rect = 5;
inline bool RecROIs::has_pick_off_search_rect() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecROIs::set_has_pick_off_search_rect() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecROIs::clear_has_pick_off_search_rect() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecROIs::clear_pick_off_search_rect() {
  if (pick_off_search_rect_ != NULL) pick_off_search_rect_->::gt::internal::msg::Rect::Clear();
  clear_has_pick_off_search_rect();
}
inline const ::gt::internal::msg::Rect& RecROIs::pick_off_search_rect() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.RecROIs.pick_off_search_rect)
  return pick_off_search_rect_ != NULL ? *pick_off_search_rect_ : *default_instance_->pick_off_search_rect_;
}
inline ::gt::internal::msg::Rect* RecROIs::mutable_pick_off_search_rect() {
  set_has_pick_off_search_rect();
  if (pick_off_search_rect_ == NULL) pick_off_search_rect_ = new ::gt::internal::msg::Rect;
  // @@protoc_insertion_point(field_mutable:gt.internal.msg.RecROIs.pick_off_search_rect)
  return pick_off_search_rect_;
}
inline ::gt::internal::msg::Rect* RecROIs::release_pick_off_search_rect() {
  clear_has_pick_off_search_rect();
  ::gt::internal::msg::Rect* temp = pick_off_search_rect_;
  pick_off_search_rect_ = NULL;
  return temp;
}
inline void RecROIs::set_allocated_pick_off_search_rect(::gt::internal::msg::Rect* pick_off_search_rect) {
  delete pick_off_search_rect_;
  pick_off_search_rect_ = pick_off_search_rect;
  if (pick_off_search_rect) {
    set_has_pick_off_search_rect();
  } else {
    clear_has_pick_off_search_rect();
  }
  // @@protoc_insertion_point(field_set_allocated:gt.internal.msg.RecROIs.pick_off_search_rect)
}

// optional .gt.internal.msg.Rect bat_detect_rect = 6;
inline bool RecROIs::has_bat_detect_rect() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RecROIs::set_has_bat_detect_rect() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RecROIs::clear_has_bat_detect_rect() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RecROIs::clear_bat_detect_rect() {
  if (bat_detect_rect_ != NULL) bat_detect_rect_->::gt::internal::msg::Rect::Clear();
  clear_has_bat_detect_rect();
}
inline const ::gt::internal::msg::Rect& RecROIs::bat_detect_rect() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.RecROIs.bat_detect_rect)
  return bat_detect_rect_ != NULL ? *bat_detect_rect_ : *default_instance_->bat_detect_rect_;
}
inline ::gt::internal::msg::Rect* RecROIs::mutable_bat_detect_rect() {
  set_has_bat_detect_rect();
  if (bat_detect_rect_ == NULL) bat_detect_rect_ = new ::gt::internal::msg::Rect;
  // @@protoc_insertion_point(field_mutable:gt.internal.msg.RecROIs.bat_detect_rect)
  return bat_detect_rect_;
}
inline ::gt::internal::msg::Rect* RecROIs::release_bat_detect_rect() {
  clear_has_bat_detect_rect();
  ::gt::internal::msg::Rect* temp = bat_detect_rect_;
  bat_detect_rect_ = NULL;
  return temp;
}
inline void RecROIs::set_allocated_bat_detect_rect(::gt::internal::msg::Rect* bat_detect_rect) {
  delete bat_detect_rect_;
  bat_detect_rect_ = bat_detect_rect;
  if (bat_detect_rect) {
    set_has_bat_detect_rect();
  } else {
    clear_has_bat_detect_rect();
  }
  // @@protoc_insertion_point(field_set_allocated:gt.internal.msg.RecROIs.bat_detect_rect)
}

// -------------------------------------------------------------------

// RecognizeParameters

// optional double corr_coef = 1;
inline bool RecognizeParameters::has_corr_coef() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecognizeParameters::set_has_corr_coef() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecognizeParameters::clear_has_corr_coef() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecognizeParameters::clear_corr_coef() {
  corr_coef_ = 0;
  clear_has_corr_coef();
}
inline double RecognizeParameters::corr_coef() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.RecognizeParameters.corr_coef)
  return corr_coef_;
}
inline void RecognizeParameters::set_corr_coef(double value) {
  set_has_corr_coef();
  corr_coef_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.RecognizeParameters.corr_coef)
}

// optional double sko_coef = 2;
inline bool RecognizeParameters::has_sko_coef() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecognizeParameters::set_has_sko_coef() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecognizeParameters::clear_has_sko_coef() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecognizeParameters::clear_sko_coef() {
  sko_coef_ = 0;
  clear_has_sko_coef();
}
inline double RecognizeParameters::sko_coef() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.RecognizeParameters.sko_coef)
  return sko_coef_;
}
inline void RecognizeParameters::set_sko_coef(double value) {
  set_has_sko_coef();
  sko_coef_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.RecognizeParameters.sko_coef)
}

// optional int32 search_area_size = 3;
inline bool RecognizeParameters::has_search_area_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecognizeParameters::set_has_search_area_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecognizeParameters::clear_has_search_area_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecognizeParameters::clear_search_area_size() {
  search_area_size_ = 0;
  clear_has_search_area_size();
}
inline ::google::protobuf::int32 RecognizeParameters::search_area_size() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.RecognizeParameters.search_area_size)
  return search_area_size_;
}
inline void RecognizeParameters::set_search_area_size(::google::protobuf::int32 value) {
  set_has_search_area_size();
  search_area_size_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.RecognizeParameters.search_area_size)
}

// optional double min_sko_template = 4;
inline bool RecognizeParameters::has_min_sko_template() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecognizeParameters::set_has_min_sko_template() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecognizeParameters::clear_has_min_sko_template() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecognizeParameters::clear_min_sko_template() {
  min_sko_template_ = 0;
  clear_has_min_sko_template();
}
inline double RecognizeParameters::min_sko_template() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.RecognizeParameters.min_sko_template)
  return min_sko_template_;
}
inline void RecognizeParameters::set_min_sko_template(double value) {
  set_has_min_sko_template();
  min_sko_template_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.RecognizeParameters.min_sko_template)
}

// optional double max_angle_directions = 5;
inline bool RecognizeParameters::has_max_angle_directions() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecognizeParameters::set_has_max_angle_directions() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecognizeParameters::clear_has_max_angle_directions() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecognizeParameters::clear_max_angle_directions() {
  max_angle_directions_ = 0;
  clear_has_max_angle_directions();
}
inline double RecognizeParameters::max_angle_directions() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.RecognizeParameters.max_angle_directions)
  return max_angle_directions_;
}
inline void RecognizeParameters::set_max_angle_directions(double value) {
  set_has_max_angle_directions();
  max_angle_directions_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.RecognizeParameters.max_angle_directions)
}

// optional double min_speed = 6;
inline bool RecognizeParameters::has_min_speed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RecognizeParameters::set_has_min_speed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RecognizeParameters::clear_has_min_speed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RecognizeParameters::clear_min_speed() {
  min_speed_ = 0;
  clear_has_min_speed();
}
inline double RecognizeParameters::min_speed() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.RecognizeParameters.min_speed)
  return min_speed_;
}
inline void RecognizeParameters::set_min_speed(double value) {
  set_has_min_speed();
  min_speed_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.RecognizeParameters.min_speed)
}

// optional int32 canny_thres_min = 7;
inline bool RecognizeParameters::has_canny_thres_min() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RecognizeParameters::set_has_canny_thres_min() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RecognizeParameters::clear_has_canny_thres_min() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RecognizeParameters::clear_canny_thres_min() {
  canny_thres_min_ = 0;
  clear_has_canny_thres_min();
}
inline ::google::protobuf::int32 RecognizeParameters::canny_thres_min() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.RecognizeParameters.canny_thres_min)
  return canny_thres_min_;
}
inline void RecognizeParameters::set_canny_thres_min(::google::protobuf::int32 value) {
  set_has_canny_thres_min();
  canny_thres_min_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.RecognizeParameters.canny_thres_min)
}

// optional int32 canny_thres_max = 8;
inline bool RecognizeParameters::has_canny_thres_max() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RecognizeParameters::set_has_canny_thres_max() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RecognizeParameters::clear_has_canny_thres_max() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RecognizeParameters::clear_canny_thres_max() {
  canny_thres_max_ = 0;
  clear_has_canny_thres_max();
}
inline ::google::protobuf::int32 RecognizeParameters::canny_thres_max() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.RecognizeParameters.canny_thres_max)
  return canny_thres_max_;
}
inline void RecognizeParameters::set_canny_thres_max(::google::protobuf::int32 value) {
  set_has_canny_thres_max();
  canny_thres_max_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.RecognizeParameters.canny_thres_max)
}

// optional int32 max_area = 9;
inline bool RecognizeParameters::has_max_area() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RecognizeParameters::set_has_max_area() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RecognizeParameters::clear_has_max_area() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RecognizeParameters::clear_max_area() {
  max_area_ = 0;
  clear_has_max_area();
}
inline ::google::protobuf::int32 RecognizeParameters::max_area() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.RecognizeParameters.max_area)
  return max_area_;
}
inline void RecognizeParameters::set_max_area(::google::protobuf::int32 value) {
  set_has_max_area();
  max_area_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.RecognizeParameters.max_area)
}

// optional int32 min_area = 10;
inline bool RecognizeParameters::has_min_area() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RecognizeParameters::set_has_min_area() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RecognizeParameters::clear_has_min_area() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RecognizeParameters::clear_min_area() {
  min_area_ = 0;
  clear_has_min_area();
}
inline ::google::protobuf::int32 RecognizeParameters::min_area() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.RecognizeParameters.min_area)
  return min_area_;
}
inline void RecognizeParameters::set_min_area(::google::protobuf::int32 value) {
  set_has_min_area();
  min_area_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.RecognizeParameters.min_area)
}

// optional double circularity_coeff = 11;
inline bool RecognizeParameters::has_circularity_coeff() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RecognizeParameters::set_has_circularity_coeff() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RecognizeParameters::clear_has_circularity_coeff() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RecognizeParameters::clear_circularity_coeff() {
  circularity_coeff_ = 0;
  clear_has_circularity_coeff();
}
inline double RecognizeParameters::circularity_coeff() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.RecognizeParameters.circularity_coeff)
  return circularity_coeff_;
}
inline void RecognizeParameters::set_circularity_coeff(double value) {
  set_has_circularity_coeff();
  circularity_coeff_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.RecognizeParameters.circularity_coeff)
}

// -------------------------------------------------------------------

// HardwareCameraParameters

// optional double exposure = 1;
inline bool HardwareCameraParameters::has_exposure() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HardwareCameraParameters::set_has_exposure() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HardwareCameraParameters::clear_has_exposure() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HardwareCameraParameters::clear_exposure() {
  exposure_ = 0;
  clear_has_exposure();
}
inline double HardwareCameraParameters::exposure() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.HardwareCameraParameters.exposure)
  return exposure_;
}
inline void HardwareCameraParameters::set_exposure(double value) {
  set_has_exposure();
  exposure_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.HardwareCameraParameters.exposure)
}

// optional double min_exposure = 2;
inline bool HardwareCameraParameters::has_min_exposure() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HardwareCameraParameters::set_has_min_exposure() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HardwareCameraParameters::clear_has_min_exposure() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HardwareCameraParameters::clear_min_exposure() {
  min_exposure_ = 0;
  clear_has_min_exposure();
}
inline double HardwareCameraParameters::min_exposure() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.HardwareCameraParameters.min_exposure)
  return min_exposure_;
}
inline void HardwareCameraParameters::set_min_exposure(double value) {
  set_has_min_exposure();
  min_exposure_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.HardwareCameraParameters.min_exposure)
}

// optional double max_exposure = 3;
inline bool HardwareCameraParameters::has_max_exposure() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HardwareCameraParameters::set_has_max_exposure() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HardwareCameraParameters::clear_has_max_exposure() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HardwareCameraParameters::clear_max_exposure() {
  max_exposure_ = 0;
  clear_has_max_exposure();
}
inline double HardwareCameraParameters::max_exposure() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.HardwareCameraParameters.max_exposure)
  return max_exposure_;
}
inline void HardwareCameraParameters::set_max_exposure(double value) {
  set_has_max_exposure();
  max_exposure_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.HardwareCameraParameters.max_exposure)
}

// optional int32 pixel_clock = 4;
inline bool HardwareCameraParameters::has_pixel_clock() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HardwareCameraParameters::set_has_pixel_clock() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HardwareCameraParameters::clear_has_pixel_clock() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HardwareCameraParameters::clear_pixel_clock() {
  pixel_clock_ = 0;
  clear_has_pixel_clock();
}
inline ::google::protobuf::int32 HardwareCameraParameters::pixel_clock() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.HardwareCameraParameters.pixel_clock)
  return pixel_clock_;
}
inline void HardwareCameraParameters::set_pixel_clock(::google::protobuf::int32 value) {
  set_has_pixel_clock();
  pixel_clock_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.HardwareCameraParameters.pixel_clock)
}

// optional int32 min_pixel_clock = 5;
inline bool HardwareCameraParameters::has_min_pixel_clock() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HardwareCameraParameters::set_has_min_pixel_clock() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HardwareCameraParameters::clear_has_min_pixel_clock() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HardwareCameraParameters::clear_min_pixel_clock() {
  min_pixel_clock_ = 0;
  clear_has_min_pixel_clock();
}
inline ::google::protobuf::int32 HardwareCameraParameters::min_pixel_clock() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.HardwareCameraParameters.min_pixel_clock)
  return min_pixel_clock_;
}
inline void HardwareCameraParameters::set_min_pixel_clock(::google::protobuf::int32 value) {
  set_has_min_pixel_clock();
  min_pixel_clock_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.HardwareCameraParameters.min_pixel_clock)
}

// optional int32 max_pixel_clock = 6;
inline bool HardwareCameraParameters::has_max_pixel_clock() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HardwareCameraParameters::set_has_max_pixel_clock() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HardwareCameraParameters::clear_has_max_pixel_clock() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HardwareCameraParameters::clear_max_pixel_clock() {
  max_pixel_clock_ = 0;
  clear_has_max_pixel_clock();
}
inline ::google::protobuf::int32 HardwareCameraParameters::max_pixel_clock() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.HardwareCameraParameters.max_pixel_clock)
  return max_pixel_clock_;
}
inline void HardwareCameraParameters::set_max_pixel_clock(::google::protobuf::int32 value) {
  set_has_max_pixel_clock();
  max_pixel_clock_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.HardwareCameraParameters.max_pixel_clock)
}

// optional double frame_rate = 7;
inline bool HardwareCameraParameters::has_frame_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HardwareCameraParameters::set_has_frame_rate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HardwareCameraParameters::clear_has_frame_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HardwareCameraParameters::clear_frame_rate() {
  frame_rate_ = 0;
  clear_has_frame_rate();
}
inline double HardwareCameraParameters::frame_rate() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.HardwareCameraParameters.frame_rate)
  return frame_rate_;
}
inline void HardwareCameraParameters::set_frame_rate(double value) {
  set_has_frame_rate();
  frame_rate_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.HardwareCameraParameters.frame_rate)
}

// optional double min_frame_rate = 8;
inline bool HardwareCameraParameters::has_min_frame_rate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HardwareCameraParameters::set_has_min_frame_rate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HardwareCameraParameters::clear_has_min_frame_rate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HardwareCameraParameters::clear_min_frame_rate() {
  min_frame_rate_ = 0;
  clear_has_min_frame_rate();
}
inline double HardwareCameraParameters::min_frame_rate() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.HardwareCameraParameters.min_frame_rate)
  return min_frame_rate_;
}
inline void HardwareCameraParameters::set_min_frame_rate(double value) {
  set_has_min_frame_rate();
  min_frame_rate_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.HardwareCameraParameters.min_frame_rate)
}

// optional double max_frame_rate = 9;
inline bool HardwareCameraParameters::has_max_frame_rate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HardwareCameraParameters::set_has_max_frame_rate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void HardwareCameraParameters::clear_has_max_frame_rate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void HardwareCameraParameters::clear_max_frame_rate() {
  max_frame_rate_ = 0;
  clear_has_max_frame_rate();
}
inline double HardwareCameraParameters::max_frame_rate() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.HardwareCameraParameters.max_frame_rate)
  return max_frame_rate_;
}
inline void HardwareCameraParameters::set_max_frame_rate(double value) {
  set_has_max_frame_rate();
  max_frame_rate_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.HardwareCameraParameters.max_frame_rate)
}

// optional int32 width = 10;
inline bool HardwareCameraParameters::has_width() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void HardwareCameraParameters::set_has_width() {
  _has_bits_[0] |= 0x00000200u;
}
inline void HardwareCameraParameters::clear_has_width() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void HardwareCameraParameters::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 HardwareCameraParameters::width() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.HardwareCameraParameters.width)
  return width_;
}
inline void HardwareCameraParameters::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.HardwareCameraParameters.width)
}

// optional int32 height = 11;
inline bool HardwareCameraParameters::has_height() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void HardwareCameraParameters::set_has_height() {
  _has_bits_[0] |= 0x00000400u;
}
inline void HardwareCameraParameters::clear_has_height() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void HardwareCameraParameters::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 HardwareCameraParameters::height() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.HardwareCameraParameters.height)
  return height_;
}
inline void HardwareCameraParameters::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.HardwareCameraParameters.height)
}

// optional int32 gain = 12;
inline bool HardwareCameraParameters::has_gain() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void HardwareCameraParameters::set_has_gain() {
  _has_bits_[0] |= 0x00000800u;
}
inline void HardwareCameraParameters::clear_has_gain() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void HardwareCameraParameters::clear_gain() {
  gain_ = 0;
  clear_has_gain();
}
inline ::google::protobuf::int32 HardwareCameraParameters::gain() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.HardwareCameraParameters.gain)
  return gain_;
}
inline void HardwareCameraParameters::set_gain(::google::protobuf::int32 value) {
  set_has_gain();
  gain_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.HardwareCameraParameters.gain)
}

// optional bool debounce_enable = 13;
inline bool HardwareCameraParameters::has_debounce_enable() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void HardwareCameraParameters::set_has_debounce_enable() {
  _has_bits_[0] |= 0x00001000u;
}
inline void HardwareCameraParameters::clear_has_debounce_enable() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void HardwareCameraParameters::clear_debounce_enable() {
  debounce_enable_ = false;
  clear_has_debounce_enable();
}
inline bool HardwareCameraParameters::debounce_enable() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.HardwareCameraParameters.debounce_enable)
  return debounce_enable_;
}
inline void HardwareCameraParameters::set_debounce_enable(bool value) {
  set_has_debounce_enable();
  debounce_enable_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.HardwareCameraParameters.debounce_enable)
}

// optional int32 debounce_value = 14;
inline bool HardwareCameraParameters::has_debounce_value() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void HardwareCameraParameters::set_has_debounce_value() {
  _has_bits_[0] |= 0x00002000u;
}
inline void HardwareCameraParameters::clear_has_debounce_value() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void HardwareCameraParameters::clear_debounce_value() {
  debounce_value_ = 0;
  clear_has_debounce_value();
}
inline ::google::protobuf::int32 HardwareCameraParameters::debounce_value() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.HardwareCameraParameters.debounce_value)
  return debounce_value_;
}
inline void HardwareCameraParameters::set_debounce_value(::google::protobuf::int32 value) {
  set_has_debounce_value();
  debounce_value_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.HardwareCameraParameters.debounce_value)
}

// optional int32 trigger_mode = 15;
inline bool HardwareCameraParameters::has_trigger_mode() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void HardwareCameraParameters::set_has_trigger_mode() {
  _has_bits_[0] |= 0x00004000u;
}
inline void HardwareCameraParameters::clear_has_trigger_mode() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void HardwareCameraParameters::clear_trigger_mode() {
  trigger_mode_ = 0;
  clear_has_trigger_mode();
}
inline ::google::protobuf::int32 HardwareCameraParameters::trigger_mode() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.HardwareCameraParameters.trigger_mode)
  return trigger_mode_;
}
inline void HardwareCameraParameters::set_trigger_mode(::google::protobuf::int32 value) {
  set_has_trigger_mode();
  trigger_mode_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.HardwareCameraParameters.trigger_mode)
}

// optional int32 focusing = 16;
inline bool HardwareCameraParameters::has_focusing() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void HardwareCameraParameters::set_has_focusing() {
  _has_bits_[0] |= 0x00008000u;
}
inline void HardwareCameraParameters::clear_has_focusing() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void HardwareCameraParameters::clear_focusing() {
  focusing_ = 0;
  clear_has_focusing();
}
inline ::google::protobuf::int32 HardwareCameraParameters::focusing() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.HardwareCameraParameters.focusing)
  return focusing_;
}
inline void HardwareCameraParameters::set_focusing(::google::protobuf::int32 value) {
  set_has_focusing();
  focusing_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.HardwareCameraParameters.focusing)
}

// optional bool trigger_mode_enable = 17;
inline bool HardwareCameraParameters::has_trigger_mode_enable() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void HardwareCameraParameters::set_has_trigger_mode_enable() {
  _has_bits_[0] |= 0x00010000u;
}
inline void HardwareCameraParameters::clear_has_trigger_mode_enable() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void HardwareCameraParameters::clear_trigger_mode_enable() {
  trigger_mode_enable_ = false;
  clear_has_trigger_mode_enable();
}
inline bool HardwareCameraParameters::trigger_mode_enable() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.HardwareCameraParameters.trigger_mode_enable)
  return trigger_mode_enable_;
}
inline void HardwareCameraParameters::set_trigger_mode_enable(bool value) {
  set_has_trigger_mode_enable();
  trigger_mode_enable_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.HardwareCameraParameters.trigger_mode_enable)
}

// -------------------------------------------------------------------

// PictureCameraParameters

// optional int32 picture_param_flag = 1;
inline bool PictureCameraParameters::has_picture_param_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PictureCameraParameters::set_has_picture_param_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PictureCameraParameters::clear_has_picture_param_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PictureCameraParameters::clear_picture_param_flag() {
  picture_param_flag_ = 0;
  clear_has_picture_param_flag();
}
inline ::google::protobuf::int32 PictureCameraParameters::picture_param_flag() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.PictureCameraParameters.picture_param_flag)
  return picture_param_flag_;
}
inline void PictureCameraParameters::set_picture_param_flag(::google::protobuf::int32 value) {
  set_has_picture_param_flag();
  picture_param_flag_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.PictureCameraParameters.picture_param_flag)
}

// optional int32 white_balance = 2;
inline bool PictureCameraParameters::has_white_balance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PictureCameraParameters::set_has_white_balance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PictureCameraParameters::clear_has_white_balance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PictureCameraParameters::clear_white_balance() {
  white_balance_ = 0;
  clear_has_white_balance();
}
inline ::google::protobuf::int32 PictureCameraParameters::white_balance() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.PictureCameraParameters.white_balance)
  return white_balance_;
}
inline void PictureCameraParameters::set_white_balance(::google::protobuf::int32 value) {
  set_has_white_balance();
  white_balance_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.PictureCameraParameters.white_balance)
}

// optional .gt.internal.msg.Rect wb_rect = 3;
inline bool PictureCameraParameters::has_wb_rect() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PictureCameraParameters::set_has_wb_rect() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PictureCameraParameters::clear_has_wb_rect() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PictureCameraParameters::clear_wb_rect() {
  if (wb_rect_ != NULL) wb_rect_->::gt::internal::msg::Rect::Clear();
  clear_has_wb_rect();
}
inline const ::gt::internal::msg::Rect& PictureCameraParameters::wb_rect() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.PictureCameraParameters.wb_rect)
  return wb_rect_ != NULL ? *wb_rect_ : *default_instance_->wb_rect_;
}
inline ::gt::internal::msg::Rect* PictureCameraParameters::mutable_wb_rect() {
  set_has_wb_rect();
  if (wb_rect_ == NULL) wb_rect_ = new ::gt::internal::msg::Rect;
  // @@protoc_insertion_point(field_mutable:gt.internal.msg.PictureCameraParameters.wb_rect)
  return wb_rect_;
}
inline ::gt::internal::msg::Rect* PictureCameraParameters::release_wb_rect() {
  clear_has_wb_rect();
  ::gt::internal::msg::Rect* temp = wb_rect_;
  wb_rect_ = NULL;
  return temp;
}
inline void PictureCameraParameters::set_allocated_wb_rect(::gt::internal::msg::Rect* wb_rect) {
  delete wb_rect_;
  wb_rect_ = wb_rect;
  if (wb_rect) {
    set_has_wb_rect();
  } else {
    clear_has_wb_rect();
  }
  // @@protoc_insertion_point(field_set_allocated:gt.internal.msg.PictureCameraParameters.wb_rect)
}

// optional double gamma = 4;
inline bool PictureCameraParameters::has_gamma() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PictureCameraParameters::set_has_gamma() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PictureCameraParameters::clear_has_gamma() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PictureCameraParameters::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
inline double PictureCameraParameters::gamma() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.PictureCameraParameters.gamma)
  return gamma_;
}
inline void PictureCameraParameters::set_gamma(double value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.PictureCameraParameters.gamma)
}

// optional double sharp = 5;
inline bool PictureCameraParameters::has_sharp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PictureCameraParameters::set_has_sharp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PictureCameraParameters::clear_has_sharp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PictureCameraParameters::clear_sharp() {
  sharp_ = 0;
  clear_has_sharp();
}
inline double PictureCameraParameters::sharp() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.PictureCameraParameters.sharp)
  return sharp_;
}
inline void PictureCameraParameters::set_sharp(double value) {
  set_has_sharp();
  sharp_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.PictureCameraParameters.sharp)
}

// optional int32 saturation = 6;
inline bool PictureCameraParameters::has_saturation() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PictureCameraParameters::set_has_saturation() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PictureCameraParameters::clear_has_saturation() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PictureCameraParameters::clear_saturation() {
  saturation_ = 0;
  clear_has_saturation();
}
inline ::google::protobuf::int32 PictureCameraParameters::saturation() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.PictureCameraParameters.saturation)
  return saturation_;
}
inline void PictureCameraParameters::set_saturation(::google::protobuf::int32 value) {
  set_has_saturation();
  saturation_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.PictureCameraParameters.saturation)
}

// optional int32 r_saturation = 7;
inline bool PictureCameraParameters::has_r_saturation() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PictureCameraParameters::set_has_r_saturation() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PictureCameraParameters::clear_has_r_saturation() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PictureCameraParameters::clear_r_saturation() {
  r_saturation_ = 0;
  clear_has_r_saturation();
}
inline ::google::protobuf::int32 PictureCameraParameters::r_saturation() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.PictureCameraParameters.r_saturation)
  return r_saturation_;
}
inline void PictureCameraParameters::set_r_saturation(::google::protobuf::int32 value) {
  set_has_r_saturation();
  r_saturation_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.PictureCameraParameters.r_saturation)
}

// optional int32 g_saturation = 8;
inline bool PictureCameraParameters::has_g_saturation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PictureCameraParameters::set_has_g_saturation() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PictureCameraParameters::clear_has_g_saturation() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PictureCameraParameters::clear_g_saturation() {
  g_saturation_ = 0;
  clear_has_g_saturation();
}
inline ::google::protobuf::int32 PictureCameraParameters::g_saturation() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.PictureCameraParameters.g_saturation)
  return g_saturation_;
}
inline void PictureCameraParameters::set_g_saturation(::google::protobuf::int32 value) {
  set_has_g_saturation();
  g_saturation_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.PictureCameraParameters.g_saturation)
}

// optional int32 b_saturation = 9;
inline bool PictureCameraParameters::has_b_saturation() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PictureCameraParameters::set_has_b_saturation() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PictureCameraParameters::clear_has_b_saturation() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PictureCameraParameters::clear_b_saturation() {
  b_saturation_ = 0;
  clear_has_b_saturation();
}
inline ::google::protobuf::int32 PictureCameraParameters::b_saturation() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.PictureCameraParameters.b_saturation)
  return b_saturation_;
}
inline void PictureCameraParameters::set_b_saturation(::google::protobuf::int32 value) {
  set_has_b_saturation();
  b_saturation_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.PictureCameraParameters.b_saturation)
}

// optional int32 hue = 10;
inline bool PictureCameraParameters::has_hue() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PictureCameraParameters::set_has_hue() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PictureCameraParameters::clear_has_hue() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PictureCameraParameters::clear_hue() {
  hue_ = 0;
  clear_has_hue();
}
inline ::google::protobuf::int32 PictureCameraParameters::hue() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.PictureCameraParameters.hue)
  return hue_;
}
inline void PictureCameraParameters::set_hue(::google::protobuf::int32 value) {
  set_has_hue();
  hue_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.PictureCameraParameters.hue)
}

// optional double shadow_coef = 11;
inline bool PictureCameraParameters::has_shadow_coef() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PictureCameraParameters::set_has_shadow_coef() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PictureCameraParameters::clear_has_shadow_coef() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PictureCameraParameters::clear_shadow_coef() {
  shadow_coef_ = 0;
  clear_has_shadow_coef();
}
inline double PictureCameraParameters::shadow_coef() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.PictureCameraParameters.shadow_coef)
  return shadow_coef_;
}
inline void PictureCameraParameters::set_shadow_coef(double value) {
  set_has_shadow_coef();
  shadow_coef_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.PictureCameraParameters.shadow_coef)
}

// optional double shadow_threshold = 12;
inline bool PictureCameraParameters::has_shadow_threshold() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PictureCameraParameters::set_has_shadow_threshold() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PictureCameraParameters::clear_has_shadow_threshold() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PictureCameraParameters::clear_shadow_threshold() {
  shadow_threshold_ = 0;
  clear_has_shadow_threshold();
}
inline double PictureCameraParameters::shadow_threshold() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.PictureCameraParameters.shadow_threshold)
  return shadow_threshold_;
}
inline void PictureCameraParameters::set_shadow_threshold(double value) {
  set_has_shadow_threshold();
  shadow_threshold_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.PictureCameraParameters.shadow_threshold)
}

// optional int32 shadow_gauss_window_size = 13;
inline bool PictureCameraParameters::has_shadow_gauss_window_size() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PictureCameraParameters::set_has_shadow_gauss_window_size() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PictureCameraParameters::clear_has_shadow_gauss_window_size() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PictureCameraParameters::clear_shadow_gauss_window_size() {
  shadow_gauss_window_size_ = 0;
  clear_has_shadow_gauss_window_size();
}
inline ::google::protobuf::int32 PictureCameraParameters::shadow_gauss_window_size() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.PictureCameraParameters.shadow_gauss_window_size)
  return shadow_gauss_window_size_;
}
inline void PictureCameraParameters::set_shadow_gauss_window_size(::google::protobuf::int32 value) {
  set_has_shadow_gauss_window_size();
  shadow_gauss_window_size_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.PictureCameraParameters.shadow_gauss_window_size)
}

// optional int32 rotate = 14;
inline bool PictureCameraParameters::has_rotate() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PictureCameraParameters::set_has_rotate() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PictureCameraParameters::clear_has_rotate() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PictureCameraParameters::clear_rotate() {
  rotate_ = 0;
  clear_has_rotate();
}
inline ::google::protobuf::int32 PictureCameraParameters::rotate() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.PictureCameraParameters.rotate)
  return rotate_;
}
inline void PictureCameraParameters::set_rotate(::google::protobuf::int32 value) {
  set_has_rotate();
  rotate_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.PictureCameraParameters.rotate)
}

// -------------------------------------------------------------------

// AutoExposureParameters

// optional double gain = 1;
inline bool AutoExposureParameters::has_gain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AutoExposureParameters::set_has_gain() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AutoExposureParameters::clear_has_gain() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AutoExposureParameters::clear_gain() {
  gain_ = 0;
  clear_has_gain();
}
inline double AutoExposureParameters::gain() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.AutoExposureParameters.gain)
  return gain_;
}
inline void AutoExposureParameters::set_gain(double value) {
  set_has_gain();
  gain_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.AutoExposureParameters.gain)
}

// optional double exposure = 2;
inline bool AutoExposureParameters::has_exposure() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AutoExposureParameters::set_has_exposure() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AutoExposureParameters::clear_has_exposure() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AutoExposureParameters::clear_exposure() {
  exposure_ = 0;
  clear_has_exposure();
}
inline double AutoExposureParameters::exposure() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.AutoExposureParameters.exposure)
  return exposure_;
}
inline void AutoExposureParameters::set_exposure(double value) {
  set_has_exposure();
  exposure_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.AutoExposureParameters.exposure)
}

// optional double min_gain_coeff = 3;
inline bool AutoExposureParameters::has_min_gain_coeff() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AutoExposureParameters::set_has_min_gain_coeff() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AutoExposureParameters::clear_has_min_gain_coeff() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AutoExposureParameters::clear_min_gain_coeff() {
  min_gain_coeff_ = 0;
  clear_has_min_gain_coeff();
}
inline double AutoExposureParameters::min_gain_coeff() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.AutoExposureParameters.min_gain_coeff)
  return min_gain_coeff_;
}
inline void AutoExposureParameters::set_min_gain_coeff(double value) {
  set_has_min_gain_coeff();
  min_gain_coeff_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.AutoExposureParameters.min_gain_coeff)
}

// optional double max_gain_coeff = 4;
inline bool AutoExposureParameters::has_max_gain_coeff() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AutoExposureParameters::set_has_max_gain_coeff() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AutoExposureParameters::clear_has_max_gain_coeff() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AutoExposureParameters::clear_max_gain_coeff() {
  max_gain_coeff_ = 0;
  clear_has_max_gain_coeff();
}
inline double AutoExposureParameters::max_gain_coeff() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.AutoExposureParameters.max_gain_coeff)
  return max_gain_coeff_;
}
inline void AutoExposureParameters::set_max_gain_coeff(double value) {
  set_has_max_gain_coeff();
  max_gain_coeff_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.AutoExposureParameters.max_gain_coeff)
}

// optional double max_percent = 5;
inline bool AutoExposureParameters::has_max_percent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AutoExposureParameters::set_has_max_percent() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AutoExposureParameters::clear_has_max_percent() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AutoExposureParameters::clear_max_percent() {
  max_percent_ = 0;
  clear_has_max_percent();
}
inline double AutoExposureParameters::max_percent() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.AutoExposureParameters.max_percent)
  return max_percent_;
}
inline void AutoExposureParameters::set_max_percent(double value) {
  set_has_max_percent();
  max_percent_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.AutoExposureParameters.max_percent)
}

// optional double min_rel_coef = 6;
inline bool AutoExposureParameters::has_min_rel_coef() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AutoExposureParameters::set_has_min_rel_coef() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AutoExposureParameters::clear_has_min_rel_coef() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AutoExposureParameters::clear_min_rel_coef() {
  min_rel_coef_ = 0;
  clear_has_min_rel_coef();
}
inline double AutoExposureParameters::min_rel_coef() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.AutoExposureParameters.min_rel_coef)
  return min_rel_coef_;
}
inline void AutoExposureParameters::set_min_rel_coef(double value) {
  set_has_min_rel_coef();
  min_rel_coef_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.AutoExposureParameters.min_rel_coef)
}

// optional double max_rel_coef = 7;
inline bool AutoExposureParameters::has_max_rel_coef() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AutoExposureParameters::set_has_max_rel_coef() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AutoExposureParameters::clear_has_max_rel_coef() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AutoExposureParameters::clear_max_rel_coef() {
  max_rel_coef_ = 0;
  clear_has_max_rel_coef();
}
inline double AutoExposureParameters::max_rel_coef() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.AutoExposureParameters.max_rel_coef)
  return max_rel_coef_;
}
inline void AutoExposureParameters::set_max_rel_coef(double value) {
  set_has_max_rel_coef();
  max_rel_coef_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.AutoExposureParameters.max_rel_coef)
}

// optional double mean = 8;
inline bool AutoExposureParameters::has_mean() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AutoExposureParameters::set_has_mean() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AutoExposureParameters::clear_has_mean() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AutoExposureParameters::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
inline double AutoExposureParameters::mean() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.AutoExposureParameters.mean)
  return mean_;
}
inline void AutoExposureParameters::set_mean(double value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.AutoExposureParameters.mean)
}

// -------------------------------------------------------------------

// StreamCameraParameters

// optional int32 raw_frame = 1;
inline bool StreamCameraParameters::has_raw_frame() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamCameraParameters::set_has_raw_frame() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreamCameraParameters::clear_has_raw_frame() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreamCameraParameters::clear_raw_frame() {
  raw_frame_ = 0;
  clear_has_raw_frame();
}
inline ::google::protobuf::int32 StreamCameraParameters::raw_frame() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.StreamCameraParameters.raw_frame)
  return raw_frame_;
}
inline void StreamCameraParameters::set_raw_frame(::google::protobuf::int32 value) {
  set_has_raw_frame();
  raw_frame_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.StreamCameraParameters.raw_frame)
}

// optional int32 send_frame_rate_main = 4;
inline bool StreamCameraParameters::has_send_frame_rate_main() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StreamCameraParameters::set_has_send_frame_rate_main() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StreamCameraParameters::clear_has_send_frame_rate_main() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StreamCameraParameters::clear_send_frame_rate_main() {
  send_frame_rate_main_ = 0;
  clear_has_send_frame_rate_main();
}
inline ::google::protobuf::int32 StreamCameraParameters::send_frame_rate_main() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.StreamCameraParameters.send_frame_rate_main)
  return send_frame_rate_main_;
}
inline void StreamCameraParameters::set_send_frame_rate_main(::google::protobuf::int32 value) {
  set_has_send_frame_rate_main();
  send_frame_rate_main_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.StreamCameraParameters.send_frame_rate_main)
}

// optional int32 send_frame_rate_add = 6;
inline bool StreamCameraParameters::has_send_frame_rate_add() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StreamCameraParameters::set_has_send_frame_rate_add() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StreamCameraParameters::clear_has_send_frame_rate_add() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StreamCameraParameters::clear_send_frame_rate_add() {
  send_frame_rate_add_ = 0;
  clear_has_send_frame_rate_add();
}
inline ::google::protobuf::int32 StreamCameraParameters::send_frame_rate_add() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.StreamCameraParameters.send_frame_rate_add)
  return send_frame_rate_add_;
}
inline void StreamCameraParameters::set_send_frame_rate_add(::google::protobuf::int32 value) {
  set_has_send_frame_rate_add();
  send_frame_rate_add_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.StreamCameraParameters.send_frame_rate_add)
}

// optional int32 port_send_stream_main = 8;
inline bool StreamCameraParameters::has_port_send_stream_main() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StreamCameraParameters::set_has_port_send_stream_main() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StreamCameraParameters::clear_has_port_send_stream_main() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StreamCameraParameters::clear_port_send_stream_main() {
  port_send_stream_main_ = 0;
  clear_has_port_send_stream_main();
}
inline ::google::protobuf::int32 StreamCameraParameters::port_send_stream_main() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.StreamCameraParameters.port_send_stream_main)
  return port_send_stream_main_;
}
inline void StreamCameraParameters::set_port_send_stream_main(::google::protobuf::int32 value) {
  set_has_port_send_stream_main();
  port_send_stream_main_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.StreamCameraParameters.port_send_stream_main)
}

// optional int32 port_send_stream_add = 9;
inline bool StreamCameraParameters::has_port_send_stream_add() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StreamCameraParameters::set_has_port_send_stream_add() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StreamCameraParameters::clear_has_port_send_stream_add() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StreamCameraParameters::clear_port_send_stream_add() {
  port_send_stream_add_ = 0;
  clear_has_port_send_stream_add();
}
inline ::google::protobuf::int32 StreamCameraParameters::port_send_stream_add() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.StreamCameraParameters.port_send_stream_add)
  return port_send_stream_add_;
}
inline void StreamCameraParameters::set_port_send_stream_add(::google::protobuf::int32 value) {
  set_has_port_send_stream_add();
  port_send_stream_add_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.StreamCameraParameters.port_send_stream_add)
}

// -------------------------------------------------------------------

// StreamCameraCommand

// required .gt.internal.msg.StreamType type = 1;
inline bool StreamCameraCommand::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamCameraCommand::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreamCameraCommand::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreamCameraCommand::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::gt::internal::msg::StreamType StreamCameraCommand::type() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.StreamCameraCommand.type)
  return static_cast< ::gt::internal::msg::StreamType >(type_);
}
inline void StreamCameraCommand::set_type(::gt::internal::msg::StreamType value) {
  assert(::gt::internal::msg::StreamType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.StreamCameraCommand.type)
}

// optional int32 video_duration = 2;
inline bool StreamCameraCommand::has_video_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StreamCameraCommand::set_has_video_duration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StreamCameraCommand::clear_has_video_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StreamCameraCommand::clear_video_duration() {
  video_duration_ = 0;
  clear_has_video_duration();
}
inline ::google::protobuf::int32 StreamCameraCommand::video_duration() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.StreamCameraCommand.video_duration)
  return video_duration_;
}
inline void StreamCameraCommand::set_video_duration(::google::protobuf::int32 value) {
  set_has_video_duration();
  video_duration_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.StreamCameraCommand.video_duration)
}

// optional string desc = 3;
inline bool StreamCameraCommand::has_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StreamCameraCommand::set_has_desc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StreamCameraCommand::clear_has_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StreamCameraCommand::clear_desc() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& StreamCameraCommand::desc() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.StreamCameraCommand.desc)
  return *desc_;
}
inline void StreamCameraCommand::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set:gt.internal.msg.StreamCameraCommand.desc)
}
inline void StreamCameraCommand::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set_char:gt.internal.msg.StreamCameraCommand.desc)
}
inline void StreamCameraCommand::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gt.internal.msg.StreamCameraCommand.desc)
}
inline ::std::string* StreamCameraCommand::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gt.internal.msg.StreamCameraCommand.desc)
  return desc_;
}
inline ::std::string* StreamCameraCommand::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StreamCameraCommand::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gt.internal.msg.StreamCameraCommand.desc)
}

// optional bool stop = 4;
inline bool StreamCameraCommand::has_stop() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StreamCameraCommand::set_has_stop() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StreamCameraCommand::clear_has_stop() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StreamCameraCommand::clear_stop() {
  stop_ = false;
  clear_has_stop();
}
inline bool StreamCameraCommand::stop() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.StreamCameraCommand.stop)
  return stop_;
}
inline void StreamCameraCommand::set_stop(bool value) {
  set_has_stop();
  stop_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.StreamCameraCommand.stop)
}

// -------------------------------------------------------------------

// CalibrationParameters

// required .gt.internal.msg.Point3 xyz = 1;
inline bool CalibrationParameters::has_xyz() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CalibrationParameters::set_has_xyz() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CalibrationParameters::clear_has_xyz() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CalibrationParameters::clear_xyz() {
  if (xyz_ != NULL) xyz_->::gt::internal::msg::Point3::Clear();
  clear_has_xyz();
}
inline const ::gt::internal::msg::Point3& CalibrationParameters::xyz() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.CalibrationParameters.xyz)
  return xyz_ != NULL ? *xyz_ : *default_instance_->xyz_;
}
inline ::gt::internal::msg::Point3* CalibrationParameters::mutable_xyz() {
  set_has_xyz();
  if (xyz_ == NULL) xyz_ = new ::gt::internal::msg::Point3;
  // @@protoc_insertion_point(field_mutable:gt.internal.msg.CalibrationParameters.xyz)
  return xyz_;
}
inline ::gt::internal::msg::Point3* CalibrationParameters::release_xyz() {
  clear_has_xyz();
  ::gt::internal::msg::Point3* temp = xyz_;
  xyz_ = NULL;
  return temp;
}
inline void CalibrationParameters::set_allocated_xyz(::gt::internal::msg::Point3* xyz) {
  delete xyz_;
  xyz_ = xyz;
  if (xyz) {
    set_has_xyz();
  } else {
    clear_has_xyz();
  }
  // @@protoc_insertion_point(field_set_allocated:gt.internal.msg.CalibrationParameters.xyz)
}

// required .gt.internal.msg.Point3 angles = 2;
inline bool CalibrationParameters::has_angles() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CalibrationParameters::set_has_angles() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CalibrationParameters::clear_has_angles() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CalibrationParameters::clear_angles() {
  if (angles_ != NULL) angles_->::gt::internal::msg::Point3::Clear();
  clear_has_angles();
}
inline const ::gt::internal::msg::Point3& CalibrationParameters::angles() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.CalibrationParameters.angles)
  return angles_ != NULL ? *angles_ : *default_instance_->angles_;
}
inline ::gt::internal::msg::Point3* CalibrationParameters::mutable_angles() {
  set_has_angles();
  if (angles_ == NULL) angles_ = new ::gt::internal::msg::Point3;
  // @@protoc_insertion_point(field_mutable:gt.internal.msg.CalibrationParameters.angles)
  return angles_;
}
inline ::gt::internal::msg::Point3* CalibrationParameters::release_angles() {
  clear_has_angles();
  ::gt::internal::msg::Point3* temp = angles_;
  angles_ = NULL;
  return temp;
}
inline void CalibrationParameters::set_allocated_angles(::gt::internal::msg::Point3* angles) {
  delete angles_;
  angles_ = angles;
  if (angles) {
    set_has_angles();
  } else {
    clear_has_angles();
  }
  // @@protoc_insertion_point(field_set_allocated:gt.internal.msg.CalibrationParameters.angles)
}

// required double focus = 3;
inline bool CalibrationParameters::has_focus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CalibrationParameters::set_has_focus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CalibrationParameters::clear_has_focus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CalibrationParameters::clear_focus() {
  focus_ = 0;
  clear_has_focus();
}
inline double CalibrationParameters::focus() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.CalibrationParameters.focus)
  return focus_;
}
inline void CalibrationParameters::set_focus(double value) {
  set_has_focus();
  focus_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.CalibrationParameters.focus)
}

// required double samples = 4;
inline bool CalibrationParameters::has_samples() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CalibrationParameters::set_has_samples() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CalibrationParameters::clear_has_samples() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CalibrationParameters::clear_samples() {
  samples_ = 0;
  clear_has_samples();
}
inline double CalibrationParameters::samples() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.CalibrationParameters.samples)
  return samples_;
}
inline void CalibrationParameters::set_samples(double value) {
  set_has_samples();
  samples_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.CalibrationParameters.samples)
}

// required double lines = 5;
inline bool CalibrationParameters::has_lines() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CalibrationParameters::set_has_lines() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CalibrationParameters::clear_has_lines() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CalibrationParameters::clear_lines() {
  lines_ = 0;
  clear_has_lines();
}
inline double CalibrationParameters::lines() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.CalibrationParameters.lines)
  return lines_;
}
inline void CalibrationParameters::set_lines(double value) {
  set_has_lines();
  lines_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.CalibrationParameters.lines)
}

// required double sample = 6;
inline bool CalibrationParameters::has_sample() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CalibrationParameters::set_has_sample() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CalibrationParameters::clear_has_sample() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CalibrationParameters::clear_sample() {
  sample_ = 0;
  clear_has_sample();
}
inline double CalibrationParameters::sample() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.CalibrationParameters.sample)
  return sample_;
}
inline void CalibrationParameters::set_sample(double value) {
  set_has_sample();
  sample_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.CalibrationParameters.sample)
}

// required double line = 7;
inline bool CalibrationParameters::has_line() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CalibrationParameters::set_has_line() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CalibrationParameters::clear_has_line() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CalibrationParameters::clear_line() {
  line_ = 0;
  clear_has_line();
}
inline double CalibrationParameters::line() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.CalibrationParameters.line)
  return line_;
}
inline void CalibrationParameters::set_line(double value) {
  set_has_line();
  line_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.CalibrationParameters.line)
}

// required double pixel_size = 8;
inline bool CalibrationParameters::has_pixel_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CalibrationParameters::set_has_pixel_size() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CalibrationParameters::clear_has_pixel_size() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CalibrationParameters::clear_pixel_size() {
  pixel_size_ = 0;
  clear_has_pixel_size();
}
inline double CalibrationParameters::pixel_size() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.CalibrationParameters.pixel_size)
  return pixel_size_;
}
inline void CalibrationParameters::set_pixel_size(double value) {
  set_has_pixel_size();
  pixel_size_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.CalibrationParameters.pixel_size)
}

// required double k1 = 9;
inline bool CalibrationParameters::has_k1() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CalibrationParameters::set_has_k1() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CalibrationParameters::clear_has_k1() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CalibrationParameters::clear_k1() {
  k1_ = 0;
  clear_has_k1();
}
inline double CalibrationParameters::k1() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.CalibrationParameters.k1)
  return k1_;
}
inline void CalibrationParameters::set_k1(double value) {
  set_has_k1();
  k1_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.CalibrationParameters.k1)
}

// required double k2 = 10;
inline bool CalibrationParameters::has_k2() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CalibrationParameters::set_has_k2() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CalibrationParameters::clear_has_k2() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CalibrationParameters::clear_k2() {
  k2_ = 0;
  clear_has_k2();
}
inline double CalibrationParameters::k2() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.CalibrationParameters.k2)
  return k2_;
}
inline void CalibrationParameters::set_k2(double value) {
  set_has_k2();
  k2_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.CalibrationParameters.k2)
}

// required double k3 = 11;
inline bool CalibrationParameters::has_k3() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CalibrationParameters::set_has_k3() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CalibrationParameters::clear_has_k3() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CalibrationParameters::clear_k3() {
  k3_ = 0;
  clear_has_k3();
}
inline double CalibrationParameters::k3() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.CalibrationParameters.k3)
  return k3_;
}
inline void CalibrationParameters::set_k3(double value) {
  set_has_k3();
  k3_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.CalibrationParameters.k3)
}

// required double p1 = 12;
inline bool CalibrationParameters::has_p1() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CalibrationParameters::set_has_p1() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CalibrationParameters::clear_has_p1() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CalibrationParameters::clear_p1() {
  p1_ = 0;
  clear_has_p1();
}
inline double CalibrationParameters::p1() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.CalibrationParameters.p1)
  return p1_;
}
inline void CalibrationParameters::set_p1(double value) {
  set_has_p1();
  p1_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.CalibrationParameters.p1)
}

// required double p2 = 13;
inline bool CalibrationParameters::has_p2() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CalibrationParameters::set_has_p2() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CalibrationParameters::clear_has_p2() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CalibrationParameters::clear_p2() {
  p2_ = 0;
  clear_has_p2();
}
inline double CalibrationParameters::p2() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.CalibrationParameters.p2)
  return p2_;
}
inline void CalibrationParameters::set_p2(double value) {
  set_has_p2();
  p2_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.CalibrationParameters.p2)
}

// required double b1 = 14;
inline bool CalibrationParameters::has_b1() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CalibrationParameters::set_has_b1() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CalibrationParameters::clear_has_b1() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CalibrationParameters::clear_b1() {
  b1_ = 0;
  clear_has_b1();
}
inline double CalibrationParameters::b1() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.CalibrationParameters.b1)
  return b1_;
}
inline void CalibrationParameters::set_b1(double value) {
  set_has_b1();
  b1_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.CalibrationParameters.b1)
}

// required double b2 = 15;
inline bool CalibrationParameters::has_b2() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CalibrationParameters::set_has_b2() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CalibrationParameters::clear_has_b2() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CalibrationParameters::clear_b2() {
  b2_ = 0;
  clear_has_b2();
}
inline double CalibrationParameters::b2() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.CalibrationParameters.b2)
  return b2_;
}
inline void CalibrationParameters::set_b2(double value) {
  set_has_b2();
  b2_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.CalibrationParameters.b2)
}

// -------------------------------------------------------------------

// BallMeasure

// required .gt.internal.msg.Point2 xy = 1;
inline bool BallMeasure::has_xy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BallMeasure::set_has_xy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BallMeasure::clear_has_xy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BallMeasure::clear_xy() {
  if (xy_ != NULL) xy_->::gt::internal::msg::Point2::Clear();
  clear_has_xy();
}
inline const ::gt::internal::msg::Point2& BallMeasure::xy() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.BallMeasure.xy)
  return xy_ != NULL ? *xy_ : *default_instance_->xy_;
}
inline ::gt::internal::msg::Point2* BallMeasure::mutable_xy() {
  set_has_xy();
  if (xy_ == NULL) xy_ = new ::gt::internal::msg::Point2;
  // @@protoc_insertion_point(field_mutable:gt.internal.msg.BallMeasure.xy)
  return xy_;
}
inline ::gt::internal::msg::Point2* BallMeasure::release_xy() {
  clear_has_xy();
  ::gt::internal::msg::Point2* temp = xy_;
  xy_ = NULL;
  return temp;
}
inline void BallMeasure::set_allocated_xy(::gt::internal::msg::Point2* xy) {
  delete xy_;
  xy_ = xy;
  if (xy) {
    set_has_xy();
  } else {
    clear_has_xy();
  }
  // @@protoc_insertion_point(field_set_allocated:gt.internal.msg.BallMeasure.xy)
}

// required bool valid = 2;
inline bool BallMeasure::has_valid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BallMeasure::set_has_valid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BallMeasure::clear_has_valid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BallMeasure::clear_valid() {
  valid_ = false;
  clear_has_valid();
}
inline bool BallMeasure::valid() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.BallMeasure.valid)
  return valid_;
}
inline void BallMeasure::set_valid(bool value) {
  set_has_valid();
  valid_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.BallMeasure.valid)
}

// required int64 time = 3;
inline bool BallMeasure::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BallMeasure::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BallMeasure::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BallMeasure::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 BallMeasure::time() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.BallMeasure.time)
  return time_;
}
inline void BallMeasure::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.BallMeasure.time)
}

// required .gt.internal.msg.BallEvent event = 4;
inline bool BallMeasure::has_event() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BallMeasure::set_has_event() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BallMeasure::clear_has_event() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BallMeasure::clear_event() {
  event_ = 0;
  clear_has_event();
}
inline ::gt::internal::msg::BallEvent BallMeasure::event() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.BallMeasure.event)
  return static_cast< ::gt::internal::msg::BallEvent >(event_);
}
inline void BallMeasure::set_event(::gt::internal::msg::BallEvent value) {
  assert(::gt::internal::msg::BallEvent_IsValid(value));
  set_has_event();
  event_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.BallMeasure.event)
}

// required bool is_rebound = 5;
inline bool BallMeasure::has_is_rebound() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BallMeasure::set_has_is_rebound() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BallMeasure::clear_has_is_rebound() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BallMeasure::clear_is_rebound() {
  is_rebound_ = false;
  clear_has_is_rebound();
}
inline bool BallMeasure::is_rebound() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.BallMeasure.is_rebound)
  return is_rebound_;
}
inline void BallMeasure::set_is_rebound(bool value) {
  set_has_is_rebound();
  is_rebound_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.BallMeasure.is_rebound)
}

// required bool is_from_out_of_frame = 6;
inline bool BallMeasure::has_is_from_out_of_frame() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BallMeasure::set_has_is_from_out_of_frame() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BallMeasure::clear_has_is_from_out_of_frame() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BallMeasure::clear_is_from_out_of_frame() {
  is_from_out_of_frame_ = false;
  clear_has_is_from_out_of_frame();
}
inline bool BallMeasure::is_from_out_of_frame() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.BallMeasure.is_from_out_of_frame)
  return is_from_out_of_frame_;
}
inline void BallMeasure::set_is_from_out_of_frame(bool value) {
  set_has_is_from_out_of_frame();
  is_from_out_of_frame_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.BallMeasure.is_from_out_of_frame)
}

// required bool is_lost_out_of_frame = 7;
inline bool BallMeasure::has_is_lost_out_of_frame() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BallMeasure::set_has_is_lost_out_of_frame() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BallMeasure::clear_has_is_lost_out_of_frame() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BallMeasure::clear_is_lost_out_of_frame() {
  is_lost_out_of_frame_ = false;
  clear_has_is_lost_out_of_frame();
}
inline bool BallMeasure::is_lost_out_of_frame() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.BallMeasure.is_lost_out_of_frame)
  return is_lost_out_of_frame_;
}
inline void BallMeasure::set_is_lost_out_of_frame(bool value) {
  set_has_is_lost_out_of_frame();
  is_lost_out_of_frame_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.BallMeasure.is_lost_out_of_frame)
}

// required bool is_high_ball = 8;
inline bool BallMeasure::has_is_high_ball() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BallMeasure::set_has_is_high_ball() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BallMeasure::clear_has_is_high_ball() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BallMeasure::clear_is_high_ball() {
  is_high_ball_ = false;
  clear_has_is_high_ball();
}
inline bool BallMeasure::is_high_ball() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.BallMeasure.is_high_ball)
  return is_high_ball_;
}
inline void BallMeasure::set_is_high_ball(bool value) {
  set_has_is_high_ball();
  is_high_ball_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.BallMeasure.is_high_ball)
}

// required bool is_ped_intersect = 9;
inline bool BallMeasure::has_is_ped_intersect() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BallMeasure::set_has_is_ped_intersect() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BallMeasure::clear_has_is_ped_intersect() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BallMeasure::clear_is_ped_intersect() {
  is_ped_intersect_ = false;
  clear_has_is_ped_intersect();
}
inline bool BallMeasure::is_ped_intersect() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.BallMeasure.is_ped_intersect)
  return is_ped_intersect_;
}
inline void BallMeasure::set_is_ped_intersect(bool value) {
  set_has_is_ped_intersect();
  is_ped_intersect_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.BallMeasure.is_ped_intersect)
}

// -------------------------------------------------------------------

// BatMeasure

// required bool was_swing = 1;
inline bool BatMeasure::has_was_swing() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatMeasure::set_has_was_swing() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BatMeasure::clear_has_was_swing() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BatMeasure::clear_was_swing() {
  was_swing_ = false;
  clear_has_was_swing();
}
inline bool BatMeasure::was_swing() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.BatMeasure.was_swing)
  return was_swing_;
}
inline void BatMeasure::set_was_swing(bool value) {
  set_has_was_swing();
  was_swing_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.BatMeasure.was_swing)
}

// repeated .gt.internal.msg.Point2 measures = 2;
inline int BatMeasure::measures_size() const {
  return measures_.size();
}
inline void BatMeasure::clear_measures() {
  measures_.Clear();
}
inline const ::gt::internal::msg::Point2& BatMeasure::measures(int index) const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.BatMeasure.measures)
  return measures_.Get(index);
}
inline ::gt::internal::msg::Point2* BatMeasure::mutable_measures(int index) {
  // @@protoc_insertion_point(field_mutable:gt.internal.msg.BatMeasure.measures)
  return measures_.Mutable(index);
}
inline ::gt::internal::msg::Point2* BatMeasure::add_measures() {
  // @@protoc_insertion_point(field_add:gt.internal.msg.BatMeasure.measures)
  return measures_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gt::internal::msg::Point2 >&
BatMeasure::measures() const {
  // @@protoc_insertion_point(field_list:gt.internal.msg.BatMeasure.measures)
  return measures_;
}
inline ::google::protobuf::RepeatedPtrField< ::gt::internal::msg::Point2 >*
BatMeasure::mutable_measures() {
  // @@protoc_insertion_point(field_mutable_list:gt.internal.msg.BatMeasure.measures)
  return &measures_;
}

// repeated .gt.internal.msg.Rect bboxes = 3;
inline int BatMeasure::bboxes_size() const {
  return bboxes_.size();
}
inline void BatMeasure::clear_bboxes() {
  bboxes_.Clear();
}
inline const ::gt::internal::msg::Rect& BatMeasure::bboxes(int index) const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.BatMeasure.bboxes)
  return bboxes_.Get(index);
}
inline ::gt::internal::msg::Rect* BatMeasure::mutable_bboxes(int index) {
  // @@protoc_insertion_point(field_mutable:gt.internal.msg.BatMeasure.bboxes)
  return bboxes_.Mutable(index);
}
inline ::gt::internal::msg::Rect* BatMeasure::add_bboxes() {
  // @@protoc_insertion_point(field_add:gt.internal.msg.BatMeasure.bboxes)
  return bboxes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gt::internal::msg::Rect >&
BatMeasure::bboxes() const {
  // @@protoc_insertion_point(field_list:gt.internal.msg.BatMeasure.bboxes)
  return bboxes_;
}
inline ::google::protobuf::RepeatedPtrField< ::gt::internal::msg::Rect >*
BatMeasure::mutable_bboxes() {
  // @@protoc_insertion_point(field_mutable_list:gt.internal.msg.BatMeasure.bboxes)
  return &bboxes_;
}

// -------------------------------------------------------------------

// OutOfFrameInfo

// required .gt.internal.msg.OutOfFrame dir = 1;
inline bool OutOfFrameInfo::has_dir() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OutOfFrameInfo::set_has_dir() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OutOfFrameInfo::clear_has_dir() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OutOfFrameInfo::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline ::gt::internal::msg::OutOfFrame OutOfFrameInfo::dir() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.OutOfFrameInfo.dir)
  return static_cast< ::gt::internal::msg::OutOfFrame >(dir_);
}
inline void OutOfFrameInfo::set_dir(::gt::internal::msg::OutOfFrame value) {
  assert(::gt::internal::msg::OutOfFrame_IsValid(value));
  set_has_dir();
  dir_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.OutOfFrameInfo.dir)
}

// optional .gt.internal.msg.BallMeasure ball_measure = 2;
inline bool OutOfFrameInfo::has_ball_measure() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OutOfFrameInfo::set_has_ball_measure() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OutOfFrameInfo::clear_has_ball_measure() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OutOfFrameInfo::clear_ball_measure() {
  if (ball_measure_ != NULL) ball_measure_->::gt::internal::msg::BallMeasure::Clear();
  clear_has_ball_measure();
}
inline const ::gt::internal::msg::BallMeasure& OutOfFrameInfo::ball_measure() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.OutOfFrameInfo.ball_measure)
  return ball_measure_ != NULL ? *ball_measure_ : *default_instance_->ball_measure_;
}
inline ::gt::internal::msg::BallMeasure* OutOfFrameInfo::mutable_ball_measure() {
  set_has_ball_measure();
  if (ball_measure_ == NULL) ball_measure_ = new ::gt::internal::msg::BallMeasure;
  // @@protoc_insertion_point(field_mutable:gt.internal.msg.OutOfFrameInfo.ball_measure)
  return ball_measure_;
}
inline ::gt::internal::msg::BallMeasure* OutOfFrameInfo::release_ball_measure() {
  clear_has_ball_measure();
  ::gt::internal::msg::BallMeasure* temp = ball_measure_;
  ball_measure_ = NULL;
  return temp;
}
inline void OutOfFrameInfo::set_allocated_ball_measure(::gt::internal::msg::BallMeasure* ball_measure) {
  delete ball_measure_;
  ball_measure_ = ball_measure;
  if (ball_measure) {
    set_has_ball_measure();
  } else {
    clear_has_ball_measure();
  }
  // @@protoc_insertion_point(field_set_allocated:gt.internal.msg.OutOfFrameInfo.ball_measure)
}

// optional .gt.internal.msg.PedestrianMeasure ped_measure = 3;
inline bool OutOfFrameInfo::has_ped_measure() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OutOfFrameInfo::set_has_ped_measure() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OutOfFrameInfo::clear_has_ped_measure() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OutOfFrameInfo::clear_ped_measure() {
  if (ped_measure_ != NULL) ped_measure_->::gt::internal::msg::PedestrianMeasure::Clear();
  clear_has_ped_measure();
}
inline const ::gt::internal::msg::PedestrianMeasure& OutOfFrameInfo::ped_measure() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.OutOfFrameInfo.ped_measure)
  return ped_measure_ != NULL ? *ped_measure_ : *default_instance_->ped_measure_;
}
inline ::gt::internal::msg::PedestrianMeasure* OutOfFrameInfo::mutable_ped_measure() {
  set_has_ped_measure();
  if (ped_measure_ == NULL) ped_measure_ = new ::gt::internal::msg::PedestrianMeasure;
  // @@protoc_insertion_point(field_mutable:gt.internal.msg.OutOfFrameInfo.ped_measure)
  return ped_measure_;
}
inline ::gt::internal::msg::PedestrianMeasure* OutOfFrameInfo::release_ped_measure() {
  clear_has_ped_measure();
  ::gt::internal::msg::PedestrianMeasure* temp = ped_measure_;
  ped_measure_ = NULL;
  return temp;
}
inline void OutOfFrameInfo::set_allocated_ped_measure(::gt::internal::msg::PedestrianMeasure* ped_measure) {
  delete ped_measure_;
  ped_measure_ = ped_measure;
  if (ped_measure) {
    set_has_ped_measure();
  } else {
    clear_has_ped_measure();
  }
  // @@protoc_insertion_point(field_set_allocated:gt.internal.msg.OutOfFrameInfo.ped_measure)
}

// -------------------------------------------------------------------

// RecognizeData

// repeated .gt.internal.msg.BallMeasure data = 1;
inline int RecognizeData::data_size() const {
  return data_.size();
}
inline void RecognizeData::clear_data() {
  data_.Clear();
}
inline const ::gt::internal::msg::BallMeasure& RecognizeData::data(int index) const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.RecognizeData.data)
  return data_.Get(index);
}
inline ::gt::internal::msg::BallMeasure* RecognizeData::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:gt.internal.msg.RecognizeData.data)
  return data_.Mutable(index);
}
inline ::gt::internal::msg::BallMeasure* RecognizeData::add_data() {
  // @@protoc_insertion_point(field_add:gt.internal.msg.RecognizeData.data)
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gt::internal::msg::BallMeasure >&
RecognizeData::data() const {
  // @@protoc_insertion_point(field_list:gt.internal.msg.RecognizeData.data)
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::gt::internal::msg::BallMeasure >*
RecognizeData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:gt.internal.msg.RecognizeData.data)
  return &data_;
}

// optional int64 start_time = 2;
inline bool RecognizeData::has_start_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecognizeData::set_has_start_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecognizeData::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecognizeData::clear_start_time() {
  start_time_ = GOOGLE_LONGLONG(0);
  clear_has_start_time();
}
inline ::google::protobuf::int64 RecognizeData::start_time() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.RecognizeData.start_time)
  return start_time_;
}
inline void RecognizeData::set_start_time(::google::protobuf::int64 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.RecognizeData.start_time)
}

// optional bool restored_out_of_frame = 3;
inline bool RecognizeData::has_restored_out_of_frame() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecognizeData::set_has_restored_out_of_frame() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecognizeData::clear_has_restored_out_of_frame() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecognizeData::clear_restored_out_of_frame() {
  restored_out_of_frame_ = false;
  clear_has_restored_out_of_frame();
}
inline bool RecognizeData::restored_out_of_frame() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.RecognizeData.restored_out_of_frame)
  return restored_out_of_frame_;
}
inline void RecognizeData::set_restored_out_of_frame(bool value) {
  set_has_restored_out_of_frame();
  restored_out_of_frame_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.RecognizeData.restored_out_of_frame)
}

// optional bool restored_straight = 4;
inline bool RecognizeData::has_restored_straight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecognizeData::set_has_restored_straight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecognizeData::clear_has_restored_straight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecognizeData::clear_restored_straight() {
  restored_straight_ = false;
  clear_has_restored_straight();
}
inline bool RecognizeData::restored_straight() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.RecognizeData.restored_straight)
  return restored_straight_;
}
inline void RecognizeData::set_restored_straight(bool value) {
  set_has_restored_straight();
  restored_straight_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.RecognizeData.restored_straight)
}

// -------------------------------------------------------------------

// PedestrianMeasure

// required .gt.internal.msg.Rect r = 1;
inline bool PedestrianMeasure::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PedestrianMeasure::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PedestrianMeasure::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PedestrianMeasure::clear_r() {
  if (r_ != NULL) r_->::gt::internal::msg::Rect::Clear();
  clear_has_r();
}
inline const ::gt::internal::msg::Rect& PedestrianMeasure::r() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.PedestrianMeasure.r)
  return r_ != NULL ? *r_ : *default_instance_->r_;
}
inline ::gt::internal::msg::Rect* PedestrianMeasure::mutable_r() {
  set_has_r();
  if (r_ == NULL) r_ = new ::gt::internal::msg::Rect;
  // @@protoc_insertion_point(field_mutable:gt.internal.msg.PedestrianMeasure.r)
  return r_;
}
inline ::gt::internal::msg::Rect* PedestrianMeasure::release_r() {
  clear_has_r();
  ::gt::internal::msg::Rect* temp = r_;
  r_ = NULL;
  return temp;
}
inline void PedestrianMeasure::set_allocated_r(::gt::internal::msg::Rect* r) {
  delete r_;
  r_ = r;
  if (r) {
    set_has_r();
  } else {
    clear_has_r();
  }
  // @@protoc_insertion_point(field_set_allocated:gt.internal.msg.PedestrianMeasure.r)
}

// required .gt.internal.msg.Point3 p = 2;
inline bool PedestrianMeasure::has_p() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PedestrianMeasure::set_has_p() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PedestrianMeasure::clear_has_p() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PedestrianMeasure::clear_p() {
  if (p_ != NULL) p_->::gt::internal::msg::Point3::Clear();
  clear_has_p();
}
inline const ::gt::internal::msg::Point3& PedestrianMeasure::p() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.PedestrianMeasure.p)
  return p_ != NULL ? *p_ : *default_instance_->p_;
}
inline ::gt::internal::msg::Point3* PedestrianMeasure::mutable_p() {
  set_has_p();
  if (p_ == NULL) p_ = new ::gt::internal::msg::Point3;
  // @@protoc_insertion_point(field_mutable:gt.internal.msg.PedestrianMeasure.p)
  return p_;
}
inline ::gt::internal::msg::Point3* PedestrianMeasure::release_p() {
  clear_has_p();
  ::gt::internal::msg::Point3* temp = p_;
  p_ = NULL;
  return temp;
}
inline void PedestrianMeasure::set_allocated_p(::gt::internal::msg::Point3* p) {
  delete p_;
  p_ = p;
  if (p) {
    set_has_p();
  } else {
    clear_has_p();
  }
  // @@protoc_insertion_point(field_set_allocated:gt.internal.msg.PedestrianMeasure.p)
}

// required .gt.internal.msg.PlayerPosition pos = 3;
inline bool PedestrianMeasure::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PedestrianMeasure::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PedestrianMeasure::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PedestrianMeasure::clear_pos() {
  pos_ = 1;
  clear_has_pos();
}
inline ::gt::internal::msg::PlayerPosition PedestrianMeasure::pos() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.PedestrianMeasure.pos)
  return static_cast< ::gt::internal::msg::PlayerPosition >(pos_);
}
inline void PedestrianMeasure::set_pos(::gt::internal::msg::PlayerPosition value) {
  assert(::gt::internal::msg::PlayerPosition_IsValid(value));
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.PedestrianMeasure.pos)
}

// -------------------------------------------------------------------

// CameraOptions

// optional .gt.internal.msg.HardwareCameraParameters hw_params = 1;
inline bool CameraOptions::has_hw_params() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraOptions::set_has_hw_params() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraOptions::clear_has_hw_params() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraOptions::clear_hw_params() {
  if (hw_params_ != NULL) hw_params_->::gt::internal::msg::HardwareCameraParameters::Clear();
  clear_has_hw_params();
}
inline const ::gt::internal::msg::HardwareCameraParameters& CameraOptions::hw_params() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.CameraOptions.hw_params)
  return hw_params_ != NULL ? *hw_params_ : *default_instance_->hw_params_;
}
inline ::gt::internal::msg::HardwareCameraParameters* CameraOptions::mutable_hw_params() {
  set_has_hw_params();
  if (hw_params_ == NULL) hw_params_ = new ::gt::internal::msg::HardwareCameraParameters;
  // @@protoc_insertion_point(field_mutable:gt.internal.msg.CameraOptions.hw_params)
  return hw_params_;
}
inline ::gt::internal::msg::HardwareCameraParameters* CameraOptions::release_hw_params() {
  clear_has_hw_params();
  ::gt::internal::msg::HardwareCameraParameters* temp = hw_params_;
  hw_params_ = NULL;
  return temp;
}
inline void CameraOptions::set_allocated_hw_params(::gt::internal::msg::HardwareCameraParameters* hw_params) {
  delete hw_params_;
  hw_params_ = hw_params;
  if (hw_params) {
    set_has_hw_params();
  } else {
    clear_has_hw_params();
  }
  // @@protoc_insertion_point(field_set_allocated:gt.internal.msg.CameraOptions.hw_params)
}

// optional .gt.internal.msg.PictureCameraParameters p_params = 2;
inline bool CameraOptions::has_p_params() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraOptions::set_has_p_params() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CameraOptions::clear_has_p_params() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CameraOptions::clear_p_params() {
  if (p_params_ != NULL) p_params_->::gt::internal::msg::PictureCameraParameters::Clear();
  clear_has_p_params();
}
inline const ::gt::internal::msg::PictureCameraParameters& CameraOptions::p_params() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.CameraOptions.p_params)
  return p_params_ != NULL ? *p_params_ : *default_instance_->p_params_;
}
inline ::gt::internal::msg::PictureCameraParameters* CameraOptions::mutable_p_params() {
  set_has_p_params();
  if (p_params_ == NULL) p_params_ = new ::gt::internal::msg::PictureCameraParameters;
  // @@protoc_insertion_point(field_mutable:gt.internal.msg.CameraOptions.p_params)
  return p_params_;
}
inline ::gt::internal::msg::PictureCameraParameters* CameraOptions::release_p_params() {
  clear_has_p_params();
  ::gt::internal::msg::PictureCameraParameters* temp = p_params_;
  p_params_ = NULL;
  return temp;
}
inline void CameraOptions::set_allocated_p_params(::gt::internal::msg::PictureCameraParameters* p_params) {
  delete p_params_;
  p_params_ = p_params;
  if (p_params) {
    set_has_p_params();
  } else {
    clear_has_p_params();
  }
  // @@protoc_insertion_point(field_set_allocated:gt.internal.msg.CameraOptions.p_params)
}

// optional .gt.internal.msg.AutoExposureParameters auto_exp_params = 3;
inline bool CameraOptions::has_auto_exp_params() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CameraOptions::set_has_auto_exp_params() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CameraOptions::clear_has_auto_exp_params() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CameraOptions::clear_auto_exp_params() {
  if (auto_exp_params_ != NULL) auto_exp_params_->::gt::internal::msg::AutoExposureParameters::Clear();
  clear_has_auto_exp_params();
}
inline const ::gt::internal::msg::AutoExposureParameters& CameraOptions::auto_exp_params() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.CameraOptions.auto_exp_params)
  return auto_exp_params_ != NULL ? *auto_exp_params_ : *default_instance_->auto_exp_params_;
}
inline ::gt::internal::msg::AutoExposureParameters* CameraOptions::mutable_auto_exp_params() {
  set_has_auto_exp_params();
  if (auto_exp_params_ == NULL) auto_exp_params_ = new ::gt::internal::msg::AutoExposureParameters;
  // @@protoc_insertion_point(field_mutable:gt.internal.msg.CameraOptions.auto_exp_params)
  return auto_exp_params_;
}
inline ::gt::internal::msg::AutoExposureParameters* CameraOptions::release_auto_exp_params() {
  clear_has_auto_exp_params();
  ::gt::internal::msg::AutoExposureParameters* temp = auto_exp_params_;
  auto_exp_params_ = NULL;
  return temp;
}
inline void CameraOptions::set_allocated_auto_exp_params(::gt::internal::msg::AutoExposureParameters* auto_exp_params) {
  delete auto_exp_params_;
  auto_exp_params_ = auto_exp_params;
  if (auto_exp_params) {
    set_has_auto_exp_params();
  } else {
    clear_has_auto_exp_params();
  }
  // @@protoc_insertion_point(field_set_allocated:gt.internal.msg.CameraOptions.auto_exp_params)
}

// optional .gt.internal.msg.CalibrationParameters calib_params = 4;
inline bool CameraOptions::has_calib_params() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CameraOptions::set_has_calib_params() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CameraOptions::clear_has_calib_params() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CameraOptions::clear_calib_params() {
  if (calib_params_ != NULL) calib_params_->::gt::internal::msg::CalibrationParameters::Clear();
  clear_has_calib_params();
}
inline const ::gt::internal::msg::CalibrationParameters& CameraOptions::calib_params() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.CameraOptions.calib_params)
  return calib_params_ != NULL ? *calib_params_ : *default_instance_->calib_params_;
}
inline ::gt::internal::msg::CalibrationParameters* CameraOptions::mutable_calib_params() {
  set_has_calib_params();
  if (calib_params_ == NULL) calib_params_ = new ::gt::internal::msg::CalibrationParameters;
  // @@protoc_insertion_point(field_mutable:gt.internal.msg.CameraOptions.calib_params)
  return calib_params_;
}
inline ::gt::internal::msg::CalibrationParameters* CameraOptions::release_calib_params() {
  clear_has_calib_params();
  ::gt::internal::msg::CalibrationParameters* temp = calib_params_;
  calib_params_ = NULL;
  return temp;
}
inline void CameraOptions::set_allocated_calib_params(::gt::internal::msg::CalibrationParameters* calib_params) {
  delete calib_params_;
  calib_params_ = calib_params;
  if (calib_params) {
    set_has_calib_params();
  } else {
    clear_has_calib_params();
  }
  // @@protoc_insertion_point(field_set_allocated:gt.internal.msg.CameraOptions.calib_params)
}

// optional .gt.internal.msg.RecROIs rec_rois = 5;
inline bool CameraOptions::has_rec_rois() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CameraOptions::set_has_rec_rois() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CameraOptions::clear_has_rec_rois() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CameraOptions::clear_rec_rois() {
  if (rec_rois_ != NULL) rec_rois_->::gt::internal::msg::RecROIs::Clear();
  clear_has_rec_rois();
}
inline const ::gt::internal::msg::RecROIs& CameraOptions::rec_rois() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.CameraOptions.rec_rois)
  return rec_rois_ != NULL ? *rec_rois_ : *default_instance_->rec_rois_;
}
inline ::gt::internal::msg::RecROIs* CameraOptions::mutable_rec_rois() {
  set_has_rec_rois();
  if (rec_rois_ == NULL) rec_rois_ = new ::gt::internal::msg::RecROIs;
  // @@protoc_insertion_point(field_mutable:gt.internal.msg.CameraOptions.rec_rois)
  return rec_rois_;
}
inline ::gt::internal::msg::RecROIs* CameraOptions::release_rec_rois() {
  clear_has_rec_rois();
  ::gt::internal::msg::RecROIs* temp = rec_rois_;
  rec_rois_ = NULL;
  return temp;
}
inline void CameraOptions::set_allocated_rec_rois(::gt::internal::msg::RecROIs* rec_rois) {
  delete rec_rois_;
  rec_rois_ = rec_rois;
  if (rec_rois) {
    set_has_rec_rois();
  } else {
    clear_has_rec_rois();
  }
  // @@protoc_insertion_point(field_set_allocated:gt.internal.msg.CameraOptions.rec_rois)
}

// optional bool ball_recognize_enable = 6;
inline bool CameraOptions::has_ball_recognize_enable() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CameraOptions::set_has_ball_recognize_enable() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CameraOptions::clear_has_ball_recognize_enable() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CameraOptions::clear_ball_recognize_enable() {
  ball_recognize_enable_ = false;
  clear_has_ball_recognize_enable();
}
inline bool CameraOptions::ball_recognize_enable() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.CameraOptions.ball_recognize_enable)
  return ball_recognize_enable_;
}
inline void CameraOptions::set_ball_recognize_enable(bool value) {
  set_has_ball_recognize_enable();
  ball_recognize_enable_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.CameraOptions.ball_recognize_enable)
}

// optional bool debug_enable = 7;
inline bool CameraOptions::has_debug_enable() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CameraOptions::set_has_debug_enable() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CameraOptions::clear_has_debug_enable() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CameraOptions::clear_debug_enable() {
  debug_enable_ = false;
  clear_has_debug_enable();
}
inline bool CameraOptions::debug_enable() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.CameraOptions.debug_enable)
  return debug_enable_;
}
inline void CameraOptions::set_debug_enable(bool value) {
  set_has_debug_enable();
  debug_enable_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.CameraOptions.debug_enable)
}

// optional .gt.internal.msg.RecognizeParameters rec_params = 8;
inline bool CameraOptions::has_rec_params() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CameraOptions::set_has_rec_params() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CameraOptions::clear_has_rec_params() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CameraOptions::clear_rec_params() {
  if (rec_params_ != NULL) rec_params_->::gt::internal::msg::RecognizeParameters::Clear();
  clear_has_rec_params();
}
inline const ::gt::internal::msg::RecognizeParameters& CameraOptions::rec_params() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.CameraOptions.rec_params)
  return rec_params_ != NULL ? *rec_params_ : *default_instance_->rec_params_;
}
inline ::gt::internal::msg::RecognizeParameters* CameraOptions::mutable_rec_params() {
  set_has_rec_params();
  if (rec_params_ == NULL) rec_params_ = new ::gt::internal::msg::RecognizeParameters;
  // @@protoc_insertion_point(field_mutable:gt.internal.msg.CameraOptions.rec_params)
  return rec_params_;
}
inline ::gt::internal::msg::RecognizeParameters* CameraOptions::release_rec_params() {
  clear_has_rec_params();
  ::gt::internal::msg::RecognizeParameters* temp = rec_params_;
  rec_params_ = NULL;
  return temp;
}
inline void CameraOptions::set_allocated_rec_params(::gt::internal::msg::RecognizeParameters* rec_params) {
  delete rec_params_;
  rec_params_ = rec_params;
  if (rec_params) {
    set_has_rec_params();
  } else {
    clear_has_rec_params();
  }
  // @@protoc_insertion_point(field_set_allocated:gt.internal.msg.CameraOptions.rec_params)
}

// optional string desc = 9;
inline bool CameraOptions::has_desc() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CameraOptions::set_has_desc() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CameraOptions::clear_has_desc() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CameraOptions::clear_desc() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& CameraOptions::desc() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.CameraOptions.desc)
  return *desc_;
}
inline void CameraOptions::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set:gt.internal.msg.CameraOptions.desc)
}
inline void CameraOptions::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set_char:gt.internal.msg.CameraOptions.desc)
}
inline void CameraOptions::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gt.internal.msg.CameraOptions.desc)
}
inline ::std::string* CameraOptions::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gt.internal.msg.CameraOptions.desc)
  return desc_;
}
inline ::std::string* CameraOptions::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CameraOptions::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gt.internal.msg.CameraOptions.desc)
}

// optional .gt.internal.msg.CameraType cam_type = 10;
inline bool CameraOptions::has_cam_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CameraOptions::set_has_cam_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CameraOptions::clear_has_cam_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CameraOptions::clear_cam_type() {
  cam_type_ = 1;
  clear_has_cam_type();
}
inline ::gt::internal::msg::CameraType CameraOptions::cam_type() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.CameraOptions.cam_type)
  return static_cast< ::gt::internal::msg::CameraType >(cam_type_);
}
inline void CameraOptions::set_cam_type(::gt::internal::msg::CameraType value) {
  assert(::gt::internal::msg::CameraType_IsValid(value));
  set_has_cam_type();
  cam_type_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.CameraOptions.cam_type)
}

// required string id = 11;
inline bool CameraOptions::has_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CameraOptions::set_has_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CameraOptions::clear_has_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CameraOptions::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& CameraOptions::id() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.CameraOptions.id)
  return *id_;
}
inline void CameraOptions::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:gt.internal.msg.CameraOptions.id)
}
inline void CameraOptions::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:gt.internal.msg.CameraOptions.id)
}
inline void CameraOptions::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gt.internal.msg.CameraOptions.id)
}
inline ::std::string* CameraOptions::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gt.internal.msg.CameraOptions.id)
  return id_;
}
inline ::std::string* CameraOptions::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CameraOptions::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gt.internal.msg.CameraOptions.id)
}

// optional bool save_parameters = 12;
inline bool CameraOptions::has_save_parameters() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CameraOptions::set_has_save_parameters() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CameraOptions::clear_has_save_parameters() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CameraOptions::clear_save_parameters() {
  save_parameters_ = false;
  clear_has_save_parameters();
}
inline bool CameraOptions::save_parameters() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.CameraOptions.save_parameters)
  return save_parameters_;
}
inline void CameraOptions::set_save_parameters(bool value) {
  set_has_save_parameters();
  save_parameters_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.CameraOptions.save_parameters)
}

// optional .gt.internal.msg.StreamCameraParameters stream_params = 13;
inline bool CameraOptions::has_stream_params() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CameraOptions::set_has_stream_params() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CameraOptions::clear_has_stream_params() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CameraOptions::clear_stream_params() {
  if (stream_params_ != NULL) stream_params_->::gt::internal::msg::StreamCameraParameters::Clear();
  clear_has_stream_params();
}
inline const ::gt::internal::msg::StreamCameraParameters& CameraOptions::stream_params() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.CameraOptions.stream_params)
  return stream_params_ != NULL ? *stream_params_ : *default_instance_->stream_params_;
}
inline ::gt::internal::msg::StreamCameraParameters* CameraOptions::mutable_stream_params() {
  set_has_stream_params();
  if (stream_params_ == NULL) stream_params_ = new ::gt::internal::msg::StreamCameraParameters;
  // @@protoc_insertion_point(field_mutable:gt.internal.msg.CameraOptions.stream_params)
  return stream_params_;
}
inline ::gt::internal::msg::StreamCameraParameters* CameraOptions::release_stream_params() {
  clear_has_stream_params();
  ::gt::internal::msg::StreamCameraParameters* temp = stream_params_;
  stream_params_ = NULL;
  return temp;
}
inline void CameraOptions::set_allocated_stream_params(::gt::internal::msg::StreamCameraParameters* stream_params) {
  delete stream_params_;
  stream_params_ = stream_params;
  if (stream_params) {
    set_has_stream_params();
  } else {
    clear_has_stream_params();
  }
  // @@protoc_insertion_point(field_set_allocated:gt.internal.msg.CameraOptions.stream_params)
}

// optional bool auto_exposure_enable = 14;
inline bool CameraOptions::has_auto_exposure_enable() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CameraOptions::set_has_auto_exposure_enable() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CameraOptions::clear_has_auto_exposure_enable() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CameraOptions::clear_auto_exposure_enable() {
  auto_exposure_enable_ = false;
  clear_has_auto_exposure_enable();
}
inline bool CameraOptions::auto_exposure_enable() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.CameraOptions.auto_exposure_enable)
  return auto_exposure_enable_;
}
inline void CameraOptions::set_auto_exposure_enable(bool value) {
  set_has_auto_exposure_enable();
  auto_exposure_enable_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.CameraOptions.auto_exposure_enable)
}

// required bool main_add_mode = 15;
inline bool CameraOptions::has_main_add_mode() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CameraOptions::set_has_main_add_mode() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CameraOptions::clear_has_main_add_mode() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CameraOptions::clear_main_add_mode() {
  main_add_mode_ = false;
  clear_has_main_add_mode();
}
inline bool CameraOptions::main_add_mode() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.CameraOptions.main_add_mode)
  return main_add_mode_;
}
inline void CameraOptions::set_main_add_mode(bool value) {
  set_has_main_add_mode();
  main_add_mode_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.CameraOptions.main_add_mode)
}

// optional int32 main_each = 16;
inline bool CameraOptions::has_main_each() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CameraOptions::set_has_main_each() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CameraOptions::clear_has_main_each() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CameraOptions::clear_main_each() {
  main_each_ = 0;
  clear_has_main_each();
}
inline ::google::protobuf::int32 CameraOptions::main_each() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.CameraOptions.main_each)
  return main_each_;
}
inline void CameraOptions::set_main_each(::google::protobuf::int32 value) {
  set_has_main_each();
  main_each_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.CameraOptions.main_each)
}

// optional bool debug_mode = 17;
inline bool CameraOptions::has_debug_mode() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CameraOptions::set_has_debug_mode() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CameraOptions::clear_has_debug_mode() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CameraOptions::clear_debug_mode() {
  debug_mode_ = false;
  clear_has_debug_mode();
}
inline bool CameraOptions::debug_mode() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.CameraOptions.debug_mode)
  return debug_mode_;
}
inline void CameraOptions::set_debug_mode(bool value) {
  set_has_debug_mode();
  debug_mode_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.CameraOptions.debug_mode)
}

// -------------------------------------------------------------------

// ServerOptions

// optional bool write_to_disk = 1;
inline bool ServerOptions::has_write_to_disk() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerOptions::set_has_write_to_disk() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerOptions::clear_has_write_to_disk() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerOptions::clear_write_to_disk() {
  write_to_disk_ = false;
  clear_has_write_to_disk();
}
inline bool ServerOptions::write_to_disk() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.ServerOptions.write_to_disk)
  return write_to_disk_;
}
inline void ServerOptions::set_write_to_disk(bool value) {
  set_has_write_to_disk();
  write_to_disk_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.ServerOptions.write_to_disk)
}

// optional bool write_uncompressed = 2;
inline bool ServerOptions::has_write_uncompressed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerOptions::set_has_write_uncompressed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerOptions::clear_has_write_uncompressed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerOptions::clear_write_uncompressed() {
  write_uncompressed_ = false;
  clear_has_write_uncompressed();
}
inline bool ServerOptions::write_uncompressed() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.ServerOptions.write_uncompressed)
  return write_uncompressed_;
}
inline void ServerOptions::set_write_uncompressed(bool value) {
  set_has_write_uncompressed();
  write_uncompressed_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.ServerOptions.write_uncompressed)
}

// -------------------------------------------------------------------

// FrameTime

// optional int64 computer_time = 1;
inline bool FrameTime::has_computer_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FrameTime::set_has_computer_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FrameTime::clear_has_computer_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FrameTime::clear_computer_time() {
  computer_time_ = GOOGLE_LONGLONG(0);
  clear_has_computer_time();
}
inline ::google::protobuf::int64 FrameTime::computer_time() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.FrameTime.computer_time)
  return computer_time_;
}
inline void FrameTime::set_computer_time(::google::protobuf::int64 value) {
  set_has_computer_time();
  computer_time_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.FrameTime.computer_time)
}

// optional int64 camera_time = 2;
inline bool FrameTime::has_camera_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FrameTime::set_has_camera_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FrameTime::clear_has_camera_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FrameTime::clear_camera_time() {
  camera_time_ = GOOGLE_LONGLONG(0);
  clear_has_camera_time();
}
inline ::google::protobuf::int64 FrameTime::camera_time() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.FrameTime.camera_time)
  return camera_time_;
}
inline void FrameTime::set_camera_time(::google::protobuf::int64 value) {
  set_has_camera_time();
  camera_time_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.FrameTime.camera_time)
}

// optional bytes frame = 3;
inline bool FrameTime::has_frame() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FrameTime::set_has_frame() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FrameTime::clear_has_frame() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FrameTime::clear_frame() {
  if (frame_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_->clear();
  }
  clear_has_frame();
}
inline const ::std::string& FrameTime::frame() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.FrameTime.frame)
  return *frame_;
}
inline void FrameTime::set_frame(const ::std::string& value) {
  set_has_frame();
  if (frame_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_ = new ::std::string;
  }
  frame_->assign(value);
  // @@protoc_insertion_point(field_set:gt.internal.msg.FrameTime.frame)
}
inline void FrameTime::set_frame(const char* value) {
  set_has_frame();
  if (frame_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_ = new ::std::string;
  }
  frame_->assign(value);
  // @@protoc_insertion_point(field_set_char:gt.internal.msg.FrameTime.frame)
}
inline void FrameTime::set_frame(const void* value, size_t size) {
  set_has_frame();
  if (frame_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_ = new ::std::string;
  }
  frame_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gt.internal.msg.FrameTime.frame)
}
inline ::std::string* FrameTime::mutable_frame() {
  set_has_frame();
  if (frame_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gt.internal.msg.FrameTime.frame)
  return frame_;
}
inline ::std::string* FrameTime::release_frame() {
  clear_has_frame();
  if (frame_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = frame_;
    frame_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FrameTime::set_allocated_frame(::std::string* frame) {
  if (frame_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete frame_;
  }
  if (frame) {
    set_has_frame();
    frame_ = frame;
  } else {
    clear_has_frame();
    frame_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gt.internal.msg.FrameTime.frame)
}

// -------------------------------------------------------------------

// DebugInfo

// required string message = 1;
inline bool DebugInfo::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DebugInfo::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DebugInfo::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DebugInfo::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& DebugInfo::message() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.DebugInfo.message)
  return *message_;
}
inline void DebugInfo::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:gt.internal.msg.DebugInfo.message)
}
inline void DebugInfo::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:gt.internal.msg.DebugInfo.message)
}
inline void DebugInfo::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gt.internal.msg.DebugInfo.message)
}
inline ::std::string* DebugInfo::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gt.internal.msg.DebugInfo.message)
  return message_;
}
inline ::std::string* DebugInfo::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DebugInfo::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gt.internal.msg.DebugInfo.message)
}

// optional int32 skipDebugFrames = 2;
inline bool DebugInfo::has_skipdebugframes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DebugInfo::set_has_skipdebugframes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DebugInfo::clear_has_skipdebugframes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DebugInfo::clear_skipdebugframes() {
  skipdebugframes_ = 0;
  clear_has_skipdebugframes();
}
inline ::google::protobuf::int32 DebugInfo::skipdebugframes() const {
  // @@protoc_insertion_point(field_get:gt.internal.msg.DebugInfo.skipDebugFrames)
  return skipdebugframes_;
}
inline void DebugInfo::set_skipdebugframes(::google::protobuf::int32 value) {
  set_has_skipdebugframes();
  skipdebugframes_ = value;
  // @@protoc_insertion_point(field_set:gt.internal.msg.DebugInfo.skipDebugFrames)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg
}  // namespace internal
}  // namespace gt

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gt::internal::msg::CameraPosition> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gt::internal::msg::CameraPosition>() {
  return ::gt::internal::msg::CameraPosition_descriptor();
}
template <> struct is_proto_enum< ::gt::internal::msg::OutOfFrame> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gt::internal::msg::OutOfFrame>() {
  return ::gt::internal::msg::OutOfFrame_descriptor();
}
template <> struct is_proto_enum< ::gt::internal::msg::StreamType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gt::internal::msg::StreamType>() {
  return ::gt::internal::msg::StreamType_descriptor();
}
template <> struct is_proto_enum< ::gt::internal::msg::BallEvent> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gt::internal::msg::BallEvent>() {
  return ::gt::internal::msg::BallEvent_descriptor();
}
template <> struct is_proto_enum< ::gt::internal::msg::PlayerPosition> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gt::internal::msg::PlayerPosition>() {
  return ::gt::internal::msg::PlayerPosition_descriptor();
}
template <> struct is_proto_enum< ::gt::internal::msg::CameraType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gt::internal::msg::CameraType>() {
  return ::gt::internal::msg::CameraType_descriptor();
}
template <> struct is_proto_enum< ::gt::internal::msg::GameTrackProtocol> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gt::internal::msg::GameTrackProtocol>() {
  return ::gt::internal::msg::GameTrackProtocol_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msg_2einternal_2eproto__INCLUDED

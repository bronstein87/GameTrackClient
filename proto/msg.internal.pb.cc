// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.internal.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg.internal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gt {
namespace internal {
namespace msg {

namespace {

const ::google::protobuf::Descriptor* Point2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point2_reflection_ = NULL;
const ::google::protobuf::Descriptor* Point3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point3_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rect_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecROIs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecROIs_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecognizeParameters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecognizeParameters_reflection_ = NULL;
const ::google::protobuf::Descriptor* HardwareCameraParameters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HardwareCameraParameters_reflection_ = NULL;
const ::google::protobuf::Descriptor* PictureCameraParameters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PictureCameraParameters_reflection_ = NULL;
const ::google::protobuf::Descriptor* AutoExposureParameters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutoExposureParameters_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamCameraParameters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamCameraParameters_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamCameraCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamCameraCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalibrationParameters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalibrationParameters_reflection_ = NULL;
const ::google::protobuf::Descriptor* BallMeasure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BallMeasure_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatMeasure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatMeasure_reflection_ = NULL;
const ::google::protobuf::Descriptor* OutOfFrameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OutOfFrameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecognizeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecognizeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PedestrianMeasure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PedestrianMeasure_reflection_ = NULL;
const ::google::protobuf::Descriptor* CameraOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrameTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CameraPosition_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OutOfFrame_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StreamType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BallEvent_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PlayerPosition_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CameraType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GameTrackProtocol_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_2einternal_2eproto() {
  protobuf_AddDesc_msg_2einternal_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg.internal.proto");
  GOOGLE_CHECK(file != NULL);
  Point2_descriptor_ = file->message_type(0);
  static const int Point2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2, y_),
  };
  Point2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point2_descriptor_,
      Point2::default_instance_,
      Point2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point2));
  Point3_descriptor_ = file->message_type(1);
  static const int Point3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3, z_),
  };
  Point3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point3_descriptor_,
      Point3::default_instance_,
      Point3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point3));
  Rect_descriptor_ = file->message_type(2);
  static const int Rect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, xy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, wh_),
  };
  Rect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Rect_descriptor_,
      Rect::default_instance_,
      Rect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Rect));
  RecROIs_descriptor_ = file->message_type(3);
  static const int RecROIs_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecROIs, throw_search_rect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecROIs, throw_track_rect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecROIs, hit_search_rect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecROIs, hit_track_rect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecROIs, pick_off_search_rect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecROIs, bat_detect_rect_),
  };
  RecROIs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecROIs_descriptor_,
      RecROIs::default_instance_,
      RecROIs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecROIs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecROIs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecROIs));
  RecognizeParameters_descriptor_ = file->message_type(4);
  static const int RecognizeParameters_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeParameters, corr_coef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeParameters, sko_coef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeParameters, search_area_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeParameters, min_sko_template_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeParameters, max_angle_directions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeParameters, min_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeParameters, canny_thres_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeParameters, canny_thres_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeParameters, max_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeParameters, min_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeParameters, circularity_coeff_),
  };
  RecognizeParameters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecognizeParameters_descriptor_,
      RecognizeParameters::default_instance_,
      RecognizeParameters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeParameters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeParameters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecognizeParameters));
  HardwareCameraParameters_descriptor_ = file->message_type(5);
  static const int HardwareCameraParameters_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareCameraParameters, exposure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareCameraParameters, min_exposure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareCameraParameters, max_exposure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareCameraParameters, pixel_clock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareCameraParameters, min_pixel_clock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareCameraParameters, max_pixel_clock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareCameraParameters, frame_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareCameraParameters, min_frame_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareCameraParameters, max_frame_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareCameraParameters, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareCameraParameters, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareCameraParameters, gain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareCameraParameters, debounce_enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareCameraParameters, debounce_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareCameraParameters, trigger_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareCameraParameters, focusing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareCameraParameters, trigger_mode_enable_),
  };
  HardwareCameraParameters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HardwareCameraParameters_descriptor_,
      HardwareCameraParameters::default_instance_,
      HardwareCameraParameters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareCameraParameters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareCameraParameters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HardwareCameraParameters));
  PictureCameraParameters_descriptor_ = file->message_type(6);
  static const int PictureCameraParameters_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureCameraParameters, picture_param_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureCameraParameters, white_balance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureCameraParameters, wb_rect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureCameraParameters, gamma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureCameraParameters, sharp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureCameraParameters, saturation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureCameraParameters, r_saturation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureCameraParameters, g_saturation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureCameraParameters, b_saturation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureCameraParameters, hue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureCameraParameters, shadow_coef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureCameraParameters, shadow_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureCameraParameters, shadow_gauss_window_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureCameraParameters, rotate_),
  };
  PictureCameraParameters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PictureCameraParameters_descriptor_,
      PictureCameraParameters::default_instance_,
      PictureCameraParameters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureCameraParameters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureCameraParameters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PictureCameraParameters));
  AutoExposureParameters_descriptor_ = file->message_type(7);
  static const int AutoExposureParameters_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoExposureParameters, gain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoExposureParameters, exposure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoExposureParameters, min_gain_coeff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoExposureParameters, max_gain_coeff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoExposureParameters, max_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoExposureParameters, min_rel_coef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoExposureParameters, max_rel_coef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoExposureParameters, mean_),
  };
  AutoExposureParameters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AutoExposureParameters_descriptor_,
      AutoExposureParameters::default_instance_,
      AutoExposureParameters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoExposureParameters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoExposureParameters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AutoExposureParameters));
  StreamCameraParameters_descriptor_ = file->message_type(8);
  static const int StreamCameraParameters_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamCameraParameters, raw_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamCameraParameters, send_frame_rate_main_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamCameraParameters, send_frame_rate_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamCameraParameters, port_send_stream_main_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamCameraParameters, port_send_stream_add_),
  };
  StreamCameraParameters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamCameraParameters_descriptor_,
      StreamCameraParameters::default_instance_,
      StreamCameraParameters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamCameraParameters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamCameraParameters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamCameraParameters));
  StreamCameraCommand_descriptor_ = file->message_type(9);
  static const int StreamCameraCommand_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamCameraCommand, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamCameraCommand, video_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamCameraCommand, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamCameraCommand, stop_),
  };
  StreamCameraCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamCameraCommand_descriptor_,
      StreamCameraCommand::default_instance_,
      StreamCameraCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamCameraCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamCameraCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamCameraCommand));
  CalibrationParameters_descriptor_ = file->message_type(10);
  static const int CalibrationParameters_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationParameters, xyz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationParameters, angles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationParameters, focus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationParameters, samples_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationParameters, lines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationParameters, sample_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationParameters, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationParameters, pixel_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationParameters, k1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationParameters, k2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationParameters, k3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationParameters, p1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationParameters, p2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationParameters, b1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationParameters, b2_),
  };
  CalibrationParameters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CalibrationParameters_descriptor_,
      CalibrationParameters::default_instance_,
      CalibrationParameters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationParameters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationParameters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CalibrationParameters));
  BallMeasure_descriptor_ = file->message_type(11);
  static const int BallMeasure_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallMeasure, xy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallMeasure, valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallMeasure, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallMeasure, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallMeasure, is_rebound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallMeasure, is_from_out_of_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallMeasure, is_lost_out_of_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallMeasure, is_high_ball_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallMeasure, is_ped_intersect_),
  };
  BallMeasure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BallMeasure_descriptor_,
      BallMeasure::default_instance_,
      BallMeasure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallMeasure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallMeasure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BallMeasure));
  BatMeasure_descriptor_ = file->message_type(12);
  static const int BatMeasure_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatMeasure, was_swing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatMeasure, measures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatMeasure, bboxes_),
  };
  BatMeasure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatMeasure_descriptor_,
      BatMeasure::default_instance_,
      BatMeasure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatMeasure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatMeasure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatMeasure));
  OutOfFrameInfo_descriptor_ = file->message_type(13);
  static const int OutOfFrameInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutOfFrameInfo, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutOfFrameInfo, ball_measure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutOfFrameInfo, ped_measure_),
  };
  OutOfFrameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OutOfFrameInfo_descriptor_,
      OutOfFrameInfo::default_instance_,
      OutOfFrameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutOfFrameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutOfFrameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OutOfFrameInfo));
  RecognizeData_descriptor_ = file->message_type(14);
  static const int RecognizeData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeData, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeData, restored_out_of_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeData, restored_straight_),
  };
  RecognizeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecognizeData_descriptor_,
      RecognizeData::default_instance_,
      RecognizeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecognizeData));
  PedestrianMeasure_descriptor_ = file->message_type(15);
  static const int PedestrianMeasure_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PedestrianMeasure, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PedestrianMeasure, p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PedestrianMeasure, pos_),
  };
  PedestrianMeasure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PedestrianMeasure_descriptor_,
      PedestrianMeasure::default_instance_,
      PedestrianMeasure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PedestrianMeasure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PedestrianMeasure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PedestrianMeasure));
  CameraOptions_descriptor_ = file->message_type(16);
  static const int CameraOptions_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOptions, hw_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOptions, p_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOptions, auto_exp_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOptions, calib_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOptions, rec_rois_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOptions, ball_recognize_enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOptions, debug_enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOptions, rec_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOptions, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOptions, cam_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOptions, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOptions, save_parameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOptions, stream_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOptions, auto_exposure_enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOptions, main_add_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOptions, main_each_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOptions, debug_mode_),
  };
  CameraOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraOptions_descriptor_,
      CameraOptions::default_instance_,
      CameraOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraOptions));
  ServerOptions_descriptor_ = file->message_type(17);
  static const int ServerOptions_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerOptions, write_to_disk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerOptions, write_uncompressed_),
  };
  ServerOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerOptions_descriptor_,
      ServerOptions::default_instance_,
      ServerOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerOptions));
  FrameTime_descriptor_ = file->message_type(18);
  static const int FrameTime_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameTime, computer_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameTime, camera_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameTime, frame_),
  };
  FrameTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameTime_descriptor_,
      FrameTime::default_instance_,
      FrameTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameTime));
  DebugInfo_descriptor_ = file->message_type(19);
  static const int DebugInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugInfo, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugInfo, skipdebugframes_),
  };
  DebugInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DebugInfo_descriptor_,
      DebugInfo::default_instance_,
      DebugInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DebugInfo));
  CameraPosition_descriptor_ = file->enum_type(0);
  OutOfFrame_descriptor_ = file->enum_type(1);
  StreamType_descriptor_ = file->enum_type(2);
  BallEvent_descriptor_ = file->enum_type(3);
  PlayerPosition_descriptor_ = file->enum_type(4);
  CameraType_descriptor_ = file->enum_type(5);
  GameTrackProtocol_descriptor_ = file->enum_type(6);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_2einternal_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point2_descriptor_, &Point2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point3_descriptor_, &Point3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Rect_descriptor_, &Rect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecROIs_descriptor_, &RecROIs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecognizeParameters_descriptor_, &RecognizeParameters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HardwareCameraParameters_descriptor_, &HardwareCameraParameters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PictureCameraParameters_descriptor_, &PictureCameraParameters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AutoExposureParameters_descriptor_, &AutoExposureParameters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamCameraParameters_descriptor_, &StreamCameraParameters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamCameraCommand_descriptor_, &StreamCameraCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CalibrationParameters_descriptor_, &CalibrationParameters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BallMeasure_descriptor_, &BallMeasure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatMeasure_descriptor_, &BatMeasure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OutOfFrameInfo_descriptor_, &OutOfFrameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecognizeData_descriptor_, &RecognizeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PedestrianMeasure_descriptor_, &PedestrianMeasure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraOptions_descriptor_, &CameraOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerOptions_descriptor_, &ServerOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameTime_descriptor_, &FrameTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DebugInfo_descriptor_, &DebugInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_2einternal_2eproto() {
  delete Point2::default_instance_;
  delete Point2_reflection_;
  delete Point3::default_instance_;
  delete Point3_reflection_;
  delete Rect::default_instance_;
  delete Rect_reflection_;
  delete RecROIs::default_instance_;
  delete RecROIs_reflection_;
  delete RecognizeParameters::default_instance_;
  delete RecognizeParameters_reflection_;
  delete HardwareCameraParameters::default_instance_;
  delete HardwareCameraParameters_reflection_;
  delete PictureCameraParameters::default_instance_;
  delete PictureCameraParameters_reflection_;
  delete AutoExposureParameters::default_instance_;
  delete AutoExposureParameters_reflection_;
  delete StreamCameraParameters::default_instance_;
  delete StreamCameraParameters_reflection_;
  delete StreamCameraCommand::default_instance_;
  delete StreamCameraCommand_reflection_;
  delete CalibrationParameters::default_instance_;
  delete CalibrationParameters_reflection_;
  delete BallMeasure::default_instance_;
  delete BallMeasure_reflection_;
  delete BatMeasure::default_instance_;
  delete BatMeasure_reflection_;
  delete OutOfFrameInfo::default_instance_;
  delete OutOfFrameInfo_reflection_;
  delete RecognizeData::default_instance_;
  delete RecognizeData_reflection_;
  delete PedestrianMeasure::default_instance_;
  delete PedestrianMeasure_reflection_;
  delete CameraOptions::default_instance_;
  delete CameraOptions_reflection_;
  delete ServerOptions::default_instance_;
  delete ServerOptions_reflection_;
  delete FrameTime::default_instance_;
  delete FrameTime_reflection_;
  delete DebugInfo::default_instance_;
  delete DebugInfo_reflection_;
}

void protobuf_AddDesc_msg_2einternal_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022msg.internal.proto\022\017gt.internal.msg\"\036\n"
    "\006Point2\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\")\n\006Point3\022"
    "\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\t\n\001z\030\003 \002(\001\"P\n\004Rect"
    "\022#\n\002xy\030\001 \002(\0132\027.gt.internal.msg.Point2\022#\n"
    "\002wh\030\002 \002(\0132\027.gt.internal.msg.Point2\"\260\002\n\007R"
    "ecROIs\0220\n\021throw_search_rect\030\001 \001(\0132\025.gt.i"
    "nternal.msg.Rect\022/\n\020throw_track_rect\030\002 \001"
    "(\0132\025.gt.internal.msg.Rect\022.\n\017hit_search_"
    "rect\030\003 \001(\0132\025.gt.internal.msg.Rect\022-\n\016hit"
    "_track_rect\030\004 \001(\0132\025.gt.internal.msg.Rect"
    "\0223\n\024pick_off_search_rect\030\005 \001(\0132\025.gt.inte"
    "rnal.msg.Rect\022.\n\017bat_detect_rect\030\006 \001(\0132\025"
    ".gt.internal.msg.Rect\"\220\002\n\023RecognizeParam"
    "eters\022\021\n\tcorr_coef\030\001 \001(\001\022\020\n\010sko_coef\030\002 \001"
    "(\001\022\030\n\020search_area_size\030\003 \001(\005\022\030\n\020min_sko_"
    "template\030\004 \001(\001\022\034\n\024max_angle_directions\030\005"
    " \001(\001\022\021\n\tmin_speed\030\006 \001(\001\022\027\n\017canny_thres_m"
    "in\030\007 \001(\005\022\027\n\017canny_thres_max\030\010 \001(\005\022\020\n\010max"
    "_area\030\t \001(\005\022\020\n\010min_area\030\n \001(\005\022\031\n\021circula"
    "rity_coeff\030\013 \001(\001\"\206\003\n\030HardwareCameraParam"
    "eters\022\020\n\010exposure\030\001 \001(\001\022\024\n\014min_exposure\030"
    "\002 \001(\001\022\024\n\014max_exposure\030\003 \001(\001\022\023\n\013pixel_clo"
    "ck\030\004 \001(\005\022\027\n\017min_pixel_clock\030\005 \001(\005\022\027\n\017max"
    "_pixel_clock\030\006 \001(\005\022\022\n\nframe_rate\030\007 \001(\001\022\026"
    "\n\016min_frame_rate\030\010 \001(\001\022\026\n\016max_frame_rate"
    "\030\t \001(\001\022\r\n\005width\030\n \001(\005\022\016\n\006height\030\013 \001(\005\022\014\n"
    "\004gain\030\014 \001(\005\022\027\n\017debounce_enable\030\r \001(\010\022\026\n\016"
    "debounce_value\030\016 \001(\005\022\024\n\014trigger_mode\030\017 \001"
    "(\005\022\020\n\010focusing\030\020 \001(\005\022\033\n\023trigger_mode_ena"
    "ble\030\021 \001(\010\"\326\002\n\027PictureCameraParameters\022\032\n"
    "\022picture_param_flag\030\001 \001(\005\022\025\n\rwhite_balan"
    "ce\030\002 \001(\005\022&\n\007wb_rect\030\003 \001(\0132\025.gt.internal."
    "msg.Rect\022\r\n\005gamma\030\004 \001(\001\022\r\n\005sharp\030\005 \001(\001\022\022"
    "\n\nsaturation\030\006 \001(\005\022\024\n\014r_saturation\030\007 \001(\005"
    "\022\024\n\014g_saturation\030\010 \001(\005\022\024\n\014b_saturation\030\t"
    " \001(\005\022\013\n\003hue\030\n \001(\005\022\023\n\013shadow_coef\030\013 \001(\001\022\030"
    "\n\020shadow_threshold\030\014 \001(\001\022 \n\030shadow_gauss"
    "_window_size\030\r \001(\005\022\016\n\006rotate\030\016 \001(\005\"\267\001\n\026A"
    "utoExposureParameters\022\014\n\004gain\030\001 \001(\001\022\020\n\010e"
    "xposure\030\002 \001(\001\022\026\n\016min_gain_coeff\030\003 \001(\001\022\026\n"
    "\016max_gain_coeff\030\004 \001(\001\022\023\n\013max_percent\030\005 \001"
    "(\001\022\024\n\014min_rel_coef\030\006 \001(\001\022\024\n\014max_rel_coef"
    "\030\007 \001(\001\022\014\n\004mean\030\010 \001(\001\"\243\001\n\026StreamCameraPar"
    "ameters\022\021\n\traw_frame\030\001 \001(\005\022\034\n\024send_frame"
    "_rate_main\030\004 \001(\005\022\033\n\023send_frame_rate_add\030"
    "\006 \001(\005\022\035\n\025port_send_stream_main\030\010 \001(\005\022\034\n\024"
    "port_send_stream_add\030\t \001(\005\"t\n\023StreamCame"
    "raCommand\022)\n\004type\030\001 \002(\0162\033.gt.internal.ms"
    "g.StreamType\022\026\n\016video_duration\030\002 \001(\005\022\014\n\004"
    "desc\030\003 \001(\t\022\014\n\004stop\030\004 \001(\010\"\233\002\n\025Calibration"
    "Parameters\022$\n\003xyz\030\001 \002(\0132\027.gt.internal.ms"
    "g.Point3\022\'\n\006angles\030\002 \002(\0132\027.gt.internal.m"
    "sg.Point3\022\r\n\005focus\030\003 \002(\001\022\017\n\007samples\030\004 \002("
    "\001\022\r\n\005lines\030\005 \002(\001\022\016\n\006sample\030\006 \002(\001\022\014\n\004line"
    "\030\007 \002(\001\022\022\n\npixel_size\030\010 \002(\001\022\n\n\002k1\030\t \002(\001\022\n"
    "\n\002k2\030\n \002(\001\022\n\n\002k3\030\013 \002(\001\022\n\n\002p1\030\014 \002(\001\022\n\n\002p2"
    "\030\r \002(\001\022\n\n\002b1\030\016 \002(\001\022\n\n\002b2\030\017 \002(\001\"\372\001\n\013BallM"
    "easure\022#\n\002xy\030\001 \002(\0132\027.gt.internal.msg.Poi"
    "nt2\022\r\n\005valid\030\002 \002(\010\022\014\n\004time\030\003 \002(\003\022)\n\005even"
    "t\030\004 \002(\0162\032.gt.internal.msg.BallEvent\022\022\n\ni"
    "s_rebound\030\005 \002(\010\022\034\n\024is_from_out_of_frame\030"
    "\006 \002(\010\022\034\n\024is_lost_out_of_frame\030\007 \002(\010\022\024\n\014i"
    "s_high_ball\030\010 \002(\010\022\030\n\020is_ped_intersect\030\t "
    "\002(\010\"q\n\nBatMeasure\022\021\n\twas_swing\030\001 \002(\010\022)\n\010"
    "measures\030\002 \003(\0132\027.gt.internal.msg.Point2\022"
    "%\n\006bboxes\030\003 \003(\0132\025.gt.internal.msg.Rect\"\247"
    "\001\n\016OutOfFrameInfo\022(\n\003dir\030\001 \002(\0162\033.gt.inte"
    "rnal.msg.OutOfFrame\0222\n\014ball_measure\030\002 \001("
    "\0132\034.gt.internal.msg.BallMeasure\0227\n\013ped_m"
    "easure\030\003 \001(\0132\".gt.internal.msg.Pedestria"
    "nMeasure\"\211\001\n\rRecognizeData\022*\n\004data\030\001 \003(\013"
    "2\034.gt.internal.msg.BallMeasure\022\022\n\nstart_"
    "time\030\002 \001(\003\022\035\n\025restored_out_of_frame\030\003 \001("
    "\010\022\031\n\021restored_straight\030\004 \001(\010\"\207\001\n\021Pedestr"
    "ianMeasure\022 \n\001r\030\001 \002(\0132\025.gt.internal.msg."
    "Rect\022\"\n\001p\030\002 \002(\0132\027.gt.internal.msg.Point3"
    "\022,\n\003pos\030\003 \002(\0162\037.gt.internal.msg.PlayerPo"
    "sition\"\242\005\n\rCameraOptions\022<\n\thw_params\030\001 "
    "\001(\0132).gt.internal.msg.HardwareCameraPara"
    "meters\022:\n\010p_params\030\002 \001(\0132(.gt.internal.m"
    "sg.PictureCameraParameters\022@\n\017auto_exp_p"
    "arams\030\003 \001(\0132\'.gt.internal.msg.AutoExposu"
    "reParameters\022<\n\014calib_params\030\004 \001(\0132&.gt."
    "internal.msg.CalibrationParameters\022*\n\010re"
    "c_rois\030\005 \001(\0132\030.gt.internal.msg.RecROIs\022\035"
    "\n\025ball_recognize_enable\030\006 \001(\010\022\024\n\014debug_e"
    "nable\030\007 \001(\010\0228\n\nrec_params\030\010 \001(\0132$.gt.int"
    "ernal.msg.RecognizeParameters\022\014\n\004desc\030\t "
    "\001(\t\022-\n\010cam_type\030\n \001(\0162\033.gt.internal.msg."
    "CameraType\022\n\n\002id\030\013 \002(\t\022\027\n\017save_parameter"
    "s\030\014 \001(\010\022>\n\rstream_params\030\r \001(\0132\'.gt.inte"
    "rnal.msg.StreamCameraParameters\022\034\n\024auto_"
    "exposure_enable\030\016 \001(\010\022\025\n\rmain_add_mode\030\017"
    " \002(\010\022\021\n\tmain_each\030\020 \001(\005\022\022\n\ndebug_mode\030\021 "
    "\001(\010\"B\n\rServerOptions\022\025\n\rwrite_to_disk\030\001 "
    "\001(\010\022\032\n\022write_uncompressed\030\002 \001(\010\"F\n\tFrame"
    "Time\022\025\n\rcomputer_time\030\001 \001(\003\022\023\n\013camera_ti"
    "me\030\002 \001(\003\022\r\n\005frame\030\003 \001(\014\"5\n\tDebugInfo\022\017\n\007"
    "message\030\001 \002(\t\022\027\n\017skipDebugFrames\030\002 \001(\005*4"
    "\n\016CameraPosition\022\r\n\tUndefined\020\000\022\010\n\004Left\020"
    "\001\022\t\n\005Right\020\002*L\n\nOutOfFrame\022\013\n\007LeftOut\020\000\022"
    "\014\n\010RightOut\020\001\022\t\n\005UpOut\020\002\022\013\n\007DownOut\020\003\022\013\n"
    "\007InFrame\020\004*&\n\nStreamType\022\010\n\004Main\020\001\022\016\n\nAd"
    "ditional\020\002*Y\n\tBallEvent\022\021\n\rThrowDetected"
    "\020\000\022\017\n\013HitDetected\020\001\022\020\n\014MoveDetected\020\002\022\026\n"
    "\022CatchThrowDetected\020\003*\224\001\n\016PlayerPosition"
    "\022\013\n\007Invalid\020\001\022\010\n\004Home\020\002\022\r\n\tFirstBase\020\003\022\016"
    "\n\nSecondBase\020\004\022\r\n\tThirdBase\020\005\022\r\n\tShortSt"
    "op\020\006\022\r\n\tLeftField\020\007\022\017\n\013CenterField\020\010\022\016\n\n"
    "RightField\020\t*\207\001\n\nCameraType\022\020\n\014BaseLeftM"
    "ain\020\001\022\021\n\rBaseRightMain\020\002\022\017\n\013BaseLeftAdd\020"
    "\003\022\020\n\014BaseRightAdd\020\004\022\t\n\005Pitch\020\005\022\013\n\007BatLef"
    "t\020\006\022\014\n\010BatRight\020\007\022\013\n\007FishEye\020\010*\223\003\n\021GameT"
    "rackProtocol\022\030\n\024SendCameraParameters\020\001\022\021"
    "\n\rRequestStream\020\002\022\024\n\020NotifyOutOfFrame\020\003\022"
    "\034\n\030NotifyPedestrianPosition\020\004\022\025\n\021NotifyB"
    "allMeasure\020\005\022\026\n\022RequestCameraFrame\020\006\022\026\n\022"
    "GetBallCoordinates\020\007\022\025\n\021GetBatCoordinate"
    "s\020\010\022\017\n\013GetTestData\020\t\022\021\n\rRestartCamera\020\n\022"
    "\023\n\017SendCurrentTime\020\013\022\020\n\014SetDebugMode\020\014\022\035"
    "\n\031RequestNextFrameDebugMode\020\r\022\035\n\031NotifyM"
    "omentStartDetected\020\016\022!\n\035RequestPreviousF"
    "rameDebugMode\020\017\022\023\n\017RestartSoftware\020\020B\002H\001", 4920);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg.internal.proto", &protobuf_RegisterTypes);
  Point2::default_instance_ = new Point2();
  Point3::default_instance_ = new Point3();
  Rect::default_instance_ = new Rect();
  RecROIs::default_instance_ = new RecROIs();
  RecognizeParameters::default_instance_ = new RecognizeParameters();
  HardwareCameraParameters::default_instance_ = new HardwareCameraParameters();
  PictureCameraParameters::default_instance_ = new PictureCameraParameters();
  AutoExposureParameters::default_instance_ = new AutoExposureParameters();
  StreamCameraParameters::default_instance_ = new StreamCameraParameters();
  StreamCameraCommand::default_instance_ = new StreamCameraCommand();
  CalibrationParameters::default_instance_ = new CalibrationParameters();
  BallMeasure::default_instance_ = new BallMeasure();
  BatMeasure::default_instance_ = new BatMeasure();
  OutOfFrameInfo::default_instance_ = new OutOfFrameInfo();
  RecognizeData::default_instance_ = new RecognizeData();
  PedestrianMeasure::default_instance_ = new PedestrianMeasure();
  CameraOptions::default_instance_ = new CameraOptions();
  ServerOptions::default_instance_ = new ServerOptions();
  FrameTime::default_instance_ = new FrameTime();
  DebugInfo::default_instance_ = new DebugInfo();
  Point2::default_instance_->InitAsDefaultInstance();
  Point3::default_instance_->InitAsDefaultInstance();
  Rect::default_instance_->InitAsDefaultInstance();
  RecROIs::default_instance_->InitAsDefaultInstance();
  RecognizeParameters::default_instance_->InitAsDefaultInstance();
  HardwareCameraParameters::default_instance_->InitAsDefaultInstance();
  PictureCameraParameters::default_instance_->InitAsDefaultInstance();
  AutoExposureParameters::default_instance_->InitAsDefaultInstance();
  StreamCameraParameters::default_instance_->InitAsDefaultInstance();
  StreamCameraCommand::default_instance_->InitAsDefaultInstance();
  CalibrationParameters::default_instance_->InitAsDefaultInstance();
  BallMeasure::default_instance_->InitAsDefaultInstance();
  BatMeasure::default_instance_->InitAsDefaultInstance();
  OutOfFrameInfo::default_instance_->InitAsDefaultInstance();
  RecognizeData::default_instance_->InitAsDefaultInstance();
  PedestrianMeasure::default_instance_->InitAsDefaultInstance();
  CameraOptions::default_instance_->InitAsDefaultInstance();
  ServerOptions::default_instance_->InitAsDefaultInstance();
  FrameTime::default_instance_->InitAsDefaultInstance();
  DebugInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_2einternal_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_2einternal_2eproto {
  StaticDescriptorInitializer_msg_2einternal_2eproto() {
    protobuf_AddDesc_msg_2einternal_2eproto();
  }
} static_descriptor_initializer_msg_2einternal_2eproto_;
const ::google::protobuf::EnumDescriptor* CameraPosition_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraPosition_descriptor_;
}
bool CameraPosition_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OutOfFrame_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OutOfFrame_descriptor_;
}
bool OutOfFrame_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StreamType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamType_descriptor_;
}
bool StreamType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BallEvent_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BallEvent_descriptor_;
}
bool BallEvent_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PlayerPosition_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerPosition_descriptor_;
}
bool PlayerPosition_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CameraType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraType_descriptor_;
}
bool CameraType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GameTrackProtocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameTrackProtocol_descriptor_;
}
bool GameTrackProtocol_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Point2::kXFieldNumber;
const int Point2::kYFieldNumber;
#endif  // !_MSC_VER

Point2::Point2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt.internal.msg.Point2)
}

void Point2::InitAsDefaultInstance() {
}

Point2::Point2(const Point2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt.internal.msg.Point2)
}

void Point2::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point2::~Point2() {
  // @@protoc_insertion_point(destructor:gt.internal.msg.Point2)
  SharedDtor();
}

void Point2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point2_descriptor_;
}

const Point2& Point2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2einternal_2eproto();
  return *default_instance_;
}

Point2* Point2::default_instance_ = NULL;

Point2* Point2::New() const {
  return new Point2;
}

void Point2::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Point2*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt.internal.msg.Point2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt.internal.msg.Point2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt.internal.msg.Point2)
  return false;
#undef DO_
}

void Point2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt.internal.msg.Point2)
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gt.internal.msg.Point2)
}

::google::protobuf::uint8* Point2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt.internal.msg.Point2)
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gt.internal.msg.Point2)
  return target;
}

int Point2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point2::MergeFrom(const Point2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point2::CopyFrom(const Point2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Point2::Swap(Point2* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point2_descriptor_;
  metadata.reflection = Point2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Point3::kXFieldNumber;
const int Point3::kYFieldNumber;
const int Point3::kZFieldNumber;
#endif  // !_MSC_VER

Point3::Point3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt.internal.msg.Point3)
}

void Point3::InitAsDefaultInstance() {
}

Point3::Point3(const Point3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt.internal.msg.Point3)
}

void Point3::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point3::~Point3() {
  // @@protoc_insertion_point(destructor:gt.internal.msg.Point3)
  SharedDtor();
}

void Point3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point3_descriptor_;
}

const Point3& Point3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2einternal_2eproto();
  return *default_instance_;
}

Point3* Point3::default_instance_ = NULL;

Point3* Point3::New() const {
  return new Point3;
}

void Point3::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Point3*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt.internal.msg.Point3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // required double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt.internal.msg.Point3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt.internal.msg.Point3)
  return false;
#undef DO_
}

void Point3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt.internal.msg.Point3)
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // required double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gt.internal.msg.Point3)
}

::google::protobuf::uint8* Point3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt.internal.msg.Point3)
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // required double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gt.internal.msg.Point3)
  return target;
}

int Point3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // required double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point3::MergeFrom(const Point3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point3::CopyFrom(const Point3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Point3::Swap(Point3* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point3_descriptor_;
  metadata.reflection = Point3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Rect::kXyFieldNumber;
const int Rect::kWhFieldNumber;
#endif  // !_MSC_VER

Rect::Rect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt.internal.msg.Rect)
}

void Rect::InitAsDefaultInstance() {
  xy_ = const_cast< ::gt::internal::msg::Point2*>(&::gt::internal::msg::Point2::default_instance());
  wh_ = const_cast< ::gt::internal::msg::Point2*>(&::gt::internal::msg::Point2::default_instance());
}

Rect::Rect(const Rect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt.internal.msg.Rect)
}

void Rect::SharedCtor() {
  _cached_size_ = 0;
  xy_ = NULL;
  wh_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rect::~Rect() {
  // @@protoc_insertion_point(destructor:gt.internal.msg.Rect)
  SharedDtor();
}

void Rect::SharedDtor() {
  if (this != default_instance_) {
    delete xy_;
    delete wh_;
  }
}

void Rect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rect_descriptor_;
}

const Rect& Rect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2einternal_2eproto();
  return *default_instance_;
}

Rect* Rect::default_instance_ = NULL;

Rect* Rect::New() const {
  return new Rect;
}

void Rect::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_xy()) {
      if (xy_ != NULL) xy_->::gt::internal::msg::Point2::Clear();
    }
    if (has_wh()) {
      if (wh_ != NULL) wh_->::gt::internal::msg::Point2::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt.internal.msg.Rect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gt.internal.msg.Point2 xy = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wh;
        break;
      }

      // required .gt.internal.msg.Point2 wh = 2;
      case 2: {
        if (tag == 18) {
         parse_wh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt.internal.msg.Rect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt.internal.msg.Rect)
  return false;
#undef DO_
}

void Rect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt.internal.msg.Rect)
  // required .gt.internal.msg.Point2 xy = 1;
  if (has_xy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->xy(), output);
  }

  // required .gt.internal.msg.Point2 wh = 2;
  if (has_wh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->wh(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gt.internal.msg.Rect)
}

::google::protobuf::uint8* Rect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt.internal.msg.Rect)
  // required .gt.internal.msg.Point2 xy = 1;
  if (has_xy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->xy(), target);
  }

  // required .gt.internal.msg.Point2 wh = 2;
  if (has_wh()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->wh(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gt.internal.msg.Rect)
  return target;
}

int Rect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gt.internal.msg.Point2 xy = 1;
    if (has_xy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xy());
    }

    // required .gt.internal.msg.Point2 wh = 2;
    if (has_wh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wh());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Rect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rect::MergeFrom(const Rect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xy()) {
      mutable_xy()->::gt::internal::msg::Point2::MergeFrom(from.xy());
    }
    if (from.has_wh()) {
      mutable_wh()->::gt::internal::msg::Point2::MergeFrom(from.wh());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rect::CopyFrom(const Rect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_xy()) {
    if (!this->xy().IsInitialized()) return false;
  }
  if (has_wh()) {
    if (!this->wh().IsInitialized()) return false;
  }
  return true;
}

void Rect::Swap(Rect* other) {
  if (other != this) {
    std::swap(xy_, other->xy_);
    std::swap(wh_, other->wh_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rect_descriptor_;
  metadata.reflection = Rect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecROIs::kThrowSearchRectFieldNumber;
const int RecROIs::kThrowTrackRectFieldNumber;
const int RecROIs::kHitSearchRectFieldNumber;
const int RecROIs::kHitTrackRectFieldNumber;
const int RecROIs::kPickOffSearchRectFieldNumber;
const int RecROIs::kBatDetectRectFieldNumber;
#endif  // !_MSC_VER

RecROIs::RecROIs()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt.internal.msg.RecROIs)
}

void RecROIs::InitAsDefaultInstance() {
  throw_search_rect_ = const_cast< ::gt::internal::msg::Rect*>(&::gt::internal::msg::Rect::default_instance());
  throw_track_rect_ = const_cast< ::gt::internal::msg::Rect*>(&::gt::internal::msg::Rect::default_instance());
  hit_search_rect_ = const_cast< ::gt::internal::msg::Rect*>(&::gt::internal::msg::Rect::default_instance());
  hit_track_rect_ = const_cast< ::gt::internal::msg::Rect*>(&::gt::internal::msg::Rect::default_instance());
  pick_off_search_rect_ = const_cast< ::gt::internal::msg::Rect*>(&::gt::internal::msg::Rect::default_instance());
  bat_detect_rect_ = const_cast< ::gt::internal::msg::Rect*>(&::gt::internal::msg::Rect::default_instance());
}

RecROIs::RecROIs(const RecROIs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt.internal.msg.RecROIs)
}

void RecROIs::SharedCtor() {
  _cached_size_ = 0;
  throw_search_rect_ = NULL;
  throw_track_rect_ = NULL;
  hit_search_rect_ = NULL;
  hit_track_rect_ = NULL;
  pick_off_search_rect_ = NULL;
  bat_detect_rect_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecROIs::~RecROIs() {
  // @@protoc_insertion_point(destructor:gt.internal.msg.RecROIs)
  SharedDtor();
}

void RecROIs::SharedDtor() {
  if (this != default_instance_) {
    delete throw_search_rect_;
    delete throw_track_rect_;
    delete hit_search_rect_;
    delete hit_track_rect_;
    delete pick_off_search_rect_;
    delete bat_detect_rect_;
  }
}

void RecROIs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecROIs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecROIs_descriptor_;
}

const RecROIs& RecROIs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2einternal_2eproto();
  return *default_instance_;
}

RecROIs* RecROIs::default_instance_ = NULL;

RecROIs* RecROIs::New() const {
  return new RecROIs;
}

void RecROIs::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_throw_search_rect()) {
      if (throw_search_rect_ != NULL) throw_search_rect_->::gt::internal::msg::Rect::Clear();
    }
    if (has_throw_track_rect()) {
      if (throw_track_rect_ != NULL) throw_track_rect_->::gt::internal::msg::Rect::Clear();
    }
    if (has_hit_search_rect()) {
      if (hit_search_rect_ != NULL) hit_search_rect_->::gt::internal::msg::Rect::Clear();
    }
    if (has_hit_track_rect()) {
      if (hit_track_rect_ != NULL) hit_track_rect_->::gt::internal::msg::Rect::Clear();
    }
    if (has_pick_off_search_rect()) {
      if (pick_off_search_rect_ != NULL) pick_off_search_rect_->::gt::internal::msg::Rect::Clear();
    }
    if (has_bat_detect_rect()) {
      if (bat_detect_rect_ != NULL) bat_detect_rect_->::gt::internal::msg::Rect::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecROIs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt.internal.msg.RecROIs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gt.internal.msg.Rect throw_search_rect = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_throw_search_rect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_throw_track_rect;
        break;
      }

      // optional .gt.internal.msg.Rect throw_track_rect = 2;
      case 2: {
        if (tag == 18) {
         parse_throw_track_rect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_throw_track_rect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hit_search_rect;
        break;
      }

      // optional .gt.internal.msg.Rect hit_search_rect = 3;
      case 3: {
        if (tag == 26) {
         parse_hit_search_rect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hit_search_rect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_hit_track_rect;
        break;
      }

      // optional .gt.internal.msg.Rect hit_track_rect = 4;
      case 4: {
        if (tag == 34) {
         parse_hit_track_rect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hit_track_rect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pick_off_search_rect;
        break;
      }

      // optional .gt.internal.msg.Rect pick_off_search_rect = 5;
      case 5: {
        if (tag == 42) {
         parse_pick_off_search_rect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pick_off_search_rect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_bat_detect_rect;
        break;
      }

      // optional .gt.internal.msg.Rect bat_detect_rect = 6;
      case 6: {
        if (tag == 50) {
         parse_bat_detect_rect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bat_detect_rect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt.internal.msg.RecROIs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt.internal.msg.RecROIs)
  return false;
#undef DO_
}

void RecROIs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt.internal.msg.RecROIs)
  // optional .gt.internal.msg.Rect throw_search_rect = 1;
  if (has_throw_search_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->throw_search_rect(), output);
  }

  // optional .gt.internal.msg.Rect throw_track_rect = 2;
  if (has_throw_track_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->throw_track_rect(), output);
  }

  // optional .gt.internal.msg.Rect hit_search_rect = 3;
  if (has_hit_search_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hit_search_rect(), output);
  }

  // optional .gt.internal.msg.Rect hit_track_rect = 4;
  if (has_hit_track_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->hit_track_rect(), output);
  }

  // optional .gt.internal.msg.Rect pick_off_search_rect = 5;
  if (has_pick_off_search_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pick_off_search_rect(), output);
  }

  // optional .gt.internal.msg.Rect bat_detect_rect = 6;
  if (has_bat_detect_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->bat_detect_rect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gt.internal.msg.RecROIs)
}

::google::protobuf::uint8* RecROIs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt.internal.msg.RecROIs)
  // optional .gt.internal.msg.Rect throw_search_rect = 1;
  if (has_throw_search_rect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->throw_search_rect(), target);
  }

  // optional .gt.internal.msg.Rect throw_track_rect = 2;
  if (has_throw_track_rect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->throw_track_rect(), target);
  }

  // optional .gt.internal.msg.Rect hit_search_rect = 3;
  if (has_hit_search_rect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hit_search_rect(), target);
  }

  // optional .gt.internal.msg.Rect hit_track_rect = 4;
  if (has_hit_track_rect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->hit_track_rect(), target);
  }

  // optional .gt.internal.msg.Rect pick_off_search_rect = 5;
  if (has_pick_off_search_rect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pick_off_search_rect(), target);
  }

  // optional .gt.internal.msg.Rect bat_detect_rect = 6;
  if (has_bat_detect_rect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->bat_detect_rect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gt.internal.msg.RecROIs)
  return target;
}

int RecROIs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .gt.internal.msg.Rect throw_search_rect = 1;
    if (has_throw_search_rect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->throw_search_rect());
    }

    // optional .gt.internal.msg.Rect throw_track_rect = 2;
    if (has_throw_track_rect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->throw_track_rect());
    }

    // optional .gt.internal.msg.Rect hit_search_rect = 3;
    if (has_hit_search_rect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hit_search_rect());
    }

    // optional .gt.internal.msg.Rect hit_track_rect = 4;
    if (has_hit_track_rect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hit_track_rect());
    }

    // optional .gt.internal.msg.Rect pick_off_search_rect = 5;
    if (has_pick_off_search_rect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pick_off_search_rect());
    }

    // optional .gt.internal.msg.Rect bat_detect_rect = 6;
    if (has_bat_detect_rect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bat_detect_rect());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecROIs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecROIs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecROIs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecROIs::MergeFrom(const RecROIs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_throw_search_rect()) {
      mutable_throw_search_rect()->::gt::internal::msg::Rect::MergeFrom(from.throw_search_rect());
    }
    if (from.has_throw_track_rect()) {
      mutable_throw_track_rect()->::gt::internal::msg::Rect::MergeFrom(from.throw_track_rect());
    }
    if (from.has_hit_search_rect()) {
      mutable_hit_search_rect()->::gt::internal::msg::Rect::MergeFrom(from.hit_search_rect());
    }
    if (from.has_hit_track_rect()) {
      mutable_hit_track_rect()->::gt::internal::msg::Rect::MergeFrom(from.hit_track_rect());
    }
    if (from.has_pick_off_search_rect()) {
      mutable_pick_off_search_rect()->::gt::internal::msg::Rect::MergeFrom(from.pick_off_search_rect());
    }
    if (from.has_bat_detect_rect()) {
      mutable_bat_detect_rect()->::gt::internal::msg::Rect::MergeFrom(from.bat_detect_rect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecROIs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecROIs::CopyFrom(const RecROIs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecROIs::IsInitialized() const {

  if (has_throw_search_rect()) {
    if (!this->throw_search_rect().IsInitialized()) return false;
  }
  if (has_throw_track_rect()) {
    if (!this->throw_track_rect().IsInitialized()) return false;
  }
  if (has_hit_search_rect()) {
    if (!this->hit_search_rect().IsInitialized()) return false;
  }
  if (has_hit_track_rect()) {
    if (!this->hit_track_rect().IsInitialized()) return false;
  }
  if (has_pick_off_search_rect()) {
    if (!this->pick_off_search_rect().IsInitialized()) return false;
  }
  if (has_bat_detect_rect()) {
    if (!this->bat_detect_rect().IsInitialized()) return false;
  }
  return true;
}

void RecROIs::Swap(RecROIs* other) {
  if (other != this) {
    std::swap(throw_search_rect_, other->throw_search_rect_);
    std::swap(throw_track_rect_, other->throw_track_rect_);
    std::swap(hit_search_rect_, other->hit_search_rect_);
    std::swap(hit_track_rect_, other->hit_track_rect_);
    std::swap(pick_off_search_rect_, other->pick_off_search_rect_);
    std::swap(bat_detect_rect_, other->bat_detect_rect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecROIs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecROIs_descriptor_;
  metadata.reflection = RecROIs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecognizeParameters::kCorrCoefFieldNumber;
const int RecognizeParameters::kSkoCoefFieldNumber;
const int RecognizeParameters::kSearchAreaSizeFieldNumber;
const int RecognizeParameters::kMinSkoTemplateFieldNumber;
const int RecognizeParameters::kMaxAngleDirectionsFieldNumber;
const int RecognizeParameters::kMinSpeedFieldNumber;
const int RecognizeParameters::kCannyThresMinFieldNumber;
const int RecognizeParameters::kCannyThresMaxFieldNumber;
const int RecognizeParameters::kMaxAreaFieldNumber;
const int RecognizeParameters::kMinAreaFieldNumber;
const int RecognizeParameters::kCircularityCoeffFieldNumber;
#endif  // !_MSC_VER

RecognizeParameters::RecognizeParameters()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt.internal.msg.RecognizeParameters)
}

void RecognizeParameters::InitAsDefaultInstance() {
}

RecognizeParameters::RecognizeParameters(const RecognizeParameters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt.internal.msg.RecognizeParameters)
}

void RecognizeParameters::SharedCtor() {
  _cached_size_ = 0;
  corr_coef_ = 0;
  sko_coef_ = 0;
  search_area_size_ = 0;
  min_sko_template_ = 0;
  max_angle_directions_ = 0;
  min_speed_ = 0;
  canny_thres_min_ = 0;
  canny_thres_max_ = 0;
  max_area_ = 0;
  min_area_ = 0;
  circularity_coeff_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecognizeParameters::~RecognizeParameters() {
  // @@protoc_insertion_point(destructor:gt.internal.msg.RecognizeParameters)
  SharedDtor();
}

void RecognizeParameters::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecognizeParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecognizeParameters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecognizeParameters_descriptor_;
}

const RecognizeParameters& RecognizeParameters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2einternal_2eproto();
  return *default_instance_;
}

RecognizeParameters* RecognizeParameters::default_instance_ = NULL;

RecognizeParameters* RecognizeParameters::New() const {
  return new RecognizeParameters;
}

void RecognizeParameters::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RecognizeParameters*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(corr_coef_, canny_thres_max_);
  }
  ZR_(max_area_, min_area_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecognizeParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt.internal.msg.RecognizeParameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double corr_coef = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &corr_coef_)));
          set_has_corr_coef();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_sko_coef;
        break;
      }

      // optional double sko_coef = 2;
      case 2: {
        if (tag == 17) {
         parse_sko_coef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sko_coef_)));
          set_has_sko_coef();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_search_area_size;
        break;
      }

      // optional int32 search_area_size = 3;
      case 3: {
        if (tag == 24) {
         parse_search_area_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &search_area_size_)));
          set_has_search_area_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_min_sko_template;
        break;
      }

      // optional double min_sko_template = 4;
      case 4: {
        if (tag == 33) {
         parse_min_sko_template:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_sko_template_)));
          set_has_min_sko_template();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_max_angle_directions;
        break;
      }

      // optional double max_angle_directions = 5;
      case 5: {
        if (tag == 41) {
         parse_max_angle_directions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_angle_directions_)));
          set_has_max_angle_directions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_min_speed;
        break;
      }

      // optional double min_speed = 6;
      case 6: {
        if (tag == 49) {
         parse_min_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_speed_)));
          set_has_min_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_canny_thres_min;
        break;
      }

      // optional int32 canny_thres_min = 7;
      case 7: {
        if (tag == 56) {
         parse_canny_thres_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &canny_thres_min_)));
          set_has_canny_thres_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_canny_thres_max;
        break;
      }

      // optional int32 canny_thres_max = 8;
      case 8: {
        if (tag == 64) {
         parse_canny_thres_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &canny_thres_max_)));
          set_has_canny_thres_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_max_area;
        break;
      }

      // optional int32 max_area = 9;
      case 9: {
        if (tag == 72) {
         parse_max_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_area_)));
          set_has_max_area();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_min_area;
        break;
      }

      // optional int32 min_area = 10;
      case 10: {
        if (tag == 80) {
         parse_min_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_area_)));
          set_has_min_area();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_circularity_coeff;
        break;
      }

      // optional double circularity_coeff = 11;
      case 11: {
        if (tag == 89) {
         parse_circularity_coeff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &circularity_coeff_)));
          set_has_circularity_coeff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt.internal.msg.RecognizeParameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt.internal.msg.RecognizeParameters)
  return false;
#undef DO_
}

void RecognizeParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt.internal.msg.RecognizeParameters)
  // optional double corr_coef = 1;
  if (has_corr_coef()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->corr_coef(), output);
  }

  // optional double sko_coef = 2;
  if (has_sko_coef()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->sko_coef(), output);
  }

  // optional int32 search_area_size = 3;
  if (has_search_area_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->search_area_size(), output);
  }

  // optional double min_sko_template = 4;
  if (has_min_sko_template()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->min_sko_template(), output);
  }

  // optional double max_angle_directions = 5;
  if (has_max_angle_directions()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->max_angle_directions(), output);
  }

  // optional double min_speed = 6;
  if (has_min_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->min_speed(), output);
  }

  // optional int32 canny_thres_min = 7;
  if (has_canny_thres_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->canny_thres_min(), output);
  }

  // optional int32 canny_thres_max = 8;
  if (has_canny_thres_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->canny_thres_max(), output);
  }

  // optional int32 max_area = 9;
  if (has_max_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->max_area(), output);
  }

  // optional int32 min_area = 10;
  if (has_min_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->min_area(), output);
  }

  // optional double circularity_coeff = 11;
  if (has_circularity_coeff()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->circularity_coeff(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gt.internal.msg.RecognizeParameters)
}

::google::protobuf::uint8* RecognizeParameters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt.internal.msg.RecognizeParameters)
  // optional double corr_coef = 1;
  if (has_corr_coef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->corr_coef(), target);
  }

  // optional double sko_coef = 2;
  if (has_sko_coef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->sko_coef(), target);
  }

  // optional int32 search_area_size = 3;
  if (has_search_area_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->search_area_size(), target);
  }

  // optional double min_sko_template = 4;
  if (has_min_sko_template()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->min_sko_template(), target);
  }

  // optional double max_angle_directions = 5;
  if (has_max_angle_directions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->max_angle_directions(), target);
  }

  // optional double min_speed = 6;
  if (has_min_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->min_speed(), target);
  }

  // optional int32 canny_thres_min = 7;
  if (has_canny_thres_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->canny_thres_min(), target);
  }

  // optional int32 canny_thres_max = 8;
  if (has_canny_thres_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->canny_thres_max(), target);
  }

  // optional int32 max_area = 9;
  if (has_max_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->max_area(), target);
  }

  // optional int32 min_area = 10;
  if (has_min_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->min_area(), target);
  }

  // optional double circularity_coeff = 11;
  if (has_circularity_coeff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->circularity_coeff(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gt.internal.msg.RecognizeParameters)
  return target;
}

int RecognizeParameters::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double corr_coef = 1;
    if (has_corr_coef()) {
      total_size += 1 + 8;
    }

    // optional double sko_coef = 2;
    if (has_sko_coef()) {
      total_size += 1 + 8;
    }

    // optional int32 search_area_size = 3;
    if (has_search_area_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->search_area_size());
    }

    // optional double min_sko_template = 4;
    if (has_min_sko_template()) {
      total_size += 1 + 8;
    }

    // optional double max_angle_directions = 5;
    if (has_max_angle_directions()) {
      total_size += 1 + 8;
    }

    // optional double min_speed = 6;
    if (has_min_speed()) {
      total_size += 1 + 8;
    }

    // optional int32 canny_thres_min = 7;
    if (has_canny_thres_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->canny_thres_min());
    }

    // optional int32 canny_thres_max = 8;
    if (has_canny_thres_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->canny_thres_max());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 max_area = 9;
    if (has_max_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_area());
    }

    // optional int32 min_area = 10;
    if (has_min_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_area());
    }

    // optional double circularity_coeff = 11;
    if (has_circularity_coeff()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecognizeParameters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecognizeParameters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecognizeParameters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecognizeParameters::MergeFrom(const RecognizeParameters& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_corr_coef()) {
      set_corr_coef(from.corr_coef());
    }
    if (from.has_sko_coef()) {
      set_sko_coef(from.sko_coef());
    }
    if (from.has_search_area_size()) {
      set_search_area_size(from.search_area_size());
    }
    if (from.has_min_sko_template()) {
      set_min_sko_template(from.min_sko_template());
    }
    if (from.has_max_angle_directions()) {
      set_max_angle_directions(from.max_angle_directions());
    }
    if (from.has_min_speed()) {
      set_min_speed(from.min_speed());
    }
    if (from.has_canny_thres_min()) {
      set_canny_thres_min(from.canny_thres_min());
    }
    if (from.has_canny_thres_max()) {
      set_canny_thres_max(from.canny_thres_max());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_area()) {
      set_max_area(from.max_area());
    }
    if (from.has_min_area()) {
      set_min_area(from.min_area());
    }
    if (from.has_circularity_coeff()) {
      set_circularity_coeff(from.circularity_coeff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecognizeParameters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognizeParameters::CopyFrom(const RecognizeParameters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizeParameters::IsInitialized() const {

  return true;
}

void RecognizeParameters::Swap(RecognizeParameters* other) {
  if (other != this) {
    std::swap(corr_coef_, other->corr_coef_);
    std::swap(sko_coef_, other->sko_coef_);
    std::swap(search_area_size_, other->search_area_size_);
    std::swap(min_sko_template_, other->min_sko_template_);
    std::swap(max_angle_directions_, other->max_angle_directions_);
    std::swap(min_speed_, other->min_speed_);
    std::swap(canny_thres_min_, other->canny_thres_min_);
    std::swap(canny_thres_max_, other->canny_thres_max_);
    std::swap(max_area_, other->max_area_);
    std::swap(min_area_, other->min_area_);
    std::swap(circularity_coeff_, other->circularity_coeff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecognizeParameters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecognizeParameters_descriptor_;
  metadata.reflection = RecognizeParameters_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HardwareCameraParameters::kExposureFieldNumber;
const int HardwareCameraParameters::kMinExposureFieldNumber;
const int HardwareCameraParameters::kMaxExposureFieldNumber;
const int HardwareCameraParameters::kPixelClockFieldNumber;
const int HardwareCameraParameters::kMinPixelClockFieldNumber;
const int HardwareCameraParameters::kMaxPixelClockFieldNumber;
const int HardwareCameraParameters::kFrameRateFieldNumber;
const int HardwareCameraParameters::kMinFrameRateFieldNumber;
const int HardwareCameraParameters::kMaxFrameRateFieldNumber;
const int HardwareCameraParameters::kWidthFieldNumber;
const int HardwareCameraParameters::kHeightFieldNumber;
const int HardwareCameraParameters::kGainFieldNumber;
const int HardwareCameraParameters::kDebounceEnableFieldNumber;
const int HardwareCameraParameters::kDebounceValueFieldNumber;
const int HardwareCameraParameters::kTriggerModeFieldNumber;
const int HardwareCameraParameters::kFocusingFieldNumber;
const int HardwareCameraParameters::kTriggerModeEnableFieldNumber;
#endif  // !_MSC_VER

HardwareCameraParameters::HardwareCameraParameters()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt.internal.msg.HardwareCameraParameters)
}

void HardwareCameraParameters::InitAsDefaultInstance() {
}

HardwareCameraParameters::HardwareCameraParameters(const HardwareCameraParameters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt.internal.msg.HardwareCameraParameters)
}

void HardwareCameraParameters::SharedCtor() {
  _cached_size_ = 0;
  exposure_ = 0;
  min_exposure_ = 0;
  max_exposure_ = 0;
  pixel_clock_ = 0;
  min_pixel_clock_ = 0;
  max_pixel_clock_ = 0;
  frame_rate_ = 0;
  min_frame_rate_ = 0;
  max_frame_rate_ = 0;
  width_ = 0;
  height_ = 0;
  gain_ = 0;
  debounce_enable_ = false;
  debounce_value_ = 0;
  trigger_mode_ = 0;
  focusing_ = 0;
  trigger_mode_enable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HardwareCameraParameters::~HardwareCameraParameters() {
  // @@protoc_insertion_point(destructor:gt.internal.msg.HardwareCameraParameters)
  SharedDtor();
}

void HardwareCameraParameters::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HardwareCameraParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HardwareCameraParameters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HardwareCameraParameters_descriptor_;
}

const HardwareCameraParameters& HardwareCameraParameters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2einternal_2eproto();
  return *default_instance_;
}

HardwareCameraParameters* HardwareCameraParameters::default_instance_ = NULL;

HardwareCameraParameters* HardwareCameraParameters::New() const {
  return new HardwareCameraParameters;
}

void HardwareCameraParameters::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HardwareCameraParameters*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(exposure_, max_pixel_clock_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(width_, debounce_enable_);
    focusing_ = 0;
  }
  trigger_mode_enable_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HardwareCameraParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt.internal.msg.HardwareCameraParameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double exposure = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exposure_)));
          set_has_exposure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_min_exposure;
        break;
      }

      // optional double min_exposure = 2;
      case 2: {
        if (tag == 17) {
         parse_min_exposure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_exposure_)));
          set_has_min_exposure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_max_exposure;
        break;
      }

      // optional double max_exposure = 3;
      case 3: {
        if (tag == 25) {
         parse_max_exposure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_exposure_)));
          set_has_max_exposure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pixel_clock;
        break;
      }

      // optional int32 pixel_clock = 4;
      case 4: {
        if (tag == 32) {
         parse_pixel_clock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pixel_clock_)));
          set_has_pixel_clock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_min_pixel_clock;
        break;
      }

      // optional int32 min_pixel_clock = 5;
      case 5: {
        if (tag == 40) {
         parse_min_pixel_clock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_pixel_clock_)));
          set_has_min_pixel_clock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_max_pixel_clock;
        break;
      }

      // optional int32 max_pixel_clock = 6;
      case 6: {
        if (tag == 48) {
         parse_max_pixel_clock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_pixel_clock_)));
          set_has_max_pixel_clock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_frame_rate;
        break;
      }

      // optional double frame_rate = 7;
      case 7: {
        if (tag == 57) {
         parse_frame_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frame_rate_)));
          set_has_frame_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_min_frame_rate;
        break;
      }

      // optional double min_frame_rate = 8;
      case 8: {
        if (tag == 65) {
         parse_min_frame_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_frame_rate_)));
          set_has_min_frame_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_max_frame_rate;
        break;
      }

      // optional double max_frame_rate = 9;
      case 9: {
        if (tag == 73) {
         parse_max_frame_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_frame_rate_)));
          set_has_max_frame_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_width;
        break;
      }

      // optional int32 width = 10;
      case 10: {
        if (tag == 80) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_height;
        break;
      }

      // optional int32 height = 11;
      case 11: {
        if (tag == 88) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_gain;
        break;
      }

      // optional int32 gain = 12;
      case 12: {
        if (tag == 96) {
         parse_gain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gain_)));
          set_has_gain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_debounce_enable;
        break;
      }

      // optional bool debounce_enable = 13;
      case 13: {
        if (tag == 104) {
         parse_debounce_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debounce_enable_)));
          set_has_debounce_enable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_debounce_value;
        break;
      }

      // optional int32 debounce_value = 14;
      case 14: {
        if (tag == 112) {
         parse_debounce_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &debounce_value_)));
          set_has_debounce_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_trigger_mode;
        break;
      }

      // optional int32 trigger_mode = 15;
      case 15: {
        if (tag == 120) {
         parse_trigger_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trigger_mode_)));
          set_has_trigger_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_focusing;
        break;
      }

      // optional int32 focusing = 16;
      case 16: {
        if (tag == 128) {
         parse_focusing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &focusing_)));
          set_has_focusing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_trigger_mode_enable;
        break;
      }

      // optional bool trigger_mode_enable = 17;
      case 17: {
        if (tag == 136) {
         parse_trigger_mode_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trigger_mode_enable_)));
          set_has_trigger_mode_enable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt.internal.msg.HardwareCameraParameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt.internal.msg.HardwareCameraParameters)
  return false;
#undef DO_
}

void HardwareCameraParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt.internal.msg.HardwareCameraParameters)
  // optional double exposure = 1;
  if (has_exposure()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->exposure(), output);
  }

  // optional double min_exposure = 2;
  if (has_min_exposure()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->min_exposure(), output);
  }

  // optional double max_exposure = 3;
  if (has_max_exposure()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max_exposure(), output);
  }

  // optional int32 pixel_clock = 4;
  if (has_pixel_clock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pixel_clock(), output);
  }

  // optional int32 min_pixel_clock = 5;
  if (has_min_pixel_clock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->min_pixel_clock(), output);
  }

  // optional int32 max_pixel_clock = 6;
  if (has_max_pixel_clock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_pixel_clock(), output);
  }

  // optional double frame_rate = 7;
  if (has_frame_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->frame_rate(), output);
  }

  // optional double min_frame_rate = 8;
  if (has_min_frame_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->min_frame_rate(), output);
  }

  // optional double max_frame_rate = 9;
  if (has_max_frame_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->max_frame_rate(), output);
  }

  // optional int32 width = 10;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->width(), output);
  }

  // optional int32 height = 11;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->height(), output);
  }

  // optional int32 gain = 12;
  if (has_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->gain(), output);
  }

  // optional bool debounce_enable = 13;
  if (has_debounce_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->debounce_enable(), output);
  }

  // optional int32 debounce_value = 14;
  if (has_debounce_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->debounce_value(), output);
  }

  // optional int32 trigger_mode = 15;
  if (has_trigger_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->trigger_mode(), output);
  }

  // optional int32 focusing = 16;
  if (has_focusing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->focusing(), output);
  }

  // optional bool trigger_mode_enable = 17;
  if (has_trigger_mode_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->trigger_mode_enable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gt.internal.msg.HardwareCameraParameters)
}

::google::protobuf::uint8* HardwareCameraParameters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt.internal.msg.HardwareCameraParameters)
  // optional double exposure = 1;
  if (has_exposure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->exposure(), target);
  }

  // optional double min_exposure = 2;
  if (has_min_exposure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->min_exposure(), target);
  }

  // optional double max_exposure = 3;
  if (has_max_exposure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max_exposure(), target);
  }

  // optional int32 pixel_clock = 4;
  if (has_pixel_clock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pixel_clock(), target);
  }

  // optional int32 min_pixel_clock = 5;
  if (has_min_pixel_clock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->min_pixel_clock(), target);
  }

  // optional int32 max_pixel_clock = 6;
  if (has_max_pixel_clock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_pixel_clock(), target);
  }

  // optional double frame_rate = 7;
  if (has_frame_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->frame_rate(), target);
  }

  // optional double min_frame_rate = 8;
  if (has_min_frame_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->min_frame_rate(), target);
  }

  // optional double max_frame_rate = 9;
  if (has_max_frame_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->max_frame_rate(), target);
  }

  // optional int32 width = 10;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->width(), target);
  }

  // optional int32 height = 11;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->height(), target);
  }

  // optional int32 gain = 12;
  if (has_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->gain(), target);
  }

  // optional bool debounce_enable = 13;
  if (has_debounce_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->debounce_enable(), target);
  }

  // optional int32 debounce_value = 14;
  if (has_debounce_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->debounce_value(), target);
  }

  // optional int32 trigger_mode = 15;
  if (has_trigger_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->trigger_mode(), target);
  }

  // optional int32 focusing = 16;
  if (has_focusing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->focusing(), target);
  }

  // optional bool trigger_mode_enable = 17;
  if (has_trigger_mode_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->trigger_mode_enable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gt.internal.msg.HardwareCameraParameters)
  return target;
}

int HardwareCameraParameters::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double exposure = 1;
    if (has_exposure()) {
      total_size += 1 + 8;
    }

    // optional double min_exposure = 2;
    if (has_min_exposure()) {
      total_size += 1 + 8;
    }

    // optional double max_exposure = 3;
    if (has_max_exposure()) {
      total_size += 1 + 8;
    }

    // optional int32 pixel_clock = 4;
    if (has_pixel_clock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pixel_clock());
    }

    // optional int32 min_pixel_clock = 5;
    if (has_min_pixel_clock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_pixel_clock());
    }

    // optional int32 max_pixel_clock = 6;
    if (has_max_pixel_clock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_pixel_clock());
    }

    // optional double frame_rate = 7;
    if (has_frame_rate()) {
      total_size += 1 + 8;
    }

    // optional double min_frame_rate = 8;
    if (has_min_frame_rate()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double max_frame_rate = 9;
    if (has_max_frame_rate()) {
      total_size += 1 + 8;
    }

    // optional int32 width = 10;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 11;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 gain = 12;
    if (has_gain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gain());
    }

    // optional bool debounce_enable = 13;
    if (has_debounce_enable()) {
      total_size += 1 + 1;
    }

    // optional int32 debounce_value = 14;
    if (has_debounce_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->debounce_value());
    }

    // optional int32 trigger_mode = 15;
    if (has_trigger_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trigger_mode());
    }

    // optional int32 focusing = 16;
    if (has_focusing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->focusing());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool trigger_mode_enable = 17;
    if (has_trigger_mode_enable()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HardwareCameraParameters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HardwareCameraParameters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HardwareCameraParameters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HardwareCameraParameters::MergeFrom(const HardwareCameraParameters& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exposure()) {
      set_exposure(from.exposure());
    }
    if (from.has_min_exposure()) {
      set_min_exposure(from.min_exposure());
    }
    if (from.has_max_exposure()) {
      set_max_exposure(from.max_exposure());
    }
    if (from.has_pixel_clock()) {
      set_pixel_clock(from.pixel_clock());
    }
    if (from.has_min_pixel_clock()) {
      set_min_pixel_clock(from.min_pixel_clock());
    }
    if (from.has_max_pixel_clock()) {
      set_max_pixel_clock(from.max_pixel_clock());
    }
    if (from.has_frame_rate()) {
      set_frame_rate(from.frame_rate());
    }
    if (from.has_min_frame_rate()) {
      set_min_frame_rate(from.min_frame_rate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_frame_rate()) {
      set_max_frame_rate(from.max_frame_rate());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_gain()) {
      set_gain(from.gain());
    }
    if (from.has_debounce_enable()) {
      set_debounce_enable(from.debounce_enable());
    }
    if (from.has_debounce_value()) {
      set_debounce_value(from.debounce_value());
    }
    if (from.has_trigger_mode()) {
      set_trigger_mode(from.trigger_mode());
    }
    if (from.has_focusing()) {
      set_focusing(from.focusing());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_trigger_mode_enable()) {
      set_trigger_mode_enable(from.trigger_mode_enable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HardwareCameraParameters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HardwareCameraParameters::CopyFrom(const HardwareCameraParameters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HardwareCameraParameters::IsInitialized() const {

  return true;
}

void HardwareCameraParameters::Swap(HardwareCameraParameters* other) {
  if (other != this) {
    std::swap(exposure_, other->exposure_);
    std::swap(min_exposure_, other->min_exposure_);
    std::swap(max_exposure_, other->max_exposure_);
    std::swap(pixel_clock_, other->pixel_clock_);
    std::swap(min_pixel_clock_, other->min_pixel_clock_);
    std::swap(max_pixel_clock_, other->max_pixel_clock_);
    std::swap(frame_rate_, other->frame_rate_);
    std::swap(min_frame_rate_, other->min_frame_rate_);
    std::swap(max_frame_rate_, other->max_frame_rate_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(gain_, other->gain_);
    std::swap(debounce_enable_, other->debounce_enable_);
    std::swap(debounce_value_, other->debounce_value_);
    std::swap(trigger_mode_, other->trigger_mode_);
    std::swap(focusing_, other->focusing_);
    std::swap(trigger_mode_enable_, other->trigger_mode_enable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HardwareCameraParameters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HardwareCameraParameters_descriptor_;
  metadata.reflection = HardwareCameraParameters_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PictureCameraParameters::kPictureParamFlagFieldNumber;
const int PictureCameraParameters::kWhiteBalanceFieldNumber;
const int PictureCameraParameters::kWbRectFieldNumber;
const int PictureCameraParameters::kGammaFieldNumber;
const int PictureCameraParameters::kSharpFieldNumber;
const int PictureCameraParameters::kSaturationFieldNumber;
const int PictureCameraParameters::kRSaturationFieldNumber;
const int PictureCameraParameters::kGSaturationFieldNumber;
const int PictureCameraParameters::kBSaturationFieldNumber;
const int PictureCameraParameters::kHueFieldNumber;
const int PictureCameraParameters::kShadowCoefFieldNumber;
const int PictureCameraParameters::kShadowThresholdFieldNumber;
const int PictureCameraParameters::kShadowGaussWindowSizeFieldNumber;
const int PictureCameraParameters::kRotateFieldNumber;
#endif  // !_MSC_VER

PictureCameraParameters::PictureCameraParameters()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt.internal.msg.PictureCameraParameters)
}

void PictureCameraParameters::InitAsDefaultInstance() {
  wb_rect_ = const_cast< ::gt::internal::msg::Rect*>(&::gt::internal::msg::Rect::default_instance());
}

PictureCameraParameters::PictureCameraParameters(const PictureCameraParameters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt.internal.msg.PictureCameraParameters)
}

void PictureCameraParameters::SharedCtor() {
  _cached_size_ = 0;
  picture_param_flag_ = 0;
  white_balance_ = 0;
  wb_rect_ = NULL;
  gamma_ = 0;
  sharp_ = 0;
  saturation_ = 0;
  r_saturation_ = 0;
  g_saturation_ = 0;
  b_saturation_ = 0;
  hue_ = 0;
  shadow_coef_ = 0;
  shadow_threshold_ = 0;
  shadow_gauss_window_size_ = 0;
  rotate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PictureCameraParameters::~PictureCameraParameters() {
  // @@protoc_insertion_point(destructor:gt.internal.msg.PictureCameraParameters)
  SharedDtor();
}

void PictureCameraParameters::SharedDtor() {
  if (this != default_instance_) {
    delete wb_rect_;
  }
}

void PictureCameraParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PictureCameraParameters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PictureCameraParameters_descriptor_;
}

const PictureCameraParameters& PictureCameraParameters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2einternal_2eproto();
  return *default_instance_;
}

PictureCameraParameters* PictureCameraParameters::default_instance_ = NULL;

PictureCameraParameters* PictureCameraParameters::New() const {
  return new PictureCameraParameters;
}

void PictureCameraParameters::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PictureCameraParameters*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(picture_param_flag_, white_balance_);
    ZR_(gamma_, g_saturation_);
    if (has_wb_rect()) {
      if (wb_rect_ != NULL) wb_rect_->::gt::internal::msg::Rect::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(b_saturation_, rotate_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PictureCameraParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt.internal.msg.PictureCameraParameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 picture_param_flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &picture_param_flag_)));
          set_has_picture_param_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_white_balance;
        break;
      }

      // optional int32 white_balance = 2;
      case 2: {
        if (tag == 16) {
         parse_white_balance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &white_balance_)));
          set_has_white_balance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_wb_rect;
        break;
      }

      // optional .gt.internal.msg.Rect wb_rect = 3;
      case 3: {
        if (tag == 26) {
         parse_wb_rect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wb_rect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_gamma;
        break;
      }

      // optional double gamma = 4;
      case 4: {
        if (tag == 33) {
         parse_gamma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gamma_)));
          set_has_gamma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_sharp;
        break;
      }

      // optional double sharp = 5;
      case 5: {
        if (tag == 41) {
         parse_sharp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sharp_)));
          set_has_sharp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_saturation;
        break;
      }

      // optional int32 saturation = 6;
      case 6: {
        if (tag == 48) {
         parse_saturation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &saturation_)));
          set_has_saturation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_r_saturation;
        break;
      }

      // optional int32 r_saturation = 7;
      case 7: {
        if (tag == 56) {
         parse_r_saturation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &r_saturation_)));
          set_has_r_saturation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_g_saturation;
        break;
      }

      // optional int32 g_saturation = 8;
      case 8: {
        if (tag == 64) {
         parse_g_saturation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &g_saturation_)));
          set_has_g_saturation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_b_saturation;
        break;
      }

      // optional int32 b_saturation = 9;
      case 9: {
        if (tag == 72) {
         parse_b_saturation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &b_saturation_)));
          set_has_b_saturation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_hue;
        break;
      }

      // optional int32 hue = 10;
      case 10: {
        if (tag == 80) {
         parse_hue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hue_)));
          set_has_hue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_shadow_coef;
        break;
      }

      // optional double shadow_coef = 11;
      case 11: {
        if (tag == 89) {
         parse_shadow_coef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shadow_coef_)));
          set_has_shadow_coef();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_shadow_threshold;
        break;
      }

      // optional double shadow_threshold = 12;
      case 12: {
        if (tag == 97) {
         parse_shadow_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shadow_threshold_)));
          set_has_shadow_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_shadow_gauss_window_size;
        break;
      }

      // optional int32 shadow_gauss_window_size = 13;
      case 13: {
        if (tag == 104) {
         parse_shadow_gauss_window_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shadow_gauss_window_size_)));
          set_has_shadow_gauss_window_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_rotate;
        break;
      }

      // optional int32 rotate = 14;
      case 14: {
        if (tag == 112) {
         parse_rotate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rotate_)));
          set_has_rotate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt.internal.msg.PictureCameraParameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt.internal.msg.PictureCameraParameters)
  return false;
#undef DO_
}

void PictureCameraParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt.internal.msg.PictureCameraParameters)
  // optional int32 picture_param_flag = 1;
  if (has_picture_param_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->picture_param_flag(), output);
  }

  // optional int32 white_balance = 2;
  if (has_white_balance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->white_balance(), output);
  }

  // optional .gt.internal.msg.Rect wb_rect = 3;
  if (has_wb_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->wb_rect(), output);
  }

  // optional double gamma = 4;
  if (has_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->gamma(), output);
  }

  // optional double sharp = 5;
  if (has_sharp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->sharp(), output);
  }

  // optional int32 saturation = 6;
  if (has_saturation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->saturation(), output);
  }

  // optional int32 r_saturation = 7;
  if (has_r_saturation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->r_saturation(), output);
  }

  // optional int32 g_saturation = 8;
  if (has_g_saturation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->g_saturation(), output);
  }

  // optional int32 b_saturation = 9;
  if (has_b_saturation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->b_saturation(), output);
  }

  // optional int32 hue = 10;
  if (has_hue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->hue(), output);
  }

  // optional double shadow_coef = 11;
  if (has_shadow_coef()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->shadow_coef(), output);
  }

  // optional double shadow_threshold = 12;
  if (has_shadow_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->shadow_threshold(), output);
  }

  // optional int32 shadow_gauss_window_size = 13;
  if (has_shadow_gauss_window_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->shadow_gauss_window_size(), output);
  }

  // optional int32 rotate = 14;
  if (has_rotate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->rotate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gt.internal.msg.PictureCameraParameters)
}

::google::protobuf::uint8* PictureCameraParameters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt.internal.msg.PictureCameraParameters)
  // optional int32 picture_param_flag = 1;
  if (has_picture_param_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->picture_param_flag(), target);
  }

  // optional int32 white_balance = 2;
  if (has_white_balance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->white_balance(), target);
  }

  // optional .gt.internal.msg.Rect wb_rect = 3;
  if (has_wb_rect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->wb_rect(), target);
  }

  // optional double gamma = 4;
  if (has_gamma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->gamma(), target);
  }

  // optional double sharp = 5;
  if (has_sharp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->sharp(), target);
  }

  // optional int32 saturation = 6;
  if (has_saturation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->saturation(), target);
  }

  // optional int32 r_saturation = 7;
  if (has_r_saturation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->r_saturation(), target);
  }

  // optional int32 g_saturation = 8;
  if (has_g_saturation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->g_saturation(), target);
  }

  // optional int32 b_saturation = 9;
  if (has_b_saturation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->b_saturation(), target);
  }

  // optional int32 hue = 10;
  if (has_hue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->hue(), target);
  }

  // optional double shadow_coef = 11;
  if (has_shadow_coef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->shadow_coef(), target);
  }

  // optional double shadow_threshold = 12;
  if (has_shadow_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->shadow_threshold(), target);
  }

  // optional int32 shadow_gauss_window_size = 13;
  if (has_shadow_gauss_window_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->shadow_gauss_window_size(), target);
  }

  // optional int32 rotate = 14;
  if (has_rotate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->rotate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gt.internal.msg.PictureCameraParameters)
  return target;
}

int PictureCameraParameters::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 picture_param_flag = 1;
    if (has_picture_param_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->picture_param_flag());
    }

    // optional int32 white_balance = 2;
    if (has_white_balance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->white_balance());
    }

    // optional .gt.internal.msg.Rect wb_rect = 3;
    if (has_wb_rect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wb_rect());
    }

    // optional double gamma = 4;
    if (has_gamma()) {
      total_size += 1 + 8;
    }

    // optional double sharp = 5;
    if (has_sharp()) {
      total_size += 1 + 8;
    }

    // optional int32 saturation = 6;
    if (has_saturation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->saturation());
    }

    // optional int32 r_saturation = 7;
    if (has_r_saturation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->r_saturation());
    }

    // optional int32 g_saturation = 8;
    if (has_g_saturation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->g_saturation());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 b_saturation = 9;
    if (has_b_saturation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b_saturation());
    }

    // optional int32 hue = 10;
    if (has_hue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hue());
    }

    // optional double shadow_coef = 11;
    if (has_shadow_coef()) {
      total_size += 1 + 8;
    }

    // optional double shadow_threshold = 12;
    if (has_shadow_threshold()) {
      total_size += 1 + 8;
    }

    // optional int32 shadow_gauss_window_size = 13;
    if (has_shadow_gauss_window_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shadow_gauss_window_size());
    }

    // optional int32 rotate = 14;
    if (has_rotate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rotate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PictureCameraParameters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PictureCameraParameters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PictureCameraParameters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PictureCameraParameters::MergeFrom(const PictureCameraParameters& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_picture_param_flag()) {
      set_picture_param_flag(from.picture_param_flag());
    }
    if (from.has_white_balance()) {
      set_white_balance(from.white_balance());
    }
    if (from.has_wb_rect()) {
      mutable_wb_rect()->::gt::internal::msg::Rect::MergeFrom(from.wb_rect());
    }
    if (from.has_gamma()) {
      set_gamma(from.gamma());
    }
    if (from.has_sharp()) {
      set_sharp(from.sharp());
    }
    if (from.has_saturation()) {
      set_saturation(from.saturation());
    }
    if (from.has_r_saturation()) {
      set_r_saturation(from.r_saturation());
    }
    if (from.has_g_saturation()) {
      set_g_saturation(from.g_saturation());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_b_saturation()) {
      set_b_saturation(from.b_saturation());
    }
    if (from.has_hue()) {
      set_hue(from.hue());
    }
    if (from.has_shadow_coef()) {
      set_shadow_coef(from.shadow_coef());
    }
    if (from.has_shadow_threshold()) {
      set_shadow_threshold(from.shadow_threshold());
    }
    if (from.has_shadow_gauss_window_size()) {
      set_shadow_gauss_window_size(from.shadow_gauss_window_size());
    }
    if (from.has_rotate()) {
      set_rotate(from.rotate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PictureCameraParameters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PictureCameraParameters::CopyFrom(const PictureCameraParameters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PictureCameraParameters::IsInitialized() const {

  if (has_wb_rect()) {
    if (!this->wb_rect().IsInitialized()) return false;
  }
  return true;
}

void PictureCameraParameters::Swap(PictureCameraParameters* other) {
  if (other != this) {
    std::swap(picture_param_flag_, other->picture_param_flag_);
    std::swap(white_balance_, other->white_balance_);
    std::swap(wb_rect_, other->wb_rect_);
    std::swap(gamma_, other->gamma_);
    std::swap(sharp_, other->sharp_);
    std::swap(saturation_, other->saturation_);
    std::swap(r_saturation_, other->r_saturation_);
    std::swap(g_saturation_, other->g_saturation_);
    std::swap(b_saturation_, other->b_saturation_);
    std::swap(hue_, other->hue_);
    std::swap(shadow_coef_, other->shadow_coef_);
    std::swap(shadow_threshold_, other->shadow_threshold_);
    std::swap(shadow_gauss_window_size_, other->shadow_gauss_window_size_);
    std::swap(rotate_, other->rotate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PictureCameraParameters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PictureCameraParameters_descriptor_;
  metadata.reflection = PictureCameraParameters_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AutoExposureParameters::kGainFieldNumber;
const int AutoExposureParameters::kExposureFieldNumber;
const int AutoExposureParameters::kMinGainCoeffFieldNumber;
const int AutoExposureParameters::kMaxGainCoeffFieldNumber;
const int AutoExposureParameters::kMaxPercentFieldNumber;
const int AutoExposureParameters::kMinRelCoefFieldNumber;
const int AutoExposureParameters::kMaxRelCoefFieldNumber;
const int AutoExposureParameters::kMeanFieldNumber;
#endif  // !_MSC_VER

AutoExposureParameters::AutoExposureParameters()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt.internal.msg.AutoExposureParameters)
}

void AutoExposureParameters::InitAsDefaultInstance() {
}

AutoExposureParameters::AutoExposureParameters(const AutoExposureParameters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt.internal.msg.AutoExposureParameters)
}

void AutoExposureParameters::SharedCtor() {
  _cached_size_ = 0;
  gain_ = 0;
  exposure_ = 0;
  min_gain_coeff_ = 0;
  max_gain_coeff_ = 0;
  max_percent_ = 0;
  min_rel_coef_ = 0;
  max_rel_coef_ = 0;
  mean_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutoExposureParameters::~AutoExposureParameters() {
  // @@protoc_insertion_point(destructor:gt.internal.msg.AutoExposureParameters)
  SharedDtor();
}

void AutoExposureParameters::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AutoExposureParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoExposureParameters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutoExposureParameters_descriptor_;
}

const AutoExposureParameters& AutoExposureParameters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2einternal_2eproto();
  return *default_instance_;
}

AutoExposureParameters* AutoExposureParameters::default_instance_ = NULL;

AutoExposureParameters* AutoExposureParameters::New() const {
  return new AutoExposureParameters;
}

void AutoExposureParameters::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AutoExposureParameters*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(gain_, mean_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AutoExposureParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt.internal.msg.AutoExposureParameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double gain = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gain_)));
          set_has_gain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_exposure;
        break;
      }

      // optional double exposure = 2;
      case 2: {
        if (tag == 17) {
         parse_exposure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exposure_)));
          set_has_exposure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_min_gain_coeff;
        break;
      }

      // optional double min_gain_coeff = 3;
      case 3: {
        if (tag == 25) {
         parse_min_gain_coeff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_gain_coeff_)));
          set_has_min_gain_coeff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_max_gain_coeff;
        break;
      }

      // optional double max_gain_coeff = 4;
      case 4: {
        if (tag == 33) {
         parse_max_gain_coeff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_gain_coeff_)));
          set_has_max_gain_coeff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_max_percent;
        break;
      }

      // optional double max_percent = 5;
      case 5: {
        if (tag == 41) {
         parse_max_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_percent_)));
          set_has_max_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_min_rel_coef;
        break;
      }

      // optional double min_rel_coef = 6;
      case 6: {
        if (tag == 49) {
         parse_min_rel_coef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_rel_coef_)));
          set_has_min_rel_coef();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_max_rel_coef;
        break;
      }

      // optional double max_rel_coef = 7;
      case 7: {
        if (tag == 57) {
         parse_max_rel_coef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_rel_coef_)));
          set_has_max_rel_coef();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_mean;
        break;
      }

      // optional double mean = 8;
      case 8: {
        if (tag == 65) {
         parse_mean:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mean_)));
          set_has_mean();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt.internal.msg.AutoExposureParameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt.internal.msg.AutoExposureParameters)
  return false;
#undef DO_
}

void AutoExposureParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt.internal.msg.AutoExposureParameters)
  // optional double gain = 1;
  if (has_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->gain(), output);
  }

  // optional double exposure = 2;
  if (has_exposure()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->exposure(), output);
  }

  // optional double min_gain_coeff = 3;
  if (has_min_gain_coeff()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->min_gain_coeff(), output);
  }

  // optional double max_gain_coeff = 4;
  if (has_max_gain_coeff()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max_gain_coeff(), output);
  }

  // optional double max_percent = 5;
  if (has_max_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->max_percent(), output);
  }

  // optional double min_rel_coef = 6;
  if (has_min_rel_coef()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->min_rel_coef(), output);
  }

  // optional double max_rel_coef = 7;
  if (has_max_rel_coef()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->max_rel_coef(), output);
  }

  // optional double mean = 8;
  if (has_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->mean(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gt.internal.msg.AutoExposureParameters)
}

::google::protobuf::uint8* AutoExposureParameters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt.internal.msg.AutoExposureParameters)
  // optional double gain = 1;
  if (has_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->gain(), target);
  }

  // optional double exposure = 2;
  if (has_exposure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->exposure(), target);
  }

  // optional double min_gain_coeff = 3;
  if (has_min_gain_coeff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->min_gain_coeff(), target);
  }

  // optional double max_gain_coeff = 4;
  if (has_max_gain_coeff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max_gain_coeff(), target);
  }

  // optional double max_percent = 5;
  if (has_max_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->max_percent(), target);
  }

  // optional double min_rel_coef = 6;
  if (has_min_rel_coef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->min_rel_coef(), target);
  }

  // optional double max_rel_coef = 7;
  if (has_max_rel_coef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->max_rel_coef(), target);
  }

  // optional double mean = 8;
  if (has_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->mean(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gt.internal.msg.AutoExposureParameters)
  return target;
}

int AutoExposureParameters::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double gain = 1;
    if (has_gain()) {
      total_size += 1 + 8;
    }

    // optional double exposure = 2;
    if (has_exposure()) {
      total_size += 1 + 8;
    }

    // optional double min_gain_coeff = 3;
    if (has_min_gain_coeff()) {
      total_size += 1 + 8;
    }

    // optional double max_gain_coeff = 4;
    if (has_max_gain_coeff()) {
      total_size += 1 + 8;
    }

    // optional double max_percent = 5;
    if (has_max_percent()) {
      total_size += 1 + 8;
    }

    // optional double min_rel_coef = 6;
    if (has_min_rel_coef()) {
      total_size += 1 + 8;
    }

    // optional double max_rel_coef = 7;
    if (has_max_rel_coef()) {
      total_size += 1 + 8;
    }

    // optional double mean = 8;
    if (has_mean()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoExposureParameters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AutoExposureParameters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AutoExposureParameters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AutoExposureParameters::MergeFrom(const AutoExposureParameters& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gain()) {
      set_gain(from.gain());
    }
    if (from.has_exposure()) {
      set_exposure(from.exposure());
    }
    if (from.has_min_gain_coeff()) {
      set_min_gain_coeff(from.min_gain_coeff());
    }
    if (from.has_max_gain_coeff()) {
      set_max_gain_coeff(from.max_gain_coeff());
    }
    if (from.has_max_percent()) {
      set_max_percent(from.max_percent());
    }
    if (from.has_min_rel_coef()) {
      set_min_rel_coef(from.min_rel_coef());
    }
    if (from.has_max_rel_coef()) {
      set_max_rel_coef(from.max_rel_coef());
    }
    if (from.has_mean()) {
      set_mean(from.mean());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AutoExposureParameters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoExposureParameters::CopyFrom(const AutoExposureParameters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoExposureParameters::IsInitialized() const {

  return true;
}

void AutoExposureParameters::Swap(AutoExposureParameters* other) {
  if (other != this) {
    std::swap(gain_, other->gain_);
    std::swap(exposure_, other->exposure_);
    std::swap(min_gain_coeff_, other->min_gain_coeff_);
    std::swap(max_gain_coeff_, other->max_gain_coeff_);
    std::swap(max_percent_, other->max_percent_);
    std::swap(min_rel_coef_, other->min_rel_coef_);
    std::swap(max_rel_coef_, other->max_rel_coef_);
    std::swap(mean_, other->mean_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AutoExposureParameters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutoExposureParameters_descriptor_;
  metadata.reflection = AutoExposureParameters_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StreamCameraParameters::kRawFrameFieldNumber;
const int StreamCameraParameters::kSendFrameRateMainFieldNumber;
const int StreamCameraParameters::kSendFrameRateAddFieldNumber;
const int StreamCameraParameters::kPortSendStreamMainFieldNumber;
const int StreamCameraParameters::kPortSendStreamAddFieldNumber;
#endif  // !_MSC_VER

StreamCameraParameters::StreamCameraParameters()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt.internal.msg.StreamCameraParameters)
}

void StreamCameraParameters::InitAsDefaultInstance() {
}

StreamCameraParameters::StreamCameraParameters(const StreamCameraParameters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt.internal.msg.StreamCameraParameters)
}

void StreamCameraParameters::SharedCtor() {
  _cached_size_ = 0;
  raw_frame_ = 0;
  send_frame_rate_main_ = 0;
  send_frame_rate_add_ = 0;
  port_send_stream_main_ = 0;
  port_send_stream_add_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamCameraParameters::~StreamCameraParameters() {
  // @@protoc_insertion_point(destructor:gt.internal.msg.StreamCameraParameters)
  SharedDtor();
}

void StreamCameraParameters::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StreamCameraParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamCameraParameters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamCameraParameters_descriptor_;
}

const StreamCameraParameters& StreamCameraParameters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2einternal_2eproto();
  return *default_instance_;
}

StreamCameraParameters* StreamCameraParameters::default_instance_ = NULL;

StreamCameraParameters* StreamCameraParameters::New() const {
  return new StreamCameraParameters;
}

void StreamCameraParameters::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StreamCameraParameters*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(raw_frame_, port_send_stream_add_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamCameraParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt.internal.msg.StreamCameraParameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 raw_frame = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &raw_frame_)));
          set_has_raw_frame();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_send_frame_rate_main;
        break;
      }

      // optional int32 send_frame_rate_main = 4;
      case 4: {
        if (tag == 32) {
         parse_send_frame_rate_main:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_frame_rate_main_)));
          set_has_send_frame_rate_main();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_send_frame_rate_add;
        break;
      }

      // optional int32 send_frame_rate_add = 6;
      case 6: {
        if (tag == 48) {
         parse_send_frame_rate_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_frame_rate_add_)));
          set_has_send_frame_rate_add();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_port_send_stream_main;
        break;
      }

      // optional int32 port_send_stream_main = 8;
      case 8: {
        if (tag == 64) {
         parse_port_send_stream_main:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_send_stream_main_)));
          set_has_port_send_stream_main();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_port_send_stream_add;
        break;
      }

      // optional int32 port_send_stream_add = 9;
      case 9: {
        if (tag == 72) {
         parse_port_send_stream_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_send_stream_add_)));
          set_has_port_send_stream_add();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt.internal.msg.StreamCameraParameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt.internal.msg.StreamCameraParameters)
  return false;
#undef DO_
}

void StreamCameraParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt.internal.msg.StreamCameraParameters)
  // optional int32 raw_frame = 1;
  if (has_raw_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->raw_frame(), output);
  }

  // optional int32 send_frame_rate_main = 4;
  if (has_send_frame_rate_main()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->send_frame_rate_main(), output);
  }

  // optional int32 send_frame_rate_add = 6;
  if (has_send_frame_rate_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->send_frame_rate_add(), output);
  }

  // optional int32 port_send_stream_main = 8;
  if (has_port_send_stream_main()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->port_send_stream_main(), output);
  }

  // optional int32 port_send_stream_add = 9;
  if (has_port_send_stream_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->port_send_stream_add(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gt.internal.msg.StreamCameraParameters)
}

::google::protobuf::uint8* StreamCameraParameters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt.internal.msg.StreamCameraParameters)
  // optional int32 raw_frame = 1;
  if (has_raw_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->raw_frame(), target);
  }

  // optional int32 send_frame_rate_main = 4;
  if (has_send_frame_rate_main()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->send_frame_rate_main(), target);
  }

  // optional int32 send_frame_rate_add = 6;
  if (has_send_frame_rate_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->send_frame_rate_add(), target);
  }

  // optional int32 port_send_stream_main = 8;
  if (has_port_send_stream_main()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->port_send_stream_main(), target);
  }

  // optional int32 port_send_stream_add = 9;
  if (has_port_send_stream_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->port_send_stream_add(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gt.internal.msg.StreamCameraParameters)
  return target;
}

int StreamCameraParameters::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 raw_frame = 1;
    if (has_raw_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->raw_frame());
    }

    // optional int32 send_frame_rate_main = 4;
    if (has_send_frame_rate_main()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->send_frame_rate_main());
    }

    // optional int32 send_frame_rate_add = 6;
    if (has_send_frame_rate_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->send_frame_rate_add());
    }

    // optional int32 port_send_stream_main = 8;
    if (has_port_send_stream_main()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port_send_stream_main());
    }

    // optional int32 port_send_stream_add = 9;
    if (has_port_send_stream_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port_send_stream_add());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamCameraParameters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamCameraParameters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamCameraParameters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamCameraParameters::MergeFrom(const StreamCameraParameters& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raw_frame()) {
      set_raw_frame(from.raw_frame());
    }
    if (from.has_send_frame_rate_main()) {
      set_send_frame_rate_main(from.send_frame_rate_main());
    }
    if (from.has_send_frame_rate_add()) {
      set_send_frame_rate_add(from.send_frame_rate_add());
    }
    if (from.has_port_send_stream_main()) {
      set_port_send_stream_main(from.port_send_stream_main());
    }
    if (from.has_port_send_stream_add()) {
      set_port_send_stream_add(from.port_send_stream_add());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamCameraParameters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamCameraParameters::CopyFrom(const StreamCameraParameters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamCameraParameters::IsInitialized() const {

  return true;
}

void StreamCameraParameters::Swap(StreamCameraParameters* other) {
  if (other != this) {
    std::swap(raw_frame_, other->raw_frame_);
    std::swap(send_frame_rate_main_, other->send_frame_rate_main_);
    std::swap(send_frame_rate_add_, other->send_frame_rate_add_);
    std::swap(port_send_stream_main_, other->port_send_stream_main_);
    std::swap(port_send_stream_add_, other->port_send_stream_add_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamCameraParameters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamCameraParameters_descriptor_;
  metadata.reflection = StreamCameraParameters_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StreamCameraCommand::kTypeFieldNumber;
const int StreamCameraCommand::kVideoDurationFieldNumber;
const int StreamCameraCommand::kDescFieldNumber;
const int StreamCameraCommand::kStopFieldNumber;
#endif  // !_MSC_VER

StreamCameraCommand::StreamCameraCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt.internal.msg.StreamCameraCommand)
}

void StreamCameraCommand::InitAsDefaultInstance() {
}

StreamCameraCommand::StreamCameraCommand(const StreamCameraCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt.internal.msg.StreamCameraCommand)
}

void StreamCameraCommand::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  video_duration_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stop_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamCameraCommand::~StreamCameraCommand() {
  // @@protoc_insertion_point(destructor:gt.internal.msg.StreamCameraCommand)
  SharedDtor();
}

void StreamCameraCommand::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void StreamCameraCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamCameraCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamCameraCommand_descriptor_;
}

const StreamCameraCommand& StreamCameraCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2einternal_2eproto();
  return *default_instance_;
}

StreamCameraCommand* StreamCameraCommand::default_instance_ = NULL;

StreamCameraCommand* StreamCameraCommand::New() const {
  return new StreamCameraCommand;
}

void StreamCameraCommand::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    type_ = 1;
    video_duration_ = 0;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
    stop_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamCameraCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt.internal.msg.StreamCameraCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gt.internal.msg.StreamType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gt::internal::msg::StreamType_IsValid(value)) {
            set_type(static_cast< ::gt::internal::msg::StreamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_video_duration;
        break;
      }

      // optional int32 video_duration = 2;
      case 2: {
        if (tag == 16) {
         parse_video_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &video_duration_)));
          set_has_video_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_desc;
        break;
      }

      // optional string desc = 3;
      case 3: {
        if (tag == 26) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_stop;
        break;
      }

      // optional bool stop = 4;
      case 4: {
        if (tag == 32) {
         parse_stop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stop_)));
          set_has_stop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt.internal.msg.StreamCameraCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt.internal.msg.StreamCameraCommand)
  return false;
#undef DO_
}

void StreamCameraCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt.internal.msg.StreamCameraCommand)
  // required .gt.internal.msg.StreamType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 video_duration = 2;
  if (has_video_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->video_duration(), output);
  }

  // optional string desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->desc(), output);
  }

  // optional bool stop = 4;
  if (has_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->stop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gt.internal.msg.StreamCameraCommand)
}

::google::protobuf::uint8* StreamCameraCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt.internal.msg.StreamCameraCommand)
  // required .gt.internal.msg.StreamType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 video_duration = 2;
  if (has_video_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->video_duration(), target);
  }

  // optional string desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->desc(), target);
  }

  // optional bool stop = 4;
  if (has_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->stop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gt.internal.msg.StreamCameraCommand)
  return target;
}

int StreamCameraCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gt.internal.msg.StreamType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 video_duration = 2;
    if (has_video_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->video_duration());
    }

    // optional string desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional bool stop = 4;
    if (has_stop()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamCameraCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamCameraCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamCameraCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamCameraCommand::MergeFrom(const StreamCameraCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_video_duration()) {
      set_video_duration(from.video_duration());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_stop()) {
      set_stop(from.stop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamCameraCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamCameraCommand::CopyFrom(const StreamCameraCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamCameraCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StreamCameraCommand::Swap(StreamCameraCommand* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(video_duration_, other->video_duration_);
    std::swap(desc_, other->desc_);
    std::swap(stop_, other->stop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamCameraCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamCameraCommand_descriptor_;
  metadata.reflection = StreamCameraCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CalibrationParameters::kXyzFieldNumber;
const int CalibrationParameters::kAnglesFieldNumber;
const int CalibrationParameters::kFocusFieldNumber;
const int CalibrationParameters::kSamplesFieldNumber;
const int CalibrationParameters::kLinesFieldNumber;
const int CalibrationParameters::kSampleFieldNumber;
const int CalibrationParameters::kLineFieldNumber;
const int CalibrationParameters::kPixelSizeFieldNumber;
const int CalibrationParameters::kK1FieldNumber;
const int CalibrationParameters::kK2FieldNumber;
const int CalibrationParameters::kK3FieldNumber;
const int CalibrationParameters::kP1FieldNumber;
const int CalibrationParameters::kP2FieldNumber;
const int CalibrationParameters::kB1FieldNumber;
const int CalibrationParameters::kB2FieldNumber;
#endif  // !_MSC_VER

CalibrationParameters::CalibrationParameters()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt.internal.msg.CalibrationParameters)
}

void CalibrationParameters::InitAsDefaultInstance() {
  xyz_ = const_cast< ::gt::internal::msg::Point3*>(&::gt::internal::msg::Point3::default_instance());
  angles_ = const_cast< ::gt::internal::msg::Point3*>(&::gt::internal::msg::Point3::default_instance());
}

CalibrationParameters::CalibrationParameters(const CalibrationParameters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt.internal.msg.CalibrationParameters)
}

void CalibrationParameters::SharedCtor() {
  _cached_size_ = 0;
  xyz_ = NULL;
  angles_ = NULL;
  focus_ = 0;
  samples_ = 0;
  lines_ = 0;
  sample_ = 0;
  line_ = 0;
  pixel_size_ = 0;
  k1_ = 0;
  k2_ = 0;
  k3_ = 0;
  p1_ = 0;
  p2_ = 0;
  b1_ = 0;
  b2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalibrationParameters::~CalibrationParameters() {
  // @@protoc_insertion_point(destructor:gt.internal.msg.CalibrationParameters)
  SharedDtor();
}

void CalibrationParameters::SharedDtor() {
  if (this != default_instance_) {
    delete xyz_;
    delete angles_;
  }
}

void CalibrationParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalibrationParameters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalibrationParameters_descriptor_;
}

const CalibrationParameters& CalibrationParameters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2einternal_2eproto();
  return *default_instance_;
}

CalibrationParameters* CalibrationParameters::default_instance_ = NULL;

CalibrationParameters* CalibrationParameters::New() const {
  return new CalibrationParameters;
}

void CalibrationParameters::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CalibrationParameters*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(focus_, pixel_size_);
    if (has_xyz()) {
      if (xyz_ != NULL) xyz_->::gt::internal::msg::Point3::Clear();
    }
    if (has_angles()) {
      if (angles_ != NULL) angles_->::gt::internal::msg::Point3::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(k1_, b2_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CalibrationParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt.internal.msg.CalibrationParameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gt.internal.msg.Point3 xyz = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xyz()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_angles;
        break;
      }

      // required .gt.internal.msg.Point3 angles = 2;
      case 2: {
        if (tag == 18) {
         parse_angles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_focus;
        break;
      }

      // required double focus = 3;
      case 3: {
        if (tag == 25) {
         parse_focus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &focus_)));
          set_has_focus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_samples;
        break;
      }

      // required double samples = 4;
      case 4: {
        if (tag == 33) {
         parse_samples:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &samples_)));
          set_has_samples();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_lines;
        break;
      }

      // required double lines = 5;
      case 5: {
        if (tag == 41) {
         parse_lines:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lines_)));
          set_has_lines();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_sample;
        break;
      }

      // required double sample = 6;
      case 6: {
        if (tag == 49) {
         parse_sample:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sample_)));
          set_has_sample();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_line;
        break;
      }

      // required double line = 7;
      case 7: {
        if (tag == 57) {
         parse_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &line_)));
          set_has_line();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_pixel_size;
        break;
      }

      // required double pixel_size = 8;
      case 8: {
        if (tag == 65) {
         parse_pixel_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pixel_size_)));
          set_has_pixel_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_k1;
        break;
      }

      // required double k1 = 9;
      case 9: {
        if (tag == 73) {
         parse_k1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k1_)));
          set_has_k1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_k2;
        break;
      }

      // required double k2 = 10;
      case 10: {
        if (tag == 81) {
         parse_k2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k2_)));
          set_has_k2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_k3;
        break;
      }

      // required double k3 = 11;
      case 11: {
        if (tag == 89) {
         parse_k3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k3_)));
          set_has_k3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_p1;
        break;
      }

      // required double p1 = 12;
      case 12: {
        if (tag == 97) {
         parse_p1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &p1_)));
          set_has_p1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_p2;
        break;
      }

      // required double p2 = 13;
      case 13: {
        if (tag == 105) {
         parse_p2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &p2_)));
          set_has_p2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_b1;
        break;
      }

      // required double b1 = 14;
      case 14: {
        if (tag == 113) {
         parse_b1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &b1_)));
          set_has_b1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_b2;
        break;
      }

      // required double b2 = 15;
      case 15: {
        if (tag == 121) {
         parse_b2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &b2_)));
          set_has_b2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt.internal.msg.CalibrationParameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt.internal.msg.CalibrationParameters)
  return false;
#undef DO_
}

void CalibrationParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt.internal.msg.CalibrationParameters)
  // required .gt.internal.msg.Point3 xyz = 1;
  if (has_xyz()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->xyz(), output);
  }

  // required .gt.internal.msg.Point3 angles = 2;
  if (has_angles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->angles(), output);
  }

  // required double focus = 3;
  if (has_focus()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->focus(), output);
  }

  // required double samples = 4;
  if (has_samples()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->samples(), output);
  }

  // required double lines = 5;
  if (has_lines()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lines(), output);
  }

  // required double sample = 6;
  if (has_sample()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->sample(), output);
  }

  // required double line = 7;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->line(), output);
  }

  // required double pixel_size = 8;
  if (has_pixel_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->pixel_size(), output);
  }

  // required double k1 = 9;
  if (has_k1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->k1(), output);
  }

  // required double k2 = 10;
  if (has_k2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->k2(), output);
  }

  // required double k3 = 11;
  if (has_k3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->k3(), output);
  }

  // required double p1 = 12;
  if (has_p1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->p1(), output);
  }

  // required double p2 = 13;
  if (has_p2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->p2(), output);
  }

  // required double b1 = 14;
  if (has_b1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->b1(), output);
  }

  // required double b2 = 15;
  if (has_b2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->b2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gt.internal.msg.CalibrationParameters)
}

::google::protobuf::uint8* CalibrationParameters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt.internal.msg.CalibrationParameters)
  // required .gt.internal.msg.Point3 xyz = 1;
  if (has_xyz()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->xyz(), target);
  }

  // required .gt.internal.msg.Point3 angles = 2;
  if (has_angles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->angles(), target);
  }

  // required double focus = 3;
  if (has_focus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->focus(), target);
  }

  // required double samples = 4;
  if (has_samples()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->samples(), target);
  }

  // required double lines = 5;
  if (has_lines()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lines(), target);
  }

  // required double sample = 6;
  if (has_sample()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->sample(), target);
  }

  // required double line = 7;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->line(), target);
  }

  // required double pixel_size = 8;
  if (has_pixel_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->pixel_size(), target);
  }

  // required double k1 = 9;
  if (has_k1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->k1(), target);
  }

  // required double k2 = 10;
  if (has_k2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->k2(), target);
  }

  // required double k3 = 11;
  if (has_k3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->k3(), target);
  }

  // required double p1 = 12;
  if (has_p1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->p1(), target);
  }

  // required double p2 = 13;
  if (has_p2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->p2(), target);
  }

  // required double b1 = 14;
  if (has_b1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->b1(), target);
  }

  // required double b2 = 15;
  if (has_b2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->b2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gt.internal.msg.CalibrationParameters)
  return target;
}

int CalibrationParameters::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gt.internal.msg.Point3 xyz = 1;
    if (has_xyz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xyz());
    }

    // required .gt.internal.msg.Point3 angles = 2;
    if (has_angles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->angles());
    }

    // required double focus = 3;
    if (has_focus()) {
      total_size += 1 + 8;
    }

    // required double samples = 4;
    if (has_samples()) {
      total_size += 1 + 8;
    }

    // required double lines = 5;
    if (has_lines()) {
      total_size += 1 + 8;
    }

    // required double sample = 6;
    if (has_sample()) {
      total_size += 1 + 8;
    }

    // required double line = 7;
    if (has_line()) {
      total_size += 1 + 8;
    }

    // required double pixel_size = 8;
    if (has_pixel_size()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double k1 = 9;
    if (has_k1()) {
      total_size += 1 + 8;
    }

    // required double k2 = 10;
    if (has_k2()) {
      total_size += 1 + 8;
    }

    // required double k3 = 11;
    if (has_k3()) {
      total_size += 1 + 8;
    }

    // required double p1 = 12;
    if (has_p1()) {
      total_size += 1 + 8;
    }

    // required double p2 = 13;
    if (has_p2()) {
      total_size += 1 + 8;
    }

    // required double b1 = 14;
    if (has_b1()) {
      total_size += 1 + 8;
    }

    // required double b2 = 15;
    if (has_b2()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalibrationParameters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CalibrationParameters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CalibrationParameters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CalibrationParameters::MergeFrom(const CalibrationParameters& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xyz()) {
      mutable_xyz()->::gt::internal::msg::Point3::MergeFrom(from.xyz());
    }
    if (from.has_angles()) {
      mutable_angles()->::gt::internal::msg::Point3::MergeFrom(from.angles());
    }
    if (from.has_focus()) {
      set_focus(from.focus());
    }
    if (from.has_samples()) {
      set_samples(from.samples());
    }
    if (from.has_lines()) {
      set_lines(from.lines());
    }
    if (from.has_sample()) {
      set_sample(from.sample());
    }
    if (from.has_line()) {
      set_line(from.line());
    }
    if (from.has_pixel_size()) {
      set_pixel_size(from.pixel_size());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_k1()) {
      set_k1(from.k1());
    }
    if (from.has_k2()) {
      set_k2(from.k2());
    }
    if (from.has_k3()) {
      set_k3(from.k3());
    }
    if (from.has_p1()) {
      set_p1(from.p1());
    }
    if (from.has_p2()) {
      set_p2(from.p2());
    }
    if (from.has_b1()) {
      set_b1(from.b1());
    }
    if (from.has_b2()) {
      set_b2(from.b2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CalibrationParameters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibrationParameters::CopyFrom(const CalibrationParameters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrationParameters::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007fff) != 0x00007fff) return false;

  if (has_xyz()) {
    if (!this->xyz().IsInitialized()) return false;
  }
  if (has_angles()) {
    if (!this->angles().IsInitialized()) return false;
  }
  return true;
}

void CalibrationParameters::Swap(CalibrationParameters* other) {
  if (other != this) {
    std::swap(xyz_, other->xyz_);
    std::swap(angles_, other->angles_);
    std::swap(focus_, other->focus_);
    std::swap(samples_, other->samples_);
    std::swap(lines_, other->lines_);
    std::swap(sample_, other->sample_);
    std::swap(line_, other->line_);
    std::swap(pixel_size_, other->pixel_size_);
    std::swap(k1_, other->k1_);
    std::swap(k2_, other->k2_);
    std::swap(k3_, other->k3_);
    std::swap(p1_, other->p1_);
    std::swap(p2_, other->p2_);
    std::swap(b1_, other->b1_);
    std::swap(b2_, other->b2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CalibrationParameters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalibrationParameters_descriptor_;
  metadata.reflection = CalibrationParameters_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BallMeasure::kXyFieldNumber;
const int BallMeasure::kValidFieldNumber;
const int BallMeasure::kTimeFieldNumber;
const int BallMeasure::kEventFieldNumber;
const int BallMeasure::kIsReboundFieldNumber;
const int BallMeasure::kIsFromOutOfFrameFieldNumber;
const int BallMeasure::kIsLostOutOfFrameFieldNumber;
const int BallMeasure::kIsHighBallFieldNumber;
const int BallMeasure::kIsPedIntersectFieldNumber;
#endif  // !_MSC_VER

BallMeasure::BallMeasure()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt.internal.msg.BallMeasure)
}

void BallMeasure::InitAsDefaultInstance() {
  xy_ = const_cast< ::gt::internal::msg::Point2*>(&::gt::internal::msg::Point2::default_instance());
}

BallMeasure::BallMeasure(const BallMeasure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt.internal.msg.BallMeasure)
}

void BallMeasure::SharedCtor() {
  _cached_size_ = 0;
  xy_ = NULL;
  valid_ = false;
  time_ = GOOGLE_LONGLONG(0);
  event_ = 0;
  is_rebound_ = false;
  is_from_out_of_frame_ = false;
  is_lost_out_of_frame_ = false;
  is_high_ball_ = false;
  is_ped_intersect_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BallMeasure::~BallMeasure() {
  // @@protoc_insertion_point(destructor:gt.internal.msg.BallMeasure)
  SharedDtor();
}

void BallMeasure::SharedDtor() {
  if (this != default_instance_) {
    delete xy_;
  }
}

void BallMeasure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BallMeasure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BallMeasure_descriptor_;
}

const BallMeasure& BallMeasure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2einternal_2eproto();
  return *default_instance_;
}

BallMeasure* BallMeasure::default_instance_ = NULL;

BallMeasure* BallMeasure::New() const {
  return new BallMeasure;
}

void BallMeasure::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BallMeasure*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(time_, is_high_ball_);
    if (has_xy()) {
      if (xy_ != NULL) xy_->::gt::internal::msg::Point2::Clear();
    }
  }
  is_ped_intersect_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BallMeasure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt.internal.msg.BallMeasure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gt.internal.msg.Point2 xy = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_valid;
        break;
      }

      // required bool valid = 2;
      case 2: {
        if (tag == 16) {
         parse_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
          set_has_valid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required int64 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_event;
        break;
      }

      // required .gt.internal.msg.BallEvent event = 4;
      case 4: {
        if (tag == 32) {
         parse_event:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gt::internal::msg::BallEvent_IsValid(value)) {
            set_event(static_cast< ::gt::internal::msg::BallEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_rebound;
        break;
      }

      // required bool is_rebound = 5;
      case 5: {
        if (tag == 40) {
         parse_is_rebound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_rebound_)));
          set_has_is_rebound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_from_out_of_frame;
        break;
      }

      // required bool is_from_out_of_frame = 6;
      case 6: {
        if (tag == 48) {
         parse_is_from_out_of_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_from_out_of_frame_)));
          set_has_is_from_out_of_frame();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_lost_out_of_frame;
        break;
      }

      // required bool is_lost_out_of_frame = 7;
      case 7: {
        if (tag == 56) {
         parse_is_lost_out_of_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_lost_out_of_frame_)));
          set_has_is_lost_out_of_frame();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_is_high_ball;
        break;
      }

      // required bool is_high_ball = 8;
      case 8: {
        if (tag == 64) {
         parse_is_high_ball:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_high_ball_)));
          set_has_is_high_ball();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_is_ped_intersect;
        break;
      }

      // required bool is_ped_intersect = 9;
      case 9: {
        if (tag == 72) {
         parse_is_ped_intersect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ped_intersect_)));
          set_has_is_ped_intersect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt.internal.msg.BallMeasure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt.internal.msg.BallMeasure)
  return false;
#undef DO_
}

void BallMeasure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt.internal.msg.BallMeasure)
  // required .gt.internal.msg.Point2 xy = 1;
  if (has_xy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->xy(), output);
  }

  // required bool valid = 2;
  if (has_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->valid(), output);
  }

  // required int64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }

  // required .gt.internal.msg.BallEvent event = 4;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->event(), output);
  }

  // required bool is_rebound = 5;
  if (has_is_rebound()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_rebound(), output);
  }

  // required bool is_from_out_of_frame = 6;
  if (has_is_from_out_of_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_from_out_of_frame(), output);
  }

  // required bool is_lost_out_of_frame = 7;
  if (has_is_lost_out_of_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_lost_out_of_frame(), output);
  }

  // required bool is_high_ball = 8;
  if (has_is_high_ball()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_high_ball(), output);
  }

  // required bool is_ped_intersect = 9;
  if (has_is_ped_intersect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_ped_intersect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gt.internal.msg.BallMeasure)
}

::google::protobuf::uint8* BallMeasure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt.internal.msg.BallMeasure)
  // required .gt.internal.msg.Point2 xy = 1;
  if (has_xy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->xy(), target);
  }

  // required bool valid = 2;
  if (has_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->valid(), target);
  }

  // required int64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }

  // required .gt.internal.msg.BallEvent event = 4;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->event(), target);
  }

  // required bool is_rebound = 5;
  if (has_is_rebound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_rebound(), target);
  }

  // required bool is_from_out_of_frame = 6;
  if (has_is_from_out_of_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_from_out_of_frame(), target);
  }

  // required bool is_lost_out_of_frame = 7;
  if (has_is_lost_out_of_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_lost_out_of_frame(), target);
  }

  // required bool is_high_ball = 8;
  if (has_is_high_ball()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_high_ball(), target);
  }

  // required bool is_ped_intersect = 9;
  if (has_is_ped_intersect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_ped_intersect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gt.internal.msg.BallMeasure)
  return target;
}

int BallMeasure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gt.internal.msg.Point2 xy = 1;
    if (has_xy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xy());
    }

    // required bool valid = 2;
    if (has_valid()) {
      total_size += 1 + 1;
    }

    // required int64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // required .gt.internal.msg.BallEvent event = 4;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event());
    }

    // required bool is_rebound = 5;
    if (has_is_rebound()) {
      total_size += 1 + 1;
    }

    // required bool is_from_out_of_frame = 6;
    if (has_is_from_out_of_frame()) {
      total_size += 1 + 1;
    }

    // required bool is_lost_out_of_frame = 7;
    if (has_is_lost_out_of_frame()) {
      total_size += 1 + 1;
    }

    // required bool is_high_ball = 8;
    if (has_is_high_ball()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool is_ped_intersect = 9;
    if (has_is_ped_intersect()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BallMeasure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BallMeasure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BallMeasure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BallMeasure::MergeFrom(const BallMeasure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xy()) {
      mutable_xy()->::gt::internal::msg::Point2::MergeFrom(from.xy());
    }
    if (from.has_valid()) {
      set_valid(from.valid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_event()) {
      set_event(from.event());
    }
    if (from.has_is_rebound()) {
      set_is_rebound(from.is_rebound());
    }
    if (from.has_is_from_out_of_frame()) {
      set_is_from_out_of_frame(from.is_from_out_of_frame());
    }
    if (from.has_is_lost_out_of_frame()) {
      set_is_lost_out_of_frame(from.is_lost_out_of_frame());
    }
    if (from.has_is_high_ball()) {
      set_is_high_ball(from.is_high_ball());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_ped_intersect()) {
      set_is_ped_intersect(from.is_ped_intersect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BallMeasure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallMeasure::CopyFrom(const BallMeasure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallMeasure::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  if (has_xy()) {
    if (!this->xy().IsInitialized()) return false;
  }
  return true;
}

void BallMeasure::Swap(BallMeasure* other) {
  if (other != this) {
    std::swap(xy_, other->xy_);
    std::swap(valid_, other->valid_);
    std::swap(time_, other->time_);
    std::swap(event_, other->event_);
    std::swap(is_rebound_, other->is_rebound_);
    std::swap(is_from_out_of_frame_, other->is_from_out_of_frame_);
    std::swap(is_lost_out_of_frame_, other->is_lost_out_of_frame_);
    std::swap(is_high_ball_, other->is_high_ball_);
    std::swap(is_ped_intersect_, other->is_ped_intersect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BallMeasure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BallMeasure_descriptor_;
  metadata.reflection = BallMeasure_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatMeasure::kWasSwingFieldNumber;
const int BatMeasure::kMeasuresFieldNumber;
const int BatMeasure::kBboxesFieldNumber;
#endif  // !_MSC_VER

BatMeasure::BatMeasure()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt.internal.msg.BatMeasure)
}

void BatMeasure::InitAsDefaultInstance() {
}

BatMeasure::BatMeasure(const BatMeasure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt.internal.msg.BatMeasure)
}

void BatMeasure::SharedCtor() {
  _cached_size_ = 0;
  was_swing_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatMeasure::~BatMeasure() {
  // @@protoc_insertion_point(destructor:gt.internal.msg.BatMeasure)
  SharedDtor();
}

void BatMeasure::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BatMeasure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatMeasure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatMeasure_descriptor_;
}

const BatMeasure& BatMeasure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2einternal_2eproto();
  return *default_instance_;
}

BatMeasure* BatMeasure::default_instance_ = NULL;

BatMeasure* BatMeasure::New() const {
  return new BatMeasure;
}

void BatMeasure::Clear() {
  was_swing_ = false;
  measures_.Clear();
  bboxes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatMeasure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt.internal.msg.BatMeasure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool was_swing = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &was_swing_)));
          set_has_was_swing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_measures;
        break;
      }

      // repeated .gt.internal.msg.Point2 measures = 2;
      case 2: {
        if (tag == 18) {
         parse_measures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_measures()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_measures;
        if (input->ExpectTag(26)) goto parse_bboxes;
        break;
      }

      // repeated .gt.internal.msg.Rect bboxes = 3;
      case 3: {
        if (tag == 26) {
         parse_bboxes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bboxes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bboxes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt.internal.msg.BatMeasure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt.internal.msg.BatMeasure)
  return false;
#undef DO_
}

void BatMeasure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt.internal.msg.BatMeasure)
  // required bool was_swing = 1;
  if (has_was_swing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->was_swing(), output);
  }

  // repeated .gt.internal.msg.Point2 measures = 2;
  for (int i = 0; i < this->measures_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->measures(i), output);
  }

  // repeated .gt.internal.msg.Rect bboxes = 3;
  for (int i = 0; i < this->bboxes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bboxes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gt.internal.msg.BatMeasure)
}

::google::protobuf::uint8* BatMeasure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt.internal.msg.BatMeasure)
  // required bool was_swing = 1;
  if (has_was_swing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->was_swing(), target);
  }

  // repeated .gt.internal.msg.Point2 measures = 2;
  for (int i = 0; i < this->measures_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->measures(i), target);
  }

  // repeated .gt.internal.msg.Rect bboxes = 3;
  for (int i = 0; i < this->bboxes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bboxes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gt.internal.msg.BatMeasure)
  return target;
}

int BatMeasure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool was_swing = 1;
    if (has_was_swing()) {
      total_size += 1 + 1;
    }

  }
  // repeated .gt.internal.msg.Point2 measures = 2;
  total_size += 1 * this->measures_size();
  for (int i = 0; i < this->measures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->measures(i));
  }

  // repeated .gt.internal.msg.Rect bboxes = 3;
  total_size += 1 * this->bboxes_size();
  for (int i = 0; i < this->bboxes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bboxes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatMeasure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatMeasure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatMeasure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatMeasure::MergeFrom(const BatMeasure& from) {
  GOOGLE_CHECK_NE(&from, this);
  measures_.MergeFrom(from.measures_);
  bboxes_.MergeFrom(from.bboxes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_was_swing()) {
      set_was_swing(from.was_swing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatMeasure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatMeasure::CopyFrom(const BatMeasure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatMeasure::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->measures())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->bboxes())) return false;
  return true;
}

void BatMeasure::Swap(BatMeasure* other) {
  if (other != this) {
    std::swap(was_swing_, other->was_swing_);
    measures_.Swap(&other->measures_);
    bboxes_.Swap(&other->bboxes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatMeasure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatMeasure_descriptor_;
  metadata.reflection = BatMeasure_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OutOfFrameInfo::kDirFieldNumber;
const int OutOfFrameInfo::kBallMeasureFieldNumber;
const int OutOfFrameInfo::kPedMeasureFieldNumber;
#endif  // !_MSC_VER

OutOfFrameInfo::OutOfFrameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt.internal.msg.OutOfFrameInfo)
}

void OutOfFrameInfo::InitAsDefaultInstance() {
  ball_measure_ = const_cast< ::gt::internal::msg::BallMeasure*>(&::gt::internal::msg::BallMeasure::default_instance());
  ped_measure_ = const_cast< ::gt::internal::msg::PedestrianMeasure*>(&::gt::internal::msg::PedestrianMeasure::default_instance());
}

OutOfFrameInfo::OutOfFrameInfo(const OutOfFrameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt.internal.msg.OutOfFrameInfo)
}

void OutOfFrameInfo::SharedCtor() {
  _cached_size_ = 0;
  dir_ = 0;
  ball_measure_ = NULL;
  ped_measure_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OutOfFrameInfo::~OutOfFrameInfo() {
  // @@protoc_insertion_point(destructor:gt.internal.msg.OutOfFrameInfo)
  SharedDtor();
}

void OutOfFrameInfo::SharedDtor() {
  if (this != default_instance_) {
    delete ball_measure_;
    delete ped_measure_;
  }
}

void OutOfFrameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OutOfFrameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OutOfFrameInfo_descriptor_;
}

const OutOfFrameInfo& OutOfFrameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2einternal_2eproto();
  return *default_instance_;
}

OutOfFrameInfo* OutOfFrameInfo::default_instance_ = NULL;

OutOfFrameInfo* OutOfFrameInfo::New() const {
  return new OutOfFrameInfo;
}

void OutOfFrameInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    dir_ = 0;
    if (has_ball_measure()) {
      if (ball_measure_ != NULL) ball_measure_->::gt::internal::msg::BallMeasure::Clear();
    }
    if (has_ped_measure()) {
      if (ped_measure_ != NULL) ped_measure_->::gt::internal::msg::PedestrianMeasure::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OutOfFrameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt.internal.msg.OutOfFrameInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gt.internal.msg.OutOfFrame dir = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gt::internal::msg::OutOfFrame_IsValid(value)) {
            set_dir(static_cast< ::gt::internal::msg::OutOfFrame >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ball_measure;
        break;
      }

      // optional .gt.internal.msg.BallMeasure ball_measure = 2;
      case 2: {
        if (tag == 18) {
         parse_ball_measure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ball_measure()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ped_measure;
        break;
      }

      // optional .gt.internal.msg.PedestrianMeasure ped_measure = 3;
      case 3: {
        if (tag == 26) {
         parse_ped_measure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ped_measure()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt.internal.msg.OutOfFrameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt.internal.msg.OutOfFrameInfo)
  return false;
#undef DO_
}

void OutOfFrameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt.internal.msg.OutOfFrameInfo)
  // required .gt.internal.msg.OutOfFrame dir = 1;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dir(), output);
  }

  // optional .gt.internal.msg.BallMeasure ball_measure = 2;
  if (has_ball_measure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ball_measure(), output);
  }

  // optional .gt.internal.msg.PedestrianMeasure ped_measure = 3;
  if (has_ped_measure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ped_measure(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gt.internal.msg.OutOfFrameInfo)
}

::google::protobuf::uint8* OutOfFrameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt.internal.msg.OutOfFrameInfo)
  // required .gt.internal.msg.OutOfFrame dir = 1;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->dir(), target);
  }

  // optional .gt.internal.msg.BallMeasure ball_measure = 2;
  if (has_ball_measure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ball_measure(), target);
  }

  // optional .gt.internal.msg.PedestrianMeasure ped_measure = 3;
  if (has_ped_measure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ped_measure(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gt.internal.msg.OutOfFrameInfo)
  return target;
}

int OutOfFrameInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gt.internal.msg.OutOfFrame dir = 1;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dir());
    }

    // optional .gt.internal.msg.BallMeasure ball_measure = 2;
    if (has_ball_measure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ball_measure());
    }

    // optional .gt.internal.msg.PedestrianMeasure ped_measure = 3;
    if (has_ped_measure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ped_measure());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OutOfFrameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OutOfFrameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OutOfFrameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OutOfFrameInfo::MergeFrom(const OutOfFrameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_ball_measure()) {
      mutable_ball_measure()->::gt::internal::msg::BallMeasure::MergeFrom(from.ball_measure());
    }
    if (from.has_ped_measure()) {
      mutable_ped_measure()->::gt::internal::msg::PedestrianMeasure::MergeFrom(from.ped_measure());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OutOfFrameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutOfFrameInfo::CopyFrom(const OutOfFrameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutOfFrameInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_ball_measure()) {
    if (!this->ball_measure().IsInitialized()) return false;
  }
  if (has_ped_measure()) {
    if (!this->ped_measure().IsInitialized()) return false;
  }
  return true;
}

void OutOfFrameInfo::Swap(OutOfFrameInfo* other) {
  if (other != this) {
    std::swap(dir_, other->dir_);
    std::swap(ball_measure_, other->ball_measure_);
    std::swap(ped_measure_, other->ped_measure_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OutOfFrameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OutOfFrameInfo_descriptor_;
  metadata.reflection = OutOfFrameInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecognizeData::kDataFieldNumber;
const int RecognizeData::kStartTimeFieldNumber;
const int RecognizeData::kRestoredOutOfFrameFieldNumber;
const int RecognizeData::kRestoredStraightFieldNumber;
#endif  // !_MSC_VER

RecognizeData::RecognizeData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt.internal.msg.RecognizeData)
}

void RecognizeData::InitAsDefaultInstance() {
}

RecognizeData::RecognizeData(const RecognizeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt.internal.msg.RecognizeData)
}

void RecognizeData::SharedCtor() {
  _cached_size_ = 0;
  start_time_ = GOOGLE_LONGLONG(0);
  restored_out_of_frame_ = false;
  restored_straight_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecognizeData::~RecognizeData() {
  // @@protoc_insertion_point(destructor:gt.internal.msg.RecognizeData)
  SharedDtor();
}

void RecognizeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecognizeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecognizeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecognizeData_descriptor_;
}

const RecognizeData& RecognizeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2einternal_2eproto();
  return *default_instance_;
}

RecognizeData* RecognizeData::default_instance_ = NULL;

RecognizeData* RecognizeData::New() const {
  return new RecognizeData;
}

void RecognizeData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RecognizeData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(start_time_, restored_straight_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecognizeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt.internal.msg.RecognizeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gt.internal.msg.BallMeasure data = 1;
      case 1: {
        if (tag == 10) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(16)) goto parse_start_time;
        break;
      }

      // optional int64 start_time = 2;
      case 2: {
        if (tag == 16) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_restored_out_of_frame;
        break;
      }

      // optional bool restored_out_of_frame = 3;
      case 3: {
        if (tag == 24) {
         parse_restored_out_of_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &restored_out_of_frame_)));
          set_has_restored_out_of_frame();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_restored_straight;
        break;
      }

      // optional bool restored_straight = 4;
      case 4: {
        if (tag == 32) {
         parse_restored_straight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &restored_straight_)));
          set_has_restored_straight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt.internal.msg.RecognizeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt.internal.msg.RecognizeData)
  return false;
#undef DO_
}

void RecognizeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt.internal.msg.RecognizeData)
  // repeated .gt.internal.msg.BallMeasure data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // optional int64 start_time = 2;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start_time(), output);
  }

  // optional bool restored_out_of_frame = 3;
  if (has_restored_out_of_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->restored_out_of_frame(), output);
  }

  // optional bool restored_straight = 4;
  if (has_restored_straight()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->restored_straight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gt.internal.msg.RecognizeData)
}

::google::protobuf::uint8* RecognizeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt.internal.msg.RecognizeData)
  // repeated .gt.internal.msg.BallMeasure data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // optional int64 start_time = 2;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->start_time(), target);
  }

  // optional bool restored_out_of_frame = 3;
  if (has_restored_out_of_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->restored_out_of_frame(), target);
  }

  // optional bool restored_straight = 4;
  if (has_restored_straight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->restored_straight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gt.internal.msg.RecognizeData)
  return target;
}

int RecognizeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 start_time = 2;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // optional bool restored_out_of_frame = 3;
    if (has_restored_out_of_frame()) {
      total_size += 1 + 1;
    }

    // optional bool restored_straight = 4;
    if (has_restored_straight()) {
      total_size += 1 + 1;
    }

  }
  // repeated .gt.internal.msg.BallMeasure data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecognizeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecognizeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecognizeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecognizeData::MergeFrom(const RecognizeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_restored_out_of_frame()) {
      set_restored_out_of_frame(from.restored_out_of_frame());
    }
    if (from.has_restored_straight()) {
      set_restored_straight(from.restored_straight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecognizeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognizeData::CopyFrom(const RecognizeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizeData::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void RecognizeData::Swap(RecognizeData* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(start_time_, other->start_time_);
    std::swap(restored_out_of_frame_, other->restored_out_of_frame_);
    std::swap(restored_straight_, other->restored_straight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecognizeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecognizeData_descriptor_;
  metadata.reflection = RecognizeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PedestrianMeasure::kRFieldNumber;
const int PedestrianMeasure::kPFieldNumber;
const int PedestrianMeasure::kPosFieldNumber;
#endif  // !_MSC_VER

PedestrianMeasure::PedestrianMeasure()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt.internal.msg.PedestrianMeasure)
}

void PedestrianMeasure::InitAsDefaultInstance() {
  r_ = const_cast< ::gt::internal::msg::Rect*>(&::gt::internal::msg::Rect::default_instance());
  p_ = const_cast< ::gt::internal::msg::Point3*>(&::gt::internal::msg::Point3::default_instance());
}

PedestrianMeasure::PedestrianMeasure(const PedestrianMeasure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt.internal.msg.PedestrianMeasure)
}

void PedestrianMeasure::SharedCtor() {
  _cached_size_ = 0;
  r_ = NULL;
  p_ = NULL;
  pos_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PedestrianMeasure::~PedestrianMeasure() {
  // @@protoc_insertion_point(destructor:gt.internal.msg.PedestrianMeasure)
  SharedDtor();
}

void PedestrianMeasure::SharedDtor() {
  if (this != default_instance_) {
    delete r_;
    delete p_;
  }
}

void PedestrianMeasure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PedestrianMeasure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PedestrianMeasure_descriptor_;
}

const PedestrianMeasure& PedestrianMeasure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2einternal_2eproto();
  return *default_instance_;
}

PedestrianMeasure* PedestrianMeasure::default_instance_ = NULL;

PedestrianMeasure* PedestrianMeasure::New() const {
  return new PedestrianMeasure;
}

void PedestrianMeasure::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_r()) {
      if (r_ != NULL) r_->::gt::internal::msg::Rect::Clear();
    }
    if (has_p()) {
      if (p_ != NULL) p_->::gt::internal::msg::Point3::Clear();
    }
    pos_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PedestrianMeasure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt.internal.msg.PedestrianMeasure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gt.internal.msg.Rect r = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_r()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_p;
        break;
      }

      // required .gt.internal.msg.Point3 p = 2;
      case 2: {
        if (tag == 18) {
         parse_p:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_p()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // required .gt.internal.msg.PlayerPosition pos = 3;
      case 3: {
        if (tag == 24) {
         parse_pos:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gt::internal::msg::PlayerPosition_IsValid(value)) {
            set_pos(static_cast< ::gt::internal::msg::PlayerPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt.internal.msg.PedestrianMeasure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt.internal.msg.PedestrianMeasure)
  return false;
#undef DO_
}

void PedestrianMeasure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt.internal.msg.PedestrianMeasure)
  // required .gt.internal.msg.Rect r = 1;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->r(), output);
  }

  // required .gt.internal.msg.Point3 p = 2;
  if (has_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->p(), output);
  }

  // required .gt.internal.msg.PlayerPosition pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gt.internal.msg.PedestrianMeasure)
}

::google::protobuf::uint8* PedestrianMeasure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt.internal.msg.PedestrianMeasure)
  // required .gt.internal.msg.Rect r = 1;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->r(), target);
  }

  // required .gt.internal.msg.Point3 p = 2;
  if (has_p()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->p(), target);
  }

  // required .gt.internal.msg.PlayerPosition pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gt.internal.msg.PedestrianMeasure)
  return target;
}

int PedestrianMeasure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gt.internal.msg.Rect r = 1;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->r());
    }

    // required .gt.internal.msg.Point3 p = 2;
    if (has_p()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->p());
    }

    // required .gt.internal.msg.PlayerPosition pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PedestrianMeasure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PedestrianMeasure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PedestrianMeasure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PedestrianMeasure::MergeFrom(const PedestrianMeasure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r()) {
      mutable_r()->::gt::internal::msg::Rect::MergeFrom(from.r());
    }
    if (from.has_p()) {
      mutable_p()->::gt::internal::msg::Point3::MergeFrom(from.p());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PedestrianMeasure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PedestrianMeasure::CopyFrom(const PedestrianMeasure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PedestrianMeasure::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_r()) {
    if (!this->r().IsInitialized()) return false;
  }
  if (has_p()) {
    if (!this->p().IsInitialized()) return false;
  }
  return true;
}

void PedestrianMeasure::Swap(PedestrianMeasure* other) {
  if (other != this) {
    std::swap(r_, other->r_);
    std::swap(p_, other->p_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PedestrianMeasure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PedestrianMeasure_descriptor_;
  metadata.reflection = PedestrianMeasure_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CameraOptions::kHwParamsFieldNumber;
const int CameraOptions::kPParamsFieldNumber;
const int CameraOptions::kAutoExpParamsFieldNumber;
const int CameraOptions::kCalibParamsFieldNumber;
const int CameraOptions::kRecRoisFieldNumber;
const int CameraOptions::kBallRecognizeEnableFieldNumber;
const int CameraOptions::kDebugEnableFieldNumber;
const int CameraOptions::kRecParamsFieldNumber;
const int CameraOptions::kDescFieldNumber;
const int CameraOptions::kCamTypeFieldNumber;
const int CameraOptions::kIdFieldNumber;
const int CameraOptions::kSaveParametersFieldNumber;
const int CameraOptions::kStreamParamsFieldNumber;
const int CameraOptions::kAutoExposureEnableFieldNumber;
const int CameraOptions::kMainAddModeFieldNumber;
const int CameraOptions::kMainEachFieldNumber;
const int CameraOptions::kDebugModeFieldNumber;
#endif  // !_MSC_VER

CameraOptions::CameraOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt.internal.msg.CameraOptions)
}

void CameraOptions::InitAsDefaultInstance() {
  hw_params_ = const_cast< ::gt::internal::msg::HardwareCameraParameters*>(&::gt::internal::msg::HardwareCameraParameters::default_instance());
  p_params_ = const_cast< ::gt::internal::msg::PictureCameraParameters*>(&::gt::internal::msg::PictureCameraParameters::default_instance());
  auto_exp_params_ = const_cast< ::gt::internal::msg::AutoExposureParameters*>(&::gt::internal::msg::AutoExposureParameters::default_instance());
  calib_params_ = const_cast< ::gt::internal::msg::CalibrationParameters*>(&::gt::internal::msg::CalibrationParameters::default_instance());
  rec_rois_ = const_cast< ::gt::internal::msg::RecROIs*>(&::gt::internal::msg::RecROIs::default_instance());
  rec_params_ = const_cast< ::gt::internal::msg::RecognizeParameters*>(&::gt::internal::msg::RecognizeParameters::default_instance());
  stream_params_ = const_cast< ::gt::internal::msg::StreamCameraParameters*>(&::gt::internal::msg::StreamCameraParameters::default_instance());
}

CameraOptions::CameraOptions(const CameraOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt.internal.msg.CameraOptions)
}

void CameraOptions::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hw_params_ = NULL;
  p_params_ = NULL;
  auto_exp_params_ = NULL;
  calib_params_ = NULL;
  rec_rois_ = NULL;
  ball_recognize_enable_ = false;
  debug_enable_ = false;
  rec_params_ = NULL;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cam_type_ = 1;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  save_parameters_ = false;
  stream_params_ = NULL;
  auto_exposure_enable_ = false;
  main_add_mode_ = false;
  main_each_ = 0;
  debug_mode_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraOptions::~CameraOptions() {
  // @@protoc_insertion_point(destructor:gt.internal.msg.CameraOptions)
  SharedDtor();
}

void CameraOptions::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
    delete hw_params_;
    delete p_params_;
    delete auto_exp_params_;
    delete calib_params_;
    delete rec_rois_;
    delete rec_params_;
    delete stream_params_;
  }
}

void CameraOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraOptions_descriptor_;
}

const CameraOptions& CameraOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2einternal_2eproto();
  return *default_instance_;
}

CameraOptions* CameraOptions::default_instance_ = NULL;

CameraOptions* CameraOptions::New() const {
  return new CameraOptions;
}

void CameraOptions::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CameraOptions*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(ball_recognize_enable_, debug_enable_);
    if (has_hw_params()) {
      if (hw_params_ != NULL) hw_params_->::gt::internal::msg::HardwareCameraParameters::Clear();
    }
    if (has_p_params()) {
      if (p_params_ != NULL) p_params_->::gt::internal::msg::PictureCameraParameters::Clear();
    }
    if (has_auto_exp_params()) {
      if (auto_exp_params_ != NULL) auto_exp_params_->::gt::internal::msg::AutoExposureParameters::Clear();
    }
    if (has_calib_params()) {
      if (calib_params_ != NULL) calib_params_->::gt::internal::msg::CalibrationParameters::Clear();
    }
    if (has_rec_rois()) {
      if (rec_rois_ != NULL) rec_rois_->::gt::internal::msg::RecROIs::Clear();
    }
    if (has_rec_params()) {
      if (rec_params_ != NULL) rec_params_->::gt::internal::msg::RecognizeParameters::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(save_parameters_, auto_exposure_enable_);
    ZR_(main_each_, main_add_mode_);
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
    cam_type_ = 1;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_stream_params()) {
      if (stream_params_ != NULL) stream_params_->::gt::internal::msg::StreamCameraParameters::Clear();
    }
  }
  debug_mode_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt.internal.msg.CameraOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gt.internal.msg.HardwareCameraParameters hw_params = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hw_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_p_params;
        break;
      }

      // optional .gt.internal.msg.PictureCameraParameters p_params = 2;
      case 2: {
        if (tag == 18) {
         parse_p_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_p_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_auto_exp_params;
        break;
      }

      // optional .gt.internal.msg.AutoExposureParameters auto_exp_params = 3;
      case 3: {
        if (tag == 26) {
         parse_auto_exp_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auto_exp_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_calib_params;
        break;
      }

      // optional .gt.internal.msg.CalibrationParameters calib_params = 4;
      case 4: {
        if (tag == 34) {
         parse_calib_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_calib_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_rec_rois;
        break;
      }

      // optional .gt.internal.msg.RecROIs rec_rois = 5;
      case 5: {
        if (tag == 42) {
         parse_rec_rois:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rec_rois()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ball_recognize_enable;
        break;
      }

      // optional bool ball_recognize_enable = 6;
      case 6: {
        if (tag == 48) {
         parse_ball_recognize_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ball_recognize_enable_)));
          set_has_ball_recognize_enable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_debug_enable;
        break;
      }

      // optional bool debug_enable = 7;
      case 7: {
        if (tag == 56) {
         parse_debug_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debug_enable_)));
          set_has_debug_enable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_rec_params;
        break;
      }

      // optional .gt.internal.msg.RecognizeParameters rec_params = 8;
      case 8: {
        if (tag == 66) {
         parse_rec_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rec_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_desc;
        break;
      }

      // optional string desc = 9;
      case 9: {
        if (tag == 74) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_cam_type;
        break;
      }

      // optional .gt.internal.msg.CameraType cam_type = 10;
      case 10: {
        if (tag == 80) {
         parse_cam_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gt::internal::msg::CameraType_IsValid(value)) {
            set_cam_type(static_cast< ::gt::internal::msg::CameraType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_id;
        break;
      }

      // required string id = 11;
      case 11: {
        if (tag == 90) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_save_parameters;
        break;
      }

      // optional bool save_parameters = 12;
      case 12: {
        if (tag == 96) {
         parse_save_parameters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &save_parameters_)));
          set_has_save_parameters();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_stream_params;
        break;
      }

      // optional .gt.internal.msg.StreamCameraParameters stream_params = 13;
      case 13: {
        if (tag == 106) {
         parse_stream_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stream_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_auto_exposure_enable;
        break;
      }

      // optional bool auto_exposure_enable = 14;
      case 14: {
        if (tag == 112) {
         parse_auto_exposure_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_exposure_enable_)));
          set_has_auto_exposure_enable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_main_add_mode;
        break;
      }

      // required bool main_add_mode = 15;
      case 15: {
        if (tag == 120) {
         parse_main_add_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &main_add_mode_)));
          set_has_main_add_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_main_each;
        break;
      }

      // optional int32 main_each = 16;
      case 16: {
        if (tag == 128) {
         parse_main_each:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &main_each_)));
          set_has_main_each();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_debug_mode;
        break;
      }

      // optional bool debug_mode = 17;
      case 17: {
        if (tag == 136) {
         parse_debug_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debug_mode_)));
          set_has_debug_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt.internal.msg.CameraOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt.internal.msg.CameraOptions)
  return false;
#undef DO_
}

void CameraOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt.internal.msg.CameraOptions)
  // optional .gt.internal.msg.HardwareCameraParameters hw_params = 1;
  if (has_hw_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hw_params(), output);
  }

  // optional .gt.internal.msg.PictureCameraParameters p_params = 2;
  if (has_p_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->p_params(), output);
  }

  // optional .gt.internal.msg.AutoExposureParameters auto_exp_params = 3;
  if (has_auto_exp_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->auto_exp_params(), output);
  }

  // optional .gt.internal.msg.CalibrationParameters calib_params = 4;
  if (has_calib_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->calib_params(), output);
  }

  // optional .gt.internal.msg.RecROIs rec_rois = 5;
  if (has_rec_rois()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rec_rois(), output);
  }

  // optional bool ball_recognize_enable = 6;
  if (has_ball_recognize_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->ball_recognize_enable(), output);
  }

  // optional bool debug_enable = 7;
  if (has_debug_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->debug_enable(), output);
  }

  // optional .gt.internal.msg.RecognizeParameters rec_params = 8;
  if (has_rec_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->rec_params(), output);
  }

  // optional string desc = 9;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->desc(), output);
  }

  // optional .gt.internal.msg.CameraType cam_type = 10;
  if (has_cam_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->cam_type(), output);
  }

  // required string id = 11;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->id(), output);
  }

  // optional bool save_parameters = 12;
  if (has_save_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->save_parameters(), output);
  }

  // optional .gt.internal.msg.StreamCameraParameters stream_params = 13;
  if (has_stream_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->stream_params(), output);
  }

  // optional bool auto_exposure_enable = 14;
  if (has_auto_exposure_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->auto_exposure_enable(), output);
  }

  // required bool main_add_mode = 15;
  if (has_main_add_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->main_add_mode(), output);
  }

  // optional int32 main_each = 16;
  if (has_main_each()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->main_each(), output);
  }

  // optional bool debug_mode = 17;
  if (has_debug_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->debug_mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gt.internal.msg.CameraOptions)
}

::google::protobuf::uint8* CameraOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt.internal.msg.CameraOptions)
  // optional .gt.internal.msg.HardwareCameraParameters hw_params = 1;
  if (has_hw_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hw_params(), target);
  }

  // optional .gt.internal.msg.PictureCameraParameters p_params = 2;
  if (has_p_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->p_params(), target);
  }

  // optional .gt.internal.msg.AutoExposureParameters auto_exp_params = 3;
  if (has_auto_exp_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->auto_exp_params(), target);
  }

  // optional .gt.internal.msg.CalibrationParameters calib_params = 4;
  if (has_calib_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->calib_params(), target);
  }

  // optional .gt.internal.msg.RecROIs rec_rois = 5;
  if (has_rec_rois()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rec_rois(), target);
  }

  // optional bool ball_recognize_enable = 6;
  if (has_ball_recognize_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->ball_recognize_enable(), target);
  }

  // optional bool debug_enable = 7;
  if (has_debug_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->debug_enable(), target);
  }

  // optional .gt.internal.msg.RecognizeParameters rec_params = 8;
  if (has_rec_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->rec_params(), target);
  }

  // optional string desc = 9;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->desc(), target);
  }

  // optional .gt.internal.msg.CameraType cam_type = 10;
  if (has_cam_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->cam_type(), target);
  }

  // required string id = 11;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->id(), target);
  }

  // optional bool save_parameters = 12;
  if (has_save_parameters()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->save_parameters(), target);
  }

  // optional .gt.internal.msg.StreamCameraParameters stream_params = 13;
  if (has_stream_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->stream_params(), target);
  }

  // optional bool auto_exposure_enable = 14;
  if (has_auto_exposure_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->auto_exposure_enable(), target);
  }

  // required bool main_add_mode = 15;
  if (has_main_add_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->main_add_mode(), target);
  }

  // optional int32 main_each = 16;
  if (has_main_each()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->main_each(), target);
  }

  // optional bool debug_mode = 17;
  if (has_debug_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->debug_mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gt.internal.msg.CameraOptions)
  return target;
}

int CameraOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .gt.internal.msg.HardwareCameraParameters hw_params = 1;
    if (has_hw_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hw_params());
    }

    // optional .gt.internal.msg.PictureCameraParameters p_params = 2;
    if (has_p_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->p_params());
    }

    // optional .gt.internal.msg.AutoExposureParameters auto_exp_params = 3;
    if (has_auto_exp_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->auto_exp_params());
    }

    // optional .gt.internal.msg.CalibrationParameters calib_params = 4;
    if (has_calib_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->calib_params());
    }

    // optional .gt.internal.msg.RecROIs rec_rois = 5;
    if (has_rec_rois()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rec_rois());
    }

    // optional bool ball_recognize_enable = 6;
    if (has_ball_recognize_enable()) {
      total_size += 1 + 1;
    }

    // optional bool debug_enable = 7;
    if (has_debug_enable()) {
      total_size += 1 + 1;
    }

    // optional .gt.internal.msg.RecognizeParameters rec_params = 8;
    if (has_rec_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rec_params());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string desc = 9;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional .gt.internal.msg.CameraType cam_type = 10;
    if (has_cam_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cam_type());
    }

    // required string id = 11;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional bool save_parameters = 12;
    if (has_save_parameters()) {
      total_size += 1 + 1;
    }

    // optional .gt.internal.msg.StreamCameraParameters stream_params = 13;
    if (has_stream_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stream_params());
    }

    // optional bool auto_exposure_enable = 14;
    if (has_auto_exposure_enable()) {
      total_size += 1 + 1;
    }

    // required bool main_add_mode = 15;
    if (has_main_add_mode()) {
      total_size += 1 + 1;
    }

    // optional int32 main_each = 16;
    if (has_main_each()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->main_each());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool debug_mode = 17;
    if (has_debug_mode()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraOptions::MergeFrom(const CameraOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hw_params()) {
      mutable_hw_params()->::gt::internal::msg::HardwareCameraParameters::MergeFrom(from.hw_params());
    }
    if (from.has_p_params()) {
      mutable_p_params()->::gt::internal::msg::PictureCameraParameters::MergeFrom(from.p_params());
    }
    if (from.has_auto_exp_params()) {
      mutable_auto_exp_params()->::gt::internal::msg::AutoExposureParameters::MergeFrom(from.auto_exp_params());
    }
    if (from.has_calib_params()) {
      mutable_calib_params()->::gt::internal::msg::CalibrationParameters::MergeFrom(from.calib_params());
    }
    if (from.has_rec_rois()) {
      mutable_rec_rois()->::gt::internal::msg::RecROIs::MergeFrom(from.rec_rois());
    }
    if (from.has_ball_recognize_enable()) {
      set_ball_recognize_enable(from.ball_recognize_enable());
    }
    if (from.has_debug_enable()) {
      set_debug_enable(from.debug_enable());
    }
    if (from.has_rec_params()) {
      mutable_rec_params()->::gt::internal::msg::RecognizeParameters::MergeFrom(from.rec_params());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_cam_type()) {
      set_cam_type(from.cam_type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_save_parameters()) {
      set_save_parameters(from.save_parameters());
    }
    if (from.has_stream_params()) {
      mutable_stream_params()->::gt::internal::msg::StreamCameraParameters::MergeFrom(from.stream_params());
    }
    if (from.has_auto_exposure_enable()) {
      set_auto_exposure_enable(from.auto_exposure_enable());
    }
    if (from.has_main_add_mode()) {
      set_main_add_mode(from.main_add_mode());
    }
    if (from.has_main_each()) {
      set_main_each(from.main_each());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_debug_mode()) {
      set_debug_mode(from.debug_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraOptions::CopyFrom(const CameraOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraOptions::IsInitialized() const {
  if ((_has_bits_[0] & 0x00004400) != 0x00004400) return false;

  if (has_p_params()) {
    if (!this->p_params().IsInitialized()) return false;
  }
  if (has_calib_params()) {
    if (!this->calib_params().IsInitialized()) return false;
  }
  if (has_rec_rois()) {
    if (!this->rec_rois().IsInitialized()) return false;
  }
  return true;
}

void CameraOptions::Swap(CameraOptions* other) {
  if (other != this) {
    std::swap(hw_params_, other->hw_params_);
    std::swap(p_params_, other->p_params_);
    std::swap(auto_exp_params_, other->auto_exp_params_);
    std::swap(calib_params_, other->calib_params_);
    std::swap(rec_rois_, other->rec_rois_);
    std::swap(ball_recognize_enable_, other->ball_recognize_enable_);
    std::swap(debug_enable_, other->debug_enable_);
    std::swap(rec_params_, other->rec_params_);
    std::swap(desc_, other->desc_);
    std::swap(cam_type_, other->cam_type_);
    std::swap(id_, other->id_);
    std::swap(save_parameters_, other->save_parameters_);
    std::swap(stream_params_, other->stream_params_);
    std::swap(auto_exposure_enable_, other->auto_exposure_enable_);
    std::swap(main_add_mode_, other->main_add_mode_);
    std::swap(main_each_, other->main_each_);
    std::swap(debug_mode_, other->debug_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraOptions_descriptor_;
  metadata.reflection = CameraOptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerOptions::kWriteToDiskFieldNumber;
const int ServerOptions::kWriteUncompressedFieldNumber;
#endif  // !_MSC_VER

ServerOptions::ServerOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt.internal.msg.ServerOptions)
}

void ServerOptions::InitAsDefaultInstance() {
}

ServerOptions::ServerOptions(const ServerOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt.internal.msg.ServerOptions)
}

void ServerOptions::SharedCtor() {
  _cached_size_ = 0;
  write_to_disk_ = false;
  write_uncompressed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerOptions::~ServerOptions() {
  // @@protoc_insertion_point(destructor:gt.internal.msg.ServerOptions)
  SharedDtor();
}

void ServerOptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerOptions_descriptor_;
}

const ServerOptions& ServerOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2einternal_2eproto();
  return *default_instance_;
}

ServerOptions* ServerOptions::default_instance_ = NULL;

ServerOptions* ServerOptions::New() const {
  return new ServerOptions;
}

void ServerOptions::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServerOptions*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(write_to_disk_, write_uncompressed_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt.internal.msg.ServerOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool write_to_disk = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &write_to_disk_)));
          set_has_write_to_disk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_write_uncompressed;
        break;
      }

      // optional bool write_uncompressed = 2;
      case 2: {
        if (tag == 16) {
         parse_write_uncompressed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &write_uncompressed_)));
          set_has_write_uncompressed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt.internal.msg.ServerOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt.internal.msg.ServerOptions)
  return false;
#undef DO_
}

void ServerOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt.internal.msg.ServerOptions)
  // optional bool write_to_disk = 1;
  if (has_write_to_disk()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->write_to_disk(), output);
  }

  // optional bool write_uncompressed = 2;
  if (has_write_uncompressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->write_uncompressed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gt.internal.msg.ServerOptions)
}

::google::protobuf::uint8* ServerOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt.internal.msg.ServerOptions)
  // optional bool write_to_disk = 1;
  if (has_write_to_disk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->write_to_disk(), target);
  }

  // optional bool write_uncompressed = 2;
  if (has_write_uncompressed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->write_uncompressed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gt.internal.msg.ServerOptions)
  return target;
}

int ServerOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool write_to_disk = 1;
    if (has_write_to_disk()) {
      total_size += 1 + 1;
    }

    // optional bool write_uncompressed = 2;
    if (has_write_uncompressed()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerOptions::MergeFrom(const ServerOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_write_to_disk()) {
      set_write_to_disk(from.write_to_disk());
    }
    if (from.has_write_uncompressed()) {
      set_write_uncompressed(from.write_uncompressed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerOptions::CopyFrom(const ServerOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerOptions::IsInitialized() const {

  return true;
}

void ServerOptions::Swap(ServerOptions* other) {
  if (other != this) {
    std::swap(write_to_disk_, other->write_to_disk_);
    std::swap(write_uncompressed_, other->write_uncompressed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerOptions_descriptor_;
  metadata.reflection = ServerOptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FrameTime::kComputerTimeFieldNumber;
const int FrameTime::kCameraTimeFieldNumber;
const int FrameTime::kFrameFieldNumber;
#endif  // !_MSC_VER

FrameTime::FrameTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt.internal.msg.FrameTime)
}

void FrameTime::InitAsDefaultInstance() {
}

FrameTime::FrameTime(const FrameTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt.internal.msg.FrameTime)
}

void FrameTime::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  computer_time_ = GOOGLE_LONGLONG(0);
  camera_time_ = GOOGLE_LONGLONG(0);
  frame_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameTime::~FrameTime() {
  // @@protoc_insertion_point(destructor:gt.internal.msg.FrameTime)
  SharedDtor();
}

void FrameTime::SharedDtor() {
  if (frame_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete frame_;
  }
  if (this != default_instance_) {
  }
}

void FrameTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameTime_descriptor_;
}

const FrameTime& FrameTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2einternal_2eproto();
  return *default_instance_;
}

FrameTime* FrameTime::default_instance_ = NULL;

FrameTime* FrameTime::New() const {
  return new FrameTime;
}

void FrameTime::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FrameTime*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(computer_time_, camera_time_);
    if (has_frame()) {
      if (frame_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        frame_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt.internal.msg.FrameTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 computer_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &computer_time_)));
          set_has_computer_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_camera_time;
        break;
      }

      // optional int64 camera_time = 2;
      case 2: {
        if (tag == 16) {
         parse_camera_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &camera_time_)));
          set_has_camera_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_frame;
        break;
      }

      // optional bytes frame = 3;
      case 3: {
        if (tag == 26) {
         parse_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_frame()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt.internal.msg.FrameTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt.internal.msg.FrameTime)
  return false;
#undef DO_
}

void FrameTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt.internal.msg.FrameTime)
  // optional int64 computer_time = 1;
  if (has_computer_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->computer_time(), output);
  }

  // optional int64 camera_time = 2;
  if (has_camera_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->camera_time(), output);
  }

  // optional bytes frame = 3;
  if (has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->frame(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gt.internal.msg.FrameTime)
}

::google::protobuf::uint8* FrameTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt.internal.msg.FrameTime)
  // optional int64 computer_time = 1;
  if (has_computer_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->computer_time(), target);
  }

  // optional int64 camera_time = 2;
  if (has_camera_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->camera_time(), target);
  }

  // optional bytes frame = 3;
  if (has_frame()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->frame(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gt.internal.msg.FrameTime)
  return target;
}

int FrameTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 computer_time = 1;
    if (has_computer_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->computer_time());
    }

    // optional int64 camera_time = 2;
    if (has_camera_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->camera_time());
    }

    // optional bytes frame = 3;
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->frame());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameTime::MergeFrom(const FrameTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_computer_time()) {
      set_computer_time(from.computer_time());
    }
    if (from.has_camera_time()) {
      set_camera_time(from.camera_time());
    }
    if (from.has_frame()) {
      set_frame(from.frame());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameTime::CopyFrom(const FrameTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameTime::IsInitialized() const {

  return true;
}

void FrameTime::Swap(FrameTime* other) {
  if (other != this) {
    std::swap(computer_time_, other->computer_time_);
    std::swap(camera_time_, other->camera_time_);
    std::swap(frame_, other->frame_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameTime_descriptor_;
  metadata.reflection = FrameTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DebugInfo::kMessageFieldNumber;
const int DebugInfo::kSkipDebugFramesFieldNumber;
#endif  // !_MSC_VER

DebugInfo::DebugInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gt.internal.msg.DebugInfo)
}

void DebugInfo::InitAsDefaultInstance() {
}

DebugInfo::DebugInfo(const DebugInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gt.internal.msg.DebugInfo)
}

void DebugInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skipdebugframes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugInfo::~DebugInfo() {
  // @@protoc_insertion_point(destructor:gt.internal.msg.DebugInfo)
  SharedDtor();
}

void DebugInfo::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void DebugInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugInfo_descriptor_;
}

const DebugInfo& DebugInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2einternal_2eproto();
  return *default_instance_;
}

DebugInfo* DebugInfo::default_instance_ = NULL;

DebugInfo* DebugInfo::New() const {
  return new DebugInfo;
}

void DebugInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
    skipdebugframes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DebugInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gt.internal.msg.DebugInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_skipDebugFrames;
        break;
      }

      // optional int32 skipDebugFrames = 2;
      case 2: {
        if (tag == 16) {
         parse_skipDebugFrames:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skipdebugframes_)));
          set_has_skipdebugframes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gt.internal.msg.DebugInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gt.internal.msg.DebugInfo)
  return false;
#undef DO_
}

void DebugInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gt.internal.msg.DebugInfo)
  // required string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // optional int32 skipDebugFrames = 2;
  if (has_skipdebugframes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skipdebugframes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gt.internal.msg.DebugInfo)
}

::google::protobuf::uint8* DebugInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gt.internal.msg.DebugInfo)
  // required string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // optional int32 skipDebugFrames = 2;
  if (has_skipdebugframes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skipdebugframes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gt.internal.msg.DebugInfo)
  return target;
}

int DebugInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional int32 skipDebugFrames = 2;
    if (has_skipdebugframes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skipdebugframes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DebugInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DebugInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DebugInfo::MergeFrom(const DebugInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_skipdebugframes()) {
      set_skipdebugframes(from.skipdebugframes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DebugInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugInfo::CopyFrom(const DebugInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DebugInfo::Swap(DebugInfo* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(skipdebugframes_, other->skipdebugframes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DebugInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugInfo_descriptor_;
  metadata.reflection = DebugInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg
}  // namespace internal
}  // namespace gt

// @@protoc_insertion_point(global_scope)
